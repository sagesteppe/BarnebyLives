writer_fide( collection_examples[31,] )
collection_examples[31,]
collection_examples[31,]
writer_fide( collection_examples[31,] )
phacelia <- collection_examples[31,]
writer_fide( phacelia)
writer_fide <- function(x){if (is.na(x$Fide)){""} else {
paste0('Fide: *',
sub(' Flora ', ' Fl. ', x$Fide),
'*, by: ', x$Determined_by, ' on ', x$Determined_date)}
}
writer_fide(phacelia)
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(dpi = 300)
knitr::opts_chunk$set(message = FALSE)
knitr::opts_chunk$set(warning = FALSE)
writer_fide(data$Fide)
writer_fide(data)
#' write values and collapse NAs
#'
#' This function will determine whether to print or hide a variable onto labels
#' @param x the input character of length 1
#' @param italics italicize or not? Boolean, defualts to FALSE
#' @examples
#' writer(collection_examples[9,'Binomial_authority'] )
#' writer(collection_examples[9, 'Infraspecies'], italics = TRUE )
#' @export
writer <- function(x, italics){
if(missing(italics)){italics <- FALSE}
if (is.na(x)){""} else if(italics == FALSE){x} else (paste0('*', x, '*'))
}
#'
#' This function uses the BarnebyLives custom template to write labels ala
#' a mail merge. Each label will be written as a separate file with the dimensions
#' of 4x4 inches.
#' @param x a path to a csv of labels which have been cleaned with BL, and which the analyst
#' has evaluated for conflicts.
#' @param outdir an output directory to hold the files.
#' @example
#' label_writer(collection_examples, BL_label_example)
#' @export
label_writer <- function(x, outdir) {
if(missing(outdir)){outdir <- file.path(getwd(), 'Labels') }
if (!dir.exists(outdir)){ dir.create(outdir) }
label_info <- read.csv(file = x) |>
dplyr::mutate(UNIQUEID = paste0(x$Primary_Collector, data$Collection_number))
for (i in 1:nrow(label_info)){
rmarkdown::render(
input = "Labels-skeleton.Rmd",
output_format = "pdf_document",
output_file = paste0(i$UNIQUEID, ".pdf"),
output_dir = outdir)
}
}
label_writer(collection_info, outdir)
library(BarnebyLives)
label_writer(collection_info)
collection_info
label_writer(collection_examples)
#'
#' This function uses the BarnebyLives custom template to write labels ala
#' a mail merge. Each label will be written as a separate file with the dimensions
#' of 4x4 inches.
#' @param x a path to a csv of labels which have been cleaned with BL, and which the analyst
#' has evaluated for conflicts.
#' @param outdir an output directory to hold the files.
#' @example
#' label_writer(collection_examples, BL_label_example)
#' @export
label_writer <- function(x, outdir) {
if(missing(outdir)){outdir <- file.path(getwd(), 'Labels') }
if (!dir.exists(outdir)){ dir.create(outdir) }
#	label_info <- read.csv(file = x) |>
collection_examples |>
dplyr::mutate(UNIQUEID = paste0(x$Primary_Collector, data$Collection_number))
for (i in 1:nrow(label_info)){
rmarkdown::render(
input = "Labels-skeleton.Rmd",
output_format = "pdf_document",
output_file = paste0(i$UNIQUEID, ".pdf"),
output_dir = outdir)
}
}
label_writer(collection_examples)
#'
#' This function uses the BarnebyLives custom template to write labels ala
#' a mail merge. Each label will be written as a separate file with the dimensions
#' of 4x4 inches.
#' @param x a path to a csv of labels which have been cleaned with BL, and which the analyst
#' has evaluated for conflicts.
#' @param outdir an output directory to hold the files.
#' @example
#' label_writer(collection_examples, BL_label_example)
#' @export
label_writer <- function(x, outdir) {
if(missing(outdir)){outdir <- file.path(getwd(), 'Labels') }
if (!dir.exists(outdir)){ dir.create(outdir) }
#	label_info <- read.csv(file = x) |>
x |>
dplyr::mutate(UNIQUEID = paste0(x$Primary_Collector, data$Collection_number))
for (i in 1:nrow(label_info)){
rmarkdown::render(
input = "Labels-skeleton.Rmd",
output_format = "pdf_document",
output_file = paste0(i$UNIQUEID, ".pdf"),
output_dir = outdir)
}
}
label_writer(collection_examples)
#'
#' This function uses the BarnebyLives custom template to write labels ala
#' a mail merge. Each label will be written as a separate file with the dimensions
#' of 4x4 inches.
#' @param x a path to a csv of labels which have been cleaned with BL, and which the analyst
#' has evaluated for conflicts.
#' @param outdir an output directory to hold the files.
#' @example
#' label_writer(collection_examples, BL_label_example)
#' @export
label_writer <- function(x, outdir) {
if(missing(outdir)){outdir <- file.path(getwd(), 'Labels') }
if (!dir.exists(outdir)){ dir.create(outdir) }
#	label_info <- read.csv(file = x) |>
x |>
dplyr::mutate(UNIQUEID = paste0(x$Primary_Collector, x$Collection_number))
for (i in 1:nrow(label_info)){
rmarkdown::render(
input = "Labels-skeleton.Rmd",
output_format = "pdf_document",
output_file = paste0(i$UNIQUEID, ".pdf"),
output_dir = outdir)
}
}
label_writer(collection_examples)
#'
#' This function uses the BarnebyLives custom template to write labels ala
#' a mail merge. Each label will be written as a separate file with the dimensions
#' of 4x4 inches.
#' @param x a path to a csv of labels which have been cleaned with BL, and which the analyst
#' has evaluated for conflicts.
#' @param outdir an output directory to hold the files.
#' @example
#' label_writer(collection_examples, BL_label_example)
#' @export
label_writer <- function(x, outdir) {
if(missing(outdir)){outdir <- file.path(getwd(), 'Labels') }
if (!dir.exists(outdir)){ dir.create(outdir) }
#	label_info <- read.csv(file = x) |>
label_info <- x |>
dplyr::mutate(UNIQUEID = paste0(x$Primary_Collector, x$Collection_number))
for (i in 1:nrow(label_info)){
rmarkdown::render(
input = "Labels-skeleton.Rmd",
output_format = "pdf_document",
output_file = paste0(i$UNIQUEID, ".pdf"),
output_dir = outdir)
}
}
label_writer(collection_examples)
?render
knitr::opts_chunk$set(eval = FALSE)
knitr::opts_chunk$set(message = FALSE)
knitr::opts_chunk$set(warning = FALSE)
devtools::install_github('sagesteppe/BarnebyLives')
#devtools::install_github('sagesteppe/BarnebyLives')
library(BarnebyLives)
library(tidyverse)
local <- file.path(path.expand('~'), 'Documents', 'assoRted', 'Barneby_Lives_dev', 'LabelStyles')
l.nevadense <- collection_examples |>
filter(Collection_number == 2823) |>
mutate(
Project_name = 'Custom Fonts',
Coordinate_uncertainty = '+/- 5m',
Notes = 'Permit No.: XXXXX from Agency ZYX, Date: XX.XX.2025. Collected under NSF XXXXX, "catchy project name". DNA extracted from silica gel dried leaf tissue (additional material in ZYX biorepository) accession No.: XXXXX. Sequences available on NCBI SRA as PRJXYZYXYXY.'
)
write.csv(l.nevadense, file.path(local, 'SoS-ExampleCollection.csv'), row.names = F)
l.nevadense <- collection_examples |>
filter(Collection_number == 2823) |>
mutate(
Project_name = 'Custom Fonts',
Coordinate_uncertainty = '+/- 5m',
Notes = 'Permit No.: XXXXX from Agency ZYX, Date: XX.XX.2025. Collected under NSF XXXXX, "catchy project name". DNA extracted from silica gel dried leaf tissue (additional material in ZYX biorepository) accession No.: XXXXX. Sequences available on NCBI SRA as PRJXYZYXYXY.'
)
p2lib <- file.path(
system.file(package = 'BarnebyLives'),
'rmarkdown', 'templates', 'labels', 'skeleton'
)
# here we copy over one of the skeletons which we are going to modify in this example
file.copy(
from = file.path(p2lib, 'skeleton-research.Rmd'),
to = file.path(local, 'skeleton-research.Rmd'),
overwrite = FALSE
)
local <- file.path(path.expand('~'), 'Documents', 'assoRted', 'Barneby_Lives_dev', 'LabelStyles')
purrr::walk(
.x = l.nevadense$Collection_number,
.f = function(x) {
rmarkdown::render(
input = file.path(local, 'skeleton-research.Rmd'),
output_file = file.path(local, as.character(glue::glue("research{x}.pdf"))),
params = list(Collection_number = {.x})
)
}
)
purrr::walk(
.x = l.nevadense$Collection_number,
.f = function(x) {
rmarkdown::render(
input = file.path(local, 'skeleton-research.Rmd'),
output_file = file.path(local, as.character(glue::glue("research{x}.pdf"))),
params = list(Collection_number = .x)
)
}
)
purrr::walk(
.x = l.nevadense$Collection_number,
~ rmarkdown::render(
input = file.path(local, 'skeleton-research.Rmd'),
output_file = file.path(local, paste0('Spaced-SOS-', glue::glue("{.x}.pdf"))),
params = list(Collection_number = {.x})
)
)
purrr::walk(
.x = l.nevadense$Collection_number,
~ rmarkdown::render(
input = file.path(local, 'skeleton-research.Rmd'),
output_file = file.path(local, paste0('Spaced-SOS-', glue::glue("{.x}.pdf"))),
params = list(Collection_number = {.x})
)
)
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(dpi = 300)
knitr::opts_chunk$set(message = FALSE)
knitr::opts_chunk$set(warning = FALSE)
local <- file.path(path.expand('~'), 'Documents', 'assoRted', 'Barneby_Lives_dev', 'LabelStyles')
record <- read.csv(file.path(local, 'SoS-ExampleCollection.csv')) |>
sf::st_drop_geometry() |>
data.frame() |>
dplyr::filter(Collection_number == params$Collection_number)
purrr::walk(
.x = l.nevadense$Collection_number,
~ rmarkdown::render(
input = file.path(local, 'skeleton-research.Rmd'),
output_file = file.path(local, paste0('Spaced-SOS-', glue::glue("{.x}.pdf"))),
params = list(Collection_number = {.x})
)
)
getwd()
record <- read.csv(file.path(local, 'SoS-ExampleCollection.csv')) |>
dplyr::filter(Collection_number == params$Collection_number)
purrr::walk(
.x = l.nevadense$Collection_number,
~ rmarkdown::render(
input = file.path(local, 'skeleton-research.Rmd'),
output_file = file.path(local, paste0('Spaced-SOS-', glue::glue("{.x}.pdf"))),
params = list(Collection_number = {.x})
)
)
rm(params)
purrr::walk(
.x = l.nevadense$Collection_number,
~ rmarkdown::render(
input = file.path(local, 'skeleton-research.Rmd'),
output_file = file.path(local, paste0('Spaced-SOS-', glue::glue("{.x}.pdf"))),
params = list(Collection_number = {.x})
)
)
#devtools::install_github('sagesteppe/BarnebyLives')
library(BarnebyLives)
library(tidyverse)
local <- file.path(path.expand('~'), 'Documents', 'assoRted', 'Barneby_Lives_dev', 'LabelStyles')
l.nevadense <- collection_examples |>
filter(Collection_number == 2823) |>
mutate(
Project_name = 'Custom Fonts',
Coordinate_uncertainty = '+/- 5m',
Notes = 'Permit No.: XXXXX from Agency ZYX, Date: XX.XX.2025. Collected under NSF XXXXX, "catchy project name". DNA extracted from silica gel dried leaf tissue (additional material in ZYX biorepository) accession No.: XXXXX. Sequences available on NCBI SRA as PRJXYZYXYXY.'
)
write.csv(l.nevadense, file.path(local, 'SoS-ExampleCollection.csv'), row.names = F)
p2lib <- file.path(
system.file(package = 'BarnebyLives'),
'rmarkdown', 'templates', 'labels', 'skeleton'
)
# here we copy over one of the skeletons which we are going to modify in this example
file.copy(
from = file.path(p2lib, 'skeleton-research.Rmd'),
to = file.path(local, 'skeleton-research.Rmd'),
overwrite = FALSE
)
purrr::walk(
.x = l.nevadense$Collection_number,
~ rmarkdown::render(
input = file.path(local, 'skeleton-research.Rmd'),
output_file = file.path(local, paste0('research', glue::glue("{.x}.pdf"))),
params = list(Collection_number = {.x})
)
)
local <- file.path(path.expand('~'), 'Documents', 'assoRted', 'Barneby_Lives_dev', 'LabelStyles')
record <- read.csv(file.path(local, 'SoS-ExampleCollection.csv')) #|>
View(record)
l.nevadense <- collection_examples |>
filter(Collection_number == 2823) |>
mutate(
Project_name = 'Research Notes',
Coordinate_uncertainty = '+/- 5m',
Notes = 'Permit No.: XXXXX from Agency ZYX, Date: XX.XX.2025. Collected under NSF XXXXX, "catchy project name". DNA extracted from silica gel dried leaf tissue (additional material in ZYX biorepository) accession No.: XXXXX. Sequences available on NCBI SRA as PRJXYZYXYXY.'
)
#devtools::install_github('sagesteppe/BarnebyLives')
library(BarnebyLives)
library(tidyverse)
local <- file.path(path.expand('~'), 'Documents', 'assoRted', 'Barneby_Lives_dev', 'LabelStyles')
l.nevadense <- collection_examples |>
filter(Collection_number == 2823) |>
mutate(
Project_name = 'Research Notes',
Coordinate_uncertainty = '+/- 5m',
Notes = 'Permit No.: XXXXX from Agency ZYX, Date: XX.XX.2025. Collected under NSF XXXXX, "catchy project name". DNA extracted from silica gel dried leaf tissue (additional material in ZYX biorepository) accession No.: XXXXX. Sequences available on NCBI SRA as PRJXYZYXYXY.'
)
write.csv(l.nevadense, file.path(local, 'SoS-ExampleCollection.csv'), row.names = F)
p2lib <- file.path(
system.file(package = 'BarnebyLives'),
'rmarkdown', 'templates', 'labels', 'skeleton'
)
# here we copy over one of the skeletons which we are going to modify in this example
file.copy(
from = file.path(p2lib, 'skeleton-research.Rmd'),
to = file.path(local, 'skeleton-research.Rmd'),
overwrite = FALSE
)
purrr::walk(
.x = l.nevadense$Collection_number,
~ rmarkdown::render(
input = file.path(local, 'skeleton-research.Rmd'),
output_file = file.path(local, paste0('research', glue::glue("{.x}.pdf"))),
params = list(Collection_number = {.x})
)
)
l.nevadense$Collection_number
file.path(local, 'skeleton-research.Rmd')
file.exists( file.path(local, 'skeleton-research.Rmd'))
# devtools::install_github('sagesteppe/BarnebyLives')
library(tidyverse)
library(BarnebyLives)
dplyr::select(data, starts_with(c('latitude', 'longitude'))) %>%
utils::head()
data <- dms2dd(data, dms = F)
dplyr::select(data, starts_with(c('latitude', 'longitude'))) %>%
utils::head()
library(crayon)
dplyr::select(data, starts_with('Date')) %>%
dplyr::mutate(Date_digital = crayon::green(Date_digital)) |>
utils::head()
mtcats |>
mutate(mpg_green = crayon::green(mpg))
mtcars |>
mutate(mpg_green = crayon::green(mpg))
mtcars |>
mutate(mpg_green = crayon::green(mpg))
mtcars |>
mutate(mpg_green = crayon::green(mpg))
mtcars |>
mutate(mpg_green = crayon::green(mpg))
mtcars |>
mutate(mpg_green = crayon::green(mpg)) |>
head()
mtcars |>
mutate(mpg_green = crayon::green(mpg)) |>
select(mpg, mpg_green) |>
head()
mtcars |>
mutate(mpg_green = crayon::green(mpg)) |>
select(mpg, mpg_green) |>
head() |>
cat()
df$mpg <- crayon::green(df$mpg)
mtcars$mpg <- crayon::green(mtcars$mpg)
print(mtcars)
print(mtcars)
install.packages('coloDF')
install.packages('colorDF')
install_github("https://github.com/january3/colorDF")
remotes::install_github("https://github.com/january3/colorDF")
data(starwars)
sw <- starwars[, c(1:3, 7:8)]
sw %>% colorDF
library(colorDF)
sw <- starwars[, c(1:3, 7:8)]
sw %>% colorDF
mtcars %>% as_tibble %>% colorDF
options(colorDF_theme="universal")
mtcars %>% as_tibble %>% colorDF
options(colorDF_theme="theme bw")
mtcars %>% as_tibble %>% colorDF
View(mtcars)
rm(mtcars)
library(colorDF)
options(colorDF_theme="theme bw")
mtcars %>% as_tibble %>% colorDF
knitr::knit_hooks$set(output = function(x, options){
paste0(
'<pre class="r-output"><code>',
fansi::sgr_to_html(x = htmltools::htmlEscape(x), warn = FALSE),
'</code></pre>'
)
})
mtcars %>% as_tibble %>% colorDF
options(colorDF_theme="universal")
mtcars %>% as_tibble %>% colorDF
# devtools::install_github('sagesteppe/BarnebyLives')
library(tidyverse)
library(BarnebyLives)
library(colorDF)
options(colorDF_theme="theme dark")
mtcars %>% as_tibble %>% colorDF
options(colorDF_theme="theme bw")
mtcars %>% as_tibble %>% colorDF
options(colorDF_theme="theme wb")
mtcars %>% as_tibble %>% colorDF
mtcars %>% colorDF
options(colorDF_theme="universal")
mtcars %>% colorDF
options(colorDF_n=5)
mtcars %>% colorDF
options(colorDF_n=5, colorDF_theme="universal")
dplyr::select(data, starts_with('Date')) %>%
dplyr::mutate(Date_digital = crayon::green(Date_digital)) |>
colorDF
dplyr::select(data, starts_with('Date')) %>%
dplyr::mutate(Date_digital = crayon::green(Date_digital)) |>
colorDF
dplyr::select(data, starts_with('Date')) %>%
dplyr::mutate(Date_digital = crayon::green(Date_digital)) %>%
colorDF
dplyr::select(data, starts_with('Date')) %>%
dplyr::mutate(Date_digital = crayon::green(Date_digital)) %>%
colorDF()
data <- date_parser(df, coll_date = 'Date_digital', det_date = 'Determined_date')
df <- uncleaned_collection_examples
data <- date_parser(df, coll_date = 'Date_digital', det_date = 'Determined_date')
dplyr::select(data, starts_with('Date')) %>%
dplyr::mutate(Date_digital = crayon::green(Date_digital)) %>%
colorDF()
options(colorDF_n=5, colorDF_theme="theme bw")
dplyr::select(data, starts_with('Date')) %>%
dplyr::mutate(Date_digital = crayon::green(Date_digital)) %>%
colorDF()
data
data %>%
colorDF()
dplyr::select(data, starts_with('Date')) %>%
colorDF()
dplyr::select(data, starts_with('Date')) %>%
# for pretty printing
dplyr::mutate(Date_digital = crayon::green(Date_digital)) %>%
colorDF()
data <- dms2dd(data, dms = F)
dplyr::select(data, starts_with(c('latitude', 'longitude'))) %>%
utils::head()
dplyr::select(data, starts_with(c('latitude', 'longitude')))
# devtools::install_github('sagesteppe/BarnebyLives')
library(tidyverse)
library(BarnebyLives)
library(colorDF)
options(colorDF_n=5, colorDF_theme="theme bw")
df <- uncleaned_collection_examples
data <- date_parser(df, coll_date = 'Date_digital', det_date = 'Determined_date')
dplyr::select(data, starts_with('Date')) %>%
# for pretty printing
dplyr::mutate(Date_digital = crayon::green(Date_digital)) %>%
colorDF()
dplyr::select(data, starts_with(c('latitude', 'longitude')))
dplyr::select(data, starts_with(c('latitude', 'longitude')))
dplyr::select(data, starts_with(c('latitude', 'longitude')))%>%
colorDF()
??dms2dd
coords <- data.frame(
input_longitude = runif(15, min = -120, max = -100),
input_latitude = runif(15, min = 35, max = 48)
)
coords
data <- autofill_checker(data)
data <- dms2dd(data, dms = F)
dplyr::select(data, starts_with(c('latitude', 'longitude'))) %>%
utils::head()
data <- autofill_checker(data)
dplyr::select(data, Long_AutoFill_Flag, Lat_AutoFill_Flag) |>
tidyr::drop_na() |>
utils::head()
data
View(data)
dplyr::select(data, Long_AutoFill_Flag, Lat_AutoFill_Flag) |>
tidyr::drop_na()
dplyr::select(data, Long_AutoFill_Flag, Lat_AutoFill_Flag) |>
utils::head()
data <- coords2sf(data)
head(data) # now we can see that it is an sf object
str(data)
data |>
select(Collection_number, geometry)
data |>
select(Collection_number, geometry) |>
str(data) # now we can see that it is an sf object
data |>
select(Collection_number, geometry) |>
str() # now we can see that it is an sf object
p <- '/media/steppe/hdd/Barneby_Lives-dev/geodata'
data <- political_grabber(data, y = 'Collection_number', path = p)
data <- site_writer(data, path = p)
dplyr::select(data, starts_with('Date')) %>%
head()
dplyr::select(data, starts_with('Date')) |>
head()
