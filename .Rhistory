roxygen2::roxygenise()
warnings()
roxygen2::roxygenise()
warnings()
roxygen2::roxygenise()
warnings()
pkgload::dev_help('date_parser')
roxygen2::roxygenise()
warnings()
first50dates <- data.frame(paste0(sample(3:9, size = 50, replace = T), '-',
sample(1:29, size = 50, replace  = T), '-',
rep(2023, times = 50 )))
#' @param det_date date of determination, same format and processes as above.
#' @returns original data frame plus: x_dmy, x_day, x_month, x_year, x_text, det_date_text, columns for both parameters which are supplied as inputs
#' @example
#'first50dates <- data.frame(paste0(sample(3:9, size = 50, replace = T), '-',
#'    sample(1:29, size = 50, replace  = T), '-',
#'    rep(2023, times = 50 )))
#' head(first50dates)
#' first50dates <- date2text(first50dates)
#' head(first50dates)
#' @export
date_parser <- function(x, coll_date, det_date){
coll_date_q <- enquo(coll_date)
det_date_q <- enquo(det_date)
names_v <- c('_dmy', '_day', '_mo',  '_yr', '_text')
if(missing(det_date)){
column_names <- c(coll_date, paste0(coll_date, names_v))
} else {
column_names <- c(coll_date,
paste0(coll_date, names_v),
det_date,
paste0(det_date, names_v))
}
x_dmy <- x |>
mutate(across(.cols = c(!!coll_date_q, !!det_date_q), lubridate::mdy, .names = "{.col}_dmy")) |>
mutate(across(ends_with('_dmy'), ~ lubridate::month(.), .names = "{.col}_mo"),
across(ends_with('_dmy'), ~ lubridate::day(.), .names = "{.col}_day"),
across(ends_with('_dmy'), ~ lubridate::year(.), .names = "{.col}_yr")) |>
mutate(across(.cols = c(!!coll_date_q, !!det_date_q), date2text, .names = '{.col}_text')) |>
rename_with( ~ stringr::str_remove(., '_dmy'), matches("_dmy_.*$")) |>
relocate(any_of(column_names), .before = geometry)
return(x_dmy)
}
date_parser(first50dates)
#' @param det_date date of determination, same format and processes as above.
#' @returns original data frame plus: x_dmy, x_day, x_month, x_year, x_text, det_date_text, columns for both parameters which are supplied as inputs
#' @example
#'first50dates <- data.frame(paste0(sample(3:9, size = 50, replace = T), '-',
#'    sample(1:29, size = 50, replace  = T), '-',
#'    rep(2023, times = 50 )))
#' head(first50dates)
#' first50dates <- date2text(first50dates)
#' head(first50dates)
#' @export
date_parser <- function(x, coll_date, det_date){
coll_date_q <- rlang::enquo(coll_date)
det_date_q <- rlang::enquo(det_date)
names_v <- c('_dmy', '_day', '_mo',  '_yr', '_text')
if(missing(det_date)){
column_names <- c(coll_date, paste0(coll_date, names_v))
} else {
column_names <- c(coll_date,
paste0(coll_date, names_v),
det_date,
paste0(det_date, names_v))
}
x_dmy <- x |>
mutate(across(.cols = c(!!coll_date_q, !!det_date_q), lubridate::mdy, .names = "{.col}_dmy")) |>
mutate(across(ends_with('_dmy'), ~ lubridate::month(.), .names = "{.col}_mo"),
across(ends_with('_dmy'), ~ lubridate::day(.), .names = "{.col}_day"),
across(ends_with('_dmy'), ~ lubridate::year(.), .names = "{.col}_yr")) |>
mutate(across(.cols = c(!!coll_date_q, !!det_date_q), date2text, .names = '{.col}_text')) |>
rename_with( ~ stringr::str_remove(., '_dmy'), matches("_dmy_.*$")) |>
relocate(any_of(column_names), .before = geometry)
return(x_dmy)
}
first50dates <- data.frame(paste0(sample(3:9, size = 50, replace = T), '-',
sample(1:29, size = 50, replace  = T), '-',
rep(2023, times = 50 )))
date_parser(first50dates)
first50dates <- data.frame(collection_date = paste0(sample(3:9, size = 50, replace = T), '-',
sample(1:29, size = 50, replace  = T), '-',
rep(2023, times = 50 )))
date_parser(first50dates, coll_date = '' )
#' @param det_date date of determination, same format and processes as above.
#' @returns original data frame plus: x_dmy, x_day, x_month, x_year, x_text, det_date_text, columns for both parameters which are supplied as inputs
#' @example
#'first50dates <- data.frame(collection_date = paste0(sample(3:9, size = 50, replace = T), '-',
#'    sample(1:29, size = 50, replace  = T), '-',
#'    rep(2023, times = 50 )))
#' head(first50dates)
#' first50dates <- date2text(first50dates)
#' head(first50dates)
#' @export
date_parser <- function(x, coll_date, det_date){
coll_date_q <- rlang::enquo(coll_date)
det_date_q <- rlang::enquo(det_date)
names_v <- c('_dmy', '_day', '_mo',  '_yr', '_text')
if(missing(det_date)){
column_names <- c(coll_date, paste0(coll_date, names_v))
} else {
column_names <- c(coll_date,
paste0(coll_date, names_v),
det_date,
paste0(det_date, names_v))
}
x_dmy <- x |>
mutate(across(.cols = c(!!coll_date_q, !!det_date_q), lubridate::mdy, .names = "{.col}_dmy")) |>
mutate(across(ends_with('_dmy'), ~ lubridate::month(.), .names = "{.col}_mo"),
across(ends_with('_dmy'), ~ lubridate::day(.), .names = "{.col}_day"),
across(ends_with('_dmy'), ~ lubridate::year(.), .names = "{.col}_yr")) |>
mutate(across(.cols = c(!!coll_date_q, !!det_date_q), date2text, .names = '{.col}_text')) |>
rename_with( ~ stringr::str_remove(., '_dmy'), matches("_dmy_.*$")) |>
dplyr::relocate(any_of(column_names), .before = geometry)
return(x_dmy)
}
first50dates <- data.frame(collection_date = paste0(sample(3:9, size = 50, replace = T), '-',
sample(1:29, size = 50, replace  = T), '-',
rep(2023, times = 50 )))
date_parser(first50dates, coll_date = '' )
#' @param det_date date of determination, same format and processes as above.
#' @returns original data frame plus: x_dmy, x_day, x_month, x_year, x_text, det_date_text, columns for both parameters which are supplied as inputs
#' @example
#'first50dates <- data.frame(collection_date = paste0(sample(3:9, size = 50, replace = T), '-',
#'    sample(1:29, size = 50, replace  = T), '-',
#'    rep(2023, times = 50 )))
#' head(first50dates)
#' first50dates <- date2text(first50dates)
#' head(first50dates)
#' @export
date_parser <- function(x, coll_date, det_date){
coll_date_q <- rlang::enquo(coll_date)
det_date_q <- rlang::enquo(det_date)
names_v <- c('_dmy', '_day', '_mo',  '_yr', '_text')
if(missing(det_date)){
column_names <- c(coll_date, paste0(coll_date, names_v))
} else {
column_names <- c(coll_date,
paste0(coll_date, names_v),
det_date,
paste0(det_date, names_v))
}
x_dmy <- x |>
dplyr::mutate(across(.cols = c(!!coll_date_q, !!det_date_q), lubridate::mdy, .names = "{.col}_dmy")) |>
dplyr::mutate(across(ends_with('_dmy'), ~ lubridate::month(.), .names = "{.col}_mo"),
across(ends_with('_dmy'), ~ lubridate::day(.), .names = "{.col}_day"),
across(ends_with('_dmy'), ~ lubridate::year(.), .names = "{.col}_yr")) |>
dplyr::mutate(across(.cols = c(!!coll_date_q, !!det_date_q), date2text, .names = '{.col}_text')) |>
dplyr::rename_with( ~ stringr::str_remove(., '_dmy'), matches("_dmy_.*$")) |>
dplyr::relocate(any_of(column_names), .before = geometry)
return(x_dmy)
}
first50dates <- data.frame(collection_date = paste0(sample(3:9, size = 50, replace = T), '-',
sample(1:29, size = 50, replace  = T), '-',
rep(2023, times = 50 )))
date_parser(first50dates, coll_date = '' )
date_parser(first50dates, coll_date = 'collection_date' )
#' @param det_date date of determination, same format and processes as above.
#' @returns original data frame plus: x_dmy, x_day, x_month, x_year, x_text, det_date_text, columns for both parameters which are supplied as inputs
#' @example
#'first50dates <- data.frame(collection_date = paste0(sample(3:9, size = 50, replace = T), '-',
#'    sample(1:29, size = 50, replace  = T), '-',
#'    rep(2023, times = 50 )))
#' head(first50dates)
#' first50dates <- date2text(first50dates)
#' head(first50dates)
#' @export
date_parser <- function(x, coll_date, det_date){
coll_date_q <- rlang::enquo(coll_date)
det_date_q <- rlang::enquo(det_date)
names_v <- c('_dmy', '_day', '_mo',  '_yr', '_text')
if(missing(det_date)){
column_names <- c(coll_date, paste0(coll_date, names_v))
} else {
column_names <- c(coll_date,
paste0(coll_date, names_v),
det_date,
paste0(det_date, names_v))
}
x_dmy <- x |>
dplyr::mutate(across(.cols = c(!!coll_date_q, !!det_date_q), lubridate::mdy, .names = "{.col}_dmy")) |>
dplyr::mutate(across(ends_with('_dmy'), ~ lubridate::month(.), .names = "{.col}_mo"),
across(ends_with('_dmy'), ~ lubridate::day(.), .names = "{.col}_day"),
across(ends_with('_dmy'), ~ lubridate::year(.), .names = "{.col}_yr")) |>
dplyr::mutate(across(.cols = c(!!coll_date_q, !!det_date_q), date2text, .names = '{.col}_text')) |>
dplyr::rename_with( ~ stringr::str_remove(., '_dmy'), matches("_dmy_.*$")) |>
dplyr::relocate(any_of(column_names), .before = last_col())
return(x_dmy)
}
first50dates <- data.frame(collection_date = paste0(sample(3:9, size = 50, replace = T), '-',
sample(1:29, size = 50, replace  = T), '-',
rep(2023, times = 50 )))
date_parser(first50dates, coll_date = 'collection_date')
dates <- date_parser(first50dates, coll_date = 'collection_date')
head(dates)
roxygen2::roxygenise()
warnings()
roxygen2::roxygenise()
warnings()
vignette("rd")
vignette("rd-other")
118 (44.25 * 2)
118 + (44.25 * 2)
4000* 0.3
4100 * 0.3
roxygen2::roxygenise()
warnings()
usethis::use_vignette("setting_up_files")
usethis::use_vignette("running_pipeline")
library(BarnebyLives)
install.packages('WorldFlora')
install.packages("WorldFlora")
library(BarnebyLives)
WFO.remember()
library(WorldFlora)
