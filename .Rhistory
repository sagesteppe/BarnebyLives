mutate(across(everything(), ~ as.character(.))) |>
mutate(across(everything(), ~ replace_na(., '')))  |>
mutate(
Coordinate_Uncertainty_In_Meters = '5',
Coordinate_Source = 'GPS',
Label_Footer = 'Collected under the auspices of the Bureau of Land Management'
)
#' dat4import <- format_database_import(collection_examples, format = 'JEPS')
#'
# we also know a bit about our material and can populate it here by hand #
#' dat4import |>
#'   dplyr::mutate(
#'    Label_Footer = 'Collected under the auspices of the Bureau of Land Management',
#'    Coordinate_Uncertainty_In_Meters = 5,
#'     Coordinate_Source = 'iPad')
#'
#' @export
format_database_import <- function(x, format){
dbt <- database_templates[database_templates$Database == format,]
col2select <- dbt$BarnebyLives[!is.na(dbt$BarnebyLives)]
names4cols <- dbt$OutputField[!is.na(dbt$BarnebyLives)]
return(cols2select)
# create any necessary columns by engineering the input data.
if(any(col2select=='Vegetation_Associates')){
x <- tidyr::unite(x, col = Vegetation_Associates,
Vegetation, Associates, na.rm=TRUE, sep = ", ")}
if(any(col2select=='Coordinate_Uncertainty')){
x <- dplyr::mutate(x, Coordinate_Uncertainty = 'Not Recorded')}
if(any(col2select=='Elevation_Units')){
x <- dplyr::mutate(x, Elevation_Units = 'm')}
if(any(col2select=='Date_digital_vd')){
x <- dplyr::mutate(x, Date_digital_vd = Date_digital)}
if(any(col2select=='elevation_m_cp')){
x <- dplyr::mutate(x, elevation_m_cp = elevation_m)}
if(any(col2select=='Locality')){
x <- tidyr::unite(x, col = 'Country-Site', Country, Site, na.rm=TRUE, sep = ", ")}
# select the relevant columns & rename them
x_sub <- dplyr::select(x, dplyr::all_of(col2select)) |>
purrr::set_names(names4cols)
# pad output data with empty columns
empty_cols <- dbt$OutputField[is.na(dbt$BarnebyLives)]
empty_cols <- setNames(
data.frame(
matrix(nrow = nrow(x), ncol = length(empty_cols))),
empty_cols)
out <- dplyr::bind_cols(x_sub, empty_cols) |>
dplyr::select(dplyr::all_of(dbt$OutputField))
return(out)
}
format_database_import(rr, 'JEPS') #|>
rr <- read_sheet('1iOQBNeGqRJ3yhA-Sujas3xZ2Aw5rFkktUKv3N_e4o8M',
sheet = 'Processed California - 2024') |>
filter(Primary_Collector == 'Rosalind Rowe') |>
mutate(across(.cols = Associates:Vegetation, ~ na_if(.x, 'NA'))) |>
select(-Site, Site = Site_name)
rr <- read_sheet('1iOQBNeGqRJ3yhA-Sujas3xZ2Aw5rFkktUKv3N_e4o8M',
sheet = 'Processed California - 2024') |>
filter(Primary_Collector == 'Rosalind Rowe') |>
mutate(across(.cols = Associates:Vegetation, ~ na_if(.x, 'NA'))) |>
select(-Site, Site = Site_name)
format_database_import(rr, 'JEPS') #|>
database_templates
#' dat4import <- format_database_import(collection_examples, format = 'JEPS')
#'
# we also know a bit about our material and can populate it here by hand #
#' dat4import |>
#'   dplyr::mutate(
#'    Label_Footer = 'Collected under the auspices of the Bureau of Land Management',
#'    Coordinate_Uncertainty_In_Meters = 5,
#'     Coordinate_Source = 'iPad')
#'
#' @export
format_database_import <- function(x, format){
dbt <- database_templates[database_templates$Database == format,]
col2select <- dbt$BarnebyLives[!is.na(dbt$BarnebyLives)]
names4cols <- dbt$OutputField[!is.na(dbt$BarnebyLives)]
return(dbt)
# create any necessary columns by engineering the input data.
if(any(col2select=='Vegetation_Associates')){
x <- tidyr::unite(x, col = Vegetation_Associates,
Vegetation, Associates, na.rm=TRUE, sep = ", ")}
if(any(col2select=='Coordinate_Uncertainty')){
x <- dplyr::mutate(x, Coordinate_Uncertainty = 'Not Recorded')}
if(any(col2select=='Elevation_Units')){
x <- dplyr::mutate(x, Elevation_Units = 'm')}
if(any(col2select=='Date_digital_vd')){
x <- dplyr::mutate(x, Date_digital_vd = Date_digital)}
if(any(col2select=='elevation_m_cp')){
x <- dplyr::mutate(x, elevation_m_cp = elevation_m)}
if(any(col2select=='Locality')){
x <- tidyr::unite(x, col = 'Country-Site', Country, Site, na.rm=TRUE, sep = ", ")}
# select the relevant columns & rename them
x_sub <- dplyr::select(x, dplyr::all_of(col2select)) |>
purrr::set_names(names4cols)
# pad output data with empty columns
empty_cols <- dbt$OutputField[is.na(dbt$BarnebyLives)]
empty_cols <- setNames(
data.frame(
matrix(nrow = nrow(x), ncol = length(empty_cols))),
empty_cols)
out <- dplyr::bind_cols(x_sub, empty_cols) |>
dplyr::select(dplyr::all_of(dbt$OutputField))
return(out)
}
# devtools::install_github('sagesteppe/BarnebyLives')
library(tidyverse)
library(BarnebyLives)
library(googlesheets4)
library(textclean)
rr <- read_sheet('1iOQBNeGqRJ3yhA-Sujas3xZ2Aw5rFkktUKv3N_e4o8M',
sheet = 'Processed California - 2024') |>
filter(Primary_Collector == 'Rosalind Rowe') |>
mutate(across(.cols = Associates:Vegetation, ~ na_if(.x, 'NA'))) |>
select(-Site, Site = Site_name)
format_database_import(rr, 'JEPS') #|>
#' dat4import <- format_database_import(collection_examples, format = 'JEPS')
#'
# we also know a bit about our material and can populate it here by hand #
#' dat4import |>
#'   dplyr::mutate(
#'    Label_Footer = 'Collected under the auspices of the Bureau of Land Management',
#'    Coordinate_Uncertainty_In_Meters = 5,
#'     Coordinate_Source = 'iPad')
#'
#' @export
format_database_import <- function(x, format){
dbt <- database_templates[database_templates$Database == format,]
col2select <- dbt$BarnebyLives[!is.na(dbt$BarnebyLives)]
names4cols <- dbt$OutputField[!is.na(dbt$BarnebyLives)]
return(dbt)
# create any necessary columns by engineering the input data.
if(any(col2select=='Vegetation_Associates')){
x <- tidyr::unite(x, col = Vegetation_Associates,
Vegetation, Associates, na.rm=TRUE, sep = ", ")}
if(any(col2select=='Coordinate_Uncertainty')){
x <- dplyr::mutate(x, Coordinate_Uncertainty = 'Not Recorded')}
if(any(col2select=='Elevation_Units')){
x <- dplyr::mutate(x, Elevation_Units = 'm')}
if(any(col2select=='Date_digital_vd')){
x <- dplyr::mutate(x, Date_digital_vd = Date_digital)}
if(any(col2select=='elevation_m_cp')){
x <- dplyr::mutate(x, elevation_m_cp = elevation_m)}
if(any(col2select=='Locality')){
x <- tidyr::unite(x, col = 'Country-Site', Country, Site, na.rm=TRUE, sep = ", ")}
# select the relevant columns & rename them
x_sub <- dplyr::select(x, dplyr::all_of(col2select)) |>
purrr::set_names(names4cols)
# pad output data with empty columns
empty_cols <- dbt$OutputField[is.na(dbt$BarnebyLives)]
empty_cols <- setNames(
data.frame(
matrix(nrow = nrow(x), ncol = length(empty_cols))),
empty_cols)
out <- dplyr::bind_cols(x_sub, empty_cols) |>
dplyr::select(dplyr::all_of(dbt$OutputField))
return(out)
}
format_database_import(rr, 'JEPS') #|>
#' dat4import <- format_database_import(collection_examples, format = 'JEPS')
#'
# we also know a bit about our material and can populate it here by hand #
#' dat4import |>
#'   dplyr::mutate(
#'    Label_Footer = 'Collected under the auspices of the Bureau of Land Management',
#'    Coordinate_Uncertainty_In_Meters = 5,
#'     Coordinate_Source = 'iPad')
#'
#' @export
format_database_import <- function(x, format){
dbt <- database_templates[database_templates$Database == format,]
col2select <- dbt$BarnebyLives[!is.na(dbt$BarnebyLives)]
names4cols <- dbt$OutputField[!is.na(dbt$BarnebyLives)]
return(col2select)
# create any necessary columns by engineering the input data.
if(any(col2select=='Vegetation_Associates')){
x <- tidyr::unite(x, col = Vegetation_Associates,
Vegetation, Associates, na.rm=TRUE, sep = ", ")}
if(any(col2select=='Coordinate_Uncertainty')){
x <- dplyr::mutate(x, Coordinate_Uncertainty = 'Not Recorded')}
if(any(col2select=='Elevation_Units')){
x <- dplyr::mutate(x, Elevation_Units = 'm')}
if(any(col2select=='Date_digital_vd')){
x <- dplyr::mutate(x, Date_digital_vd = Date_digital)}
if(any(col2select=='elevation_m_cp')){
x <- dplyr::mutate(x, elevation_m_cp = elevation_m)}
if(any(col2select=='Locality')){
x <- tidyr::unite(x, col = 'Country-Site', Country, Site, na.rm=TRUE, sep = ", ")}
# select the relevant columns & rename them
x_sub <- dplyr::select(x, dplyr::all_of(col2select)) |>
purrr::set_names(names4cols)
# pad output data with empty columns
empty_cols <- dbt$OutputField[is.na(dbt$BarnebyLives)]
empty_cols <- setNames(
data.frame(
matrix(nrow = nrow(x), ncol = length(empty_cols))),
empty_cols)
out <- dplyr::bind_cols(x_sub, empty_cols) |>
dplyr::select(dplyr::all_of(dbt$OutputField))
return(out)
}
format_database_import(rr, 'JEPS') #|>
database_templates
#' dat4import <- format_database_import(collection_examples, format = 'JEPS')
#'
# we also know a bit about our material and can populate it here by hand #
#' dat4import |>
#'   dplyr::mutate(
#'    Label_Footer = 'Collected under the auspices of the Bureau of Land Management',
#'    Coordinate_Uncertainty_In_Meters = 5,
#'     Coordinate_Source = 'iPad')
#'
#' @export
format_database_import <- function(x, format){
dbt <- database_templates[database_templates$Database == format,]
col2select <- dbt$BarnebyLives[!is.na(dbt$BarnebyLives)]
names4cols <- dbt$OutputField[!is.na(dbt$BarnebyLives)]
# create any necessary columns by engineering the input data.
if(any(col2select=='Vegetation_Associates')){
x <- tidyr::unite(x, col = Vegetation_Associates,
Vegetation, Associates, na.rm=TRUE, sep = ", ")}
if(any(col2select=='Coordinate_Uncertainty')){
x <- dplyr::mutate(x, Coordinate_Uncertainty = 'Not Recorded')}
if(any(col2select=='Elevation_Units')){
x <- dplyr::mutate(x, Elevation_Units = 'm')}
if(any(col2select=='Date_digital_vd')){
x <- dplyr::mutate(x, Date_digital_vd = Date_digital)}
if(any(col2select=='elevation_m_cp')){
x <- dplyr::mutate(x, elevation_m_cp = elevation_m)}
if(any(col2select=='Locality')){
x <- tidyr::unite(x, col = 'Country-Site', Country, Site, na.rm=TRUE, sep = ", ")}
# select the relevant columns & rename them
x_sub <- dplyr::select(x, dplyr::all_of(col2select)) |>
purrr::set_names(names4cols)
# pad output data with empty columns
empty_cols <- dbt$OutputField[is.na(dbt$BarnebyLives)]
empty_cols <- setNames(
data.frame(
matrix(nrow = nrow(x), ncol = length(empty_cols))),
empty_cols)
out <- dplyr::bind_cols(x_sub, empty_cols) |>
dplyr::select(dplyr::all_of(dbt$OutputField))
return(out)
}
format_database_import(rr, 'JEPS') #|>
#' dat4import <- format_database_import(collection_examples, format = 'JEPS')
#'
# we also know a bit about our material and can populate it here by hand #
#' dat4import |>
#'   dplyr::mutate(
#'    Label_Footer = 'Collected under the auspices of the Bureau of Land Management',
#'    Coordinate_Uncertainty_In_Meters = 5,
#'     Coordinate_Source = 'iPad')
#'
#' @export
format_database_import <- function(x, format){
dbt <- database_templates[database_templates$Database == format,]
col2select <- dbt$BarnebyLives[!is.na(dbt$BarnebyLives)]
names4cols <- dbt$OutputField[!is.na(dbt$BarnebyLives)]
# create any necessary columns by engineering the input data.
if(any(col2select=='Vegetation_Associates')){
x <- tidyr::unite(x, col = Vegetation_Associates,
Vegetation, Associates, na.rm=TRUE, sep = ", ")}
if(any(col2select=='Coordinate_Uncertainty')){
x <- dplyr::mutate(x, Coordinate_Uncertainty = 'Not Recorded')}
if(any(col2select=='Elevation_Units')){
x <- dplyr::mutate(x, Elevation_Units = 'm')}
if(any(col2select=='Date_digital_vd')){
x <- dplyr::mutate(x, Date_digital_vd = Date_digital)}
if(any(col2select=='elevation_m_cp')){
x <- dplyr::mutate(x, elevation_m_cp = elevation_m)}
if(any(col2select=='Locality')){
x <- tidyr::unite(x, col = 'Country-Site', Country, Site, na.rm=TRUE, sep = ", ")}
return(x)
# select the relevant columns & rename them
x_sub <- dplyr::select(x, dplyr::all_of(col2select)) |>
purrr::set_names(names4cols)
# pad output data with empty columns
empty_cols <- dbt$OutputField[is.na(dbt$BarnebyLives)]
empty_cols <- setNames(
data.frame(
matrix(nrow = nrow(x), ncol = length(empty_cols))),
empty_cols)
out <- dplyr::bind_cols(x_sub, empty_cols) |>
dplyr::select(dplyr::all_of(dbt$OutputField))
return(out)
}
format_database_import(rr, 'JEPS') #|>
#' dat4import <- format_database_import(collection_examples, format = 'JEPS')
#'
# we also know a bit about our material and can populate it here by hand #
#' dat4import |>
#'   dplyr::mutate(
#'    Label_Footer = 'Collected under the auspices of the Bureau of Land Management',
#'    Coordinate_Uncertainty_In_Meters = 5,
#'     Coordinate_Source = 'iPad')
#'
#' @export
format_database_import <- function(x, format){
dbt <- database_templates[database_templates$Database == format,]
col2select <- dbt$BarnebyLives[!is.na(dbt$BarnebyLives)]
names4cols <- dbt$OutputField[!is.na(dbt$BarnebyLives)]
# create any necessary columns by engineering the input data.
if(any(col2select=='Vegetation_Associates')){
x <- tidyr::unite(x, col = Vegetation_Associates,
Vegetation, Associates, na.rm=TRUE, sep = ", ")}
if(any(col2select=='Coordinate_Uncertainty')){
x <- dplyr::mutate(x, Coordinate_Uncertainty = 'Not Recorded')}
if(any(col2select=='Elevation_Units')){
x <- dplyr::mutate(x, Elevation_Units = 'm')}
if(any(col2select=='Date_digital_vd')){
x <- dplyr::mutate(x, Date_digital_vd = Date_digital)}
if(any(col2select=='elevation_m_cp')){
x <- dplyr::mutate(x, elevation_m_cp = elevation_m)}
if(any(names4cols=='Locality')){
x <- tidyr::unite(x, col = 'Country-Site', Country, Site, na.rm=TRUE, sep = ", ")}
return(x)
# select the relevant columns & rename them
x_sub <- dplyr::select(x, dplyr::all_of(col2select)) |>
purrr::set_names(names4cols)
# pad output data with empty columns
empty_cols <- dbt$OutputField[is.na(dbt$BarnebyLives)]
empty_cols <- setNames(
data.frame(
matrix(nrow = nrow(x), ncol = length(empty_cols))),
empty_cols)
out <- dplyr::bind_cols(x_sub, empty_cols) |>
dplyr::select(dplyr::all_of(dbt$OutputField))
return(out)
}
format_database_import(rr, 'JEPS') #|>
format_database_import(rr, 'JEPS') |>
mutate(across(everything(), ~ as.character(.))) |>
mutate(across(everything(), ~ replace_na(., '')))  |>
mutate(
Coordinate_Uncertainty_In_Meters = '5',
Coordinate_Source = 'GPS',
Label_Footer = 'Collected under the auspices of the Bureau of Land Management'
)
write.csv(rr, '../results/RosalindRowe_SOS2024_Jepson.csv', row.names = F)
View(rr)
rr <- format_database_import(rr, 'JEPS') |>
mutate(across(everything(), ~ as.character(.))) |>
mutate(across(everything(), ~ replace_na(., '')))  |>
mutate(
Coordinate_Uncertainty_In_Meters = '5',
Coordinate_Source = 'GPS',
Label_Footer = 'Collected under the auspices of the Bureau of Land Management'
)
write.csv(rr, '../results/RosalindRowe_SOS2024_Jepson.csv', row.names = F)
View(rr)
rr <- read_sheet('1iOQBNeGqRJ3yhA-Sujas3xZ2Aw5rFkktUKv3N_e4o8M',
sheet = 'Processed California - 2024') |>
filter(Primary_Collector == 'Rosalind Rowe') |>
mutate(across(.cols = Associates:Vegetation, ~ na_if(.x, 'NA'))) |>
select(-Site, Site = Site_name)
rr <- read_sheet('1iOQBNeGqRJ3yhA-Sujas3xZ2Aw5rFkktUKv3N_e4o8M',
sheet = 'Processed California - 2024') |>
filter(Primary_Collector == 'Rosalind Rowe') |>
mutate(across(.cols = Associates:Vegetation, ~ na_if(.x, 'NA'))) |>
select(-Site, Site = Site_name)
rr <- format_database_import(rr, 'JEPS') |>
mutate(across(everything(), ~ as.character(.))) |>
mutate(across(everything(), ~ replace_na(., '')))  |>
mutate(
Coordinate_Uncertainty_In_Meters = '5',
Coordinate_Source = 'GPS',
Label_Footer = 'Collected under the auspices of the Bureau of Land Management'
)
rr <- format_database_import(rr, 'JEPS') #|>
#' dat4import <- format_database_import(collection_examples, format = 'JEPS')
#'
# we also know a bit about our material and can populate it here by hand #
#' dat4import |>
#'   dplyr::mutate(
#'    Label_Footer = 'Collected under the auspices of the Bureau of Land Management',
#'    Coordinate_Uncertainty_In_Meters = 5,
#'     Coordinate_Source = 'iPad')
#'
#' @export
format_database_import <- function(x, format){
dbt <- database_templates[database_templates$Database == format,]
col2select <- dbt$BarnebyLives[!is.na(dbt$BarnebyLives)]
names4cols <- dbt$OutputField[!is.na(dbt$BarnebyLives)]
# create any necessary columns by engineering the input data.
if(any(col2select=='Vegetation_Associates')){
x <- tidyr::unite(x, col = Vegetation_Associates,
Vegetation, Associates, na.rm=TRUE, sep = ", ")}
if(any(col2select=='Coordinate_Uncertainty')){
x <- dplyr::mutate(x, Coordinate_Uncertainty = 'Not Recorded')}
if(any(col2select=='Elevation_Units')){
x <- dplyr::mutate(x, Elevation_Units = 'm')}
if(any(col2select=='Date_digital_vd')){
x <- dplyr::mutate(x, Date_digital_vd = Date_digital)}
if(any(col2select=='elevation_m_cp')){
x <- dplyr::mutate(x, elevation_m_cp = elevation_m)}
if(any(names4cols=='Locality')){
x <- tidyr::unite(x, col = 'Country-Site', Country, Site, na.rm=TRUE, sep = ", ")}
# select the relevant columns & rename them
x_sub <- dplyr::select(x, dplyr::all_of(col2select)) |>
purrr::set_names(names4cols)
# pad output data with empty columns
empty_cols <- dbt$OutputField[is.na(dbt$BarnebyLives)]
empty_cols <- setNames(
data.frame(
matrix(nrow = nrow(x), ncol = length(empty_cols))),
empty_cols)
out <- dplyr::bind_cols(x_sub, empty_cols) |>
dplyr::select(dplyr::all_of(dbt$OutputField))
return(out)
}
rr <- format_database_import(rr, 'JEPS') |>
mutate(across(everything(), ~ as.character(.))) |>
mutate(across(everything(), ~ replace_na(., '')))  |>
mutate(
Coordinate_Uncertainty_In_Meters = '5',
Coordinate_Source = 'GPS',
Label_Footer = 'Collected under the auspices of the Bureau of Land Management'
)
rr <- read_sheet('1iOQBNeGqRJ3yhA-Sujas3xZ2Aw5rFkktUKv3N_e4o8M',
sheet = 'Processed California - 2024') |>
filter(Primary_Collector == 'Rosalind Rowe') |>
mutate(across(.cols = Associates:Vegetation, ~ na_if(.x, 'NA'))) |>
select(-Site, Site = Site_name)
rr <- format_database_import(rr, 'JEPS') |>
mutate(across(everything(), ~ as.character(.))) |>
mutate(across(everything(), ~ replace_na(., '')))  |>
mutate(
Coordinate_Uncertainty_In_Meters = '5',
Coordinate_Source = 'GPS',
Label_Footer = 'Collected under the auspices of the Bureau of Land Management'
)
database_templates[database_templates$Database == 'JEPS',]
database_templates <- read.csv('data-raw/Fields.csv')
usethis::use_data(database_templates)
usethis::use_data(database_templates, overwrite = T)
usethis::use_roxygen_md()
devtools::build()
devtools::build()
herbarium_info <- read.csv('../data-raw/HerbariumContacts.csv')
getwd()
herbarium_info <- read.csv('data-raw/HerbariumContacts.csv')
usethis::use_data(herbarium_info)
library(tidyverse)
library(sf)
modelled <- list.files('../data/processed/timestamps/')
t <- read.csv('../data/SOS/Scouting.csv') %>%
select(taxa, scoutDate, percentDormant:percentPost, LATITUDE_DECIMAL, LONGITUDE_DECIMAL) |>
st_as_sf(coords = c(x = 'LONGITUDE_DECIMAL', y = 'LATITUDE_DECIMAL'), crs = 4326) |>
st_transform(5070) |>
mutate(taxa = str_replace_all(taxa, ' ', '_')) |>
mutate(
taxa = case_when(
taxa == 'Machaeranthera_canescens' ~ 'Dieteria_canescens',
taxa != 'Machaeranthera_canescens' ~ taxa
),
scoutDate = lubridate::yday( as.Date(scoutDate, tryFormats = c('%m/%d/%Y'))),
sDate_join = as.numeric(scoutDate), .before = geometry) |>
filter(taxa %in% modelled) %>%
# we will remove Phacelia crenulata and Eriogonum fusiforme which did not flower this year #
filter(!taxa %in% c('Phacelia_crenulata', 'Eriogonum_fusiforme', 'Eriogonum_shockleyi'))
modelled <- list.files('../data/processed/timestamps/')
t <- read.csv('../data/SOS/Scouting.csv') %>%
select(taxa, scoutDate, percentDormant:percentPost, LATITUDE_DECIMAL, LONGITUDE_DECIMAL) |>
st_as_sf(coords = c(x = 'LONGITUDE_DECIMAL', y = 'LATITUDE_DECIMAL'), crs = 4326) |>
st_transform(5070) |>
mutate(taxa = str_replace_all(taxa, ' ', '_')) |>
mutate(
taxa = case_when(
taxa == 'Machaeranthera_canescens' ~ 'Dieteria_canescens',
taxa != 'Machaeranthera_canescens' ~ taxa
),
scoutDate = lubridate::yday( as.Date(scoutDate, tryFormats = c('%m/%d/%Y'))),
sDate_join = as.numeric(scoutDate), .before = geometry) |>
filter(taxa %in% modelled) %>%
# we will remove Phacelia crenulata and Eriogonum fusiforme which did not flower this year #
filter(!taxa %in% c('Phacelia_crenulata', 'Eriogonum_fusiforme', 'Eriogonum_shockleyi'))
t <- read.csv('../data/SOS/Scouting.csv') #%>%
getwd()
usethis::use_pkgdown()
use_pkgdown_github_pages()
usethis::use_pkgdown_github_pages()
gitcreds::gh_token_help()
gitcreds::gh_token_help()
pkgdown::gh_token_help()
usethis::gh_token_help()
usethis::create_github_token()
gitcreds::gitcreds_set()
usethis::use_pkgdown_github_pages()
names_vec <- taxize::names_list(rank = 'species', size = 10)
install.packages('taxize')
remotes::install_github('ropensci/taxize')
install_github("ropensci/bold")
remotes::install_github("ropensci/bold")
remotes::install_github('ropensci/taxize')
names_vec <- taxize::names_list(rank = 'species', size = 10)
names_vec
pow_results <- lapply(names_vec, powo_searcher) |>
dplyr::bind_rows()
pow_results <- lapply(names_vec, BarnebyLives::powo_searcher) |>
dplyr::bind_rows()
pow_results[,1:5]
names_vec
pow_results
getwd()
saveRDS(names_vec, './data')
?saveRDS
saveRDS(names_vec, 'data')
saveRDS(names_vec, './data')
saveRDS(names_vec, './data/')
saveRDS(names_vec)
names_vec
usethis::use_data(names_vec)
