devtools::install_github('sagesteppe/BarnebyLives')
# devtools::install_github('sagesteppe/BarnebyLives')
library(BarnebyLives)
p <- '~/Documents/HerbariumLabels/raw'
p2libs <- .libPaths()[
grepl(paste0(version$major, '.', sub('\\..*', "", version$minor)),
.libPaths())]
folds <- c('BarnebyLives/rmarkdown/templates/labels/skeleton/skeleton.Rmd')
purrr::walk(
.x = collection_examples$Collection_number,
~ rmarkdown::render(
input = file.path( p2libs, folds),
output_file = file.path(p, glue::glue("{.x}.pdf")),
params = list(Collection_number = {.x})
)
)
devtools::install_github('sagesteppe/BarnebyLives')
devtools::install_github('sagesteppe/BarnebyLives')
# devtools::install_github('sagesteppe/BarnebyLives')
library(BarnebyLives)
data('collection_examples')
# devtools::install_github('sagesteppe/BarnebyLives')
library(BarnebyLives)
data('collection_examples')
p <- '~/Documents/HerbariumLabels/raw'
p2libs <- .libPaths()[
grepl(paste0(version$major, '.', sub('\\..*', "", version$minor)),
.libPaths())]
folds <- c('BarnebyLives/rmarkdown/templates/labels/skeleton/skeleton.Rmd')
View(collection_examples)
purrr::walk(
.x = collection_examples$Collection_number,
~ rmarkdown::render(
input = file.path( p2libs, folds),
output_file = file.path(p, glue::glue("{.x}.pdf")),
params = list(Collection_number = {.x})
)
)
devtools::install_github('sagesteppe/BarnebyLives')
# devtools::install_github('sagesteppe/BarnebyLives')
library(BarnebyLives)
data('collection_examples')
p <- '~/Documents/HerbariumLabels/raw'
p2libs <- .libPaths()[
grepl(paste0(version$major, '.', sub('\\..*', "", version$minor)),
.libPaths())]
folds <- c('BarnebyLives/rmarkdown/templates/labels/skeleton/skeleton.Rmd')
purrr::walk(
.x = collection_examples$Collection_number,
~ rmarkdown::render(
input = file.path( p2libs, folds),
output_file = file.path(p, glue::glue("{.x}.pdf")),
params = list(Collection_number = {.x})
)
)
devtools::install_github('sagesteppe/BarnebyLives')
devtools::install_github('sagesteppe/BarnebyLives')
library(BarnebyLives)
data('collection_examples')
p <- '~/Documents/HerbariumLabels/raw'
p2libs <- .libPaths()[
grepl(paste0(version$major, '.', sub('\\..*', "", version$minor)),
.libPaths())]
folds <- c('BarnebyLives/rmarkdown/templates/labels/skeleton/skeleton.Rmd')
purrr::walk(
.x = collection_examples$Collection_number,
~ rmarkdown::render(
input = file.path( p2libs, folds),
output_file = file.path(p, glue::glue("{.x}.pdf")),
params = list(Collection_number = {.x})
)
)
View(collection_examples)
devtools::install_github('sagesteppe/BarnebyLives')
library(BarnebyLives)
data('collection_examples')
p <- '~/Documents/HerbariumLabels/raw'
p2libs <- .libPaths()[
grepl(paste0(version$major, '.', sub('\\..*', "", version$minor)),
.libPaths())]
folds <- c('BarnebyLives/rmarkdown/templates/labels/skeleton/skeleton.Rmd')
purrr::walk(
.x = collection_examples$Collection_number,
~ rmarkdown::render(
input = file.path( p2libs, folds),
output_file = file.path(p, glue::glue("{.x}.pdf")),
params = list(Collection_number = {.x})
)
)
#' ensure proper italicization of a associated species
#'
#' This function works at the time of label creation to ensure that abbreviations
#' such as 'species' 'variety' and such are not italicizded, per convention.
#' @param x a value being feed into the label during the merge
#' @examples
#' associates <- c('Eriogonum ovalifolium var. purpureum, Castilleja sp., Crepis spp.')
#' spp_normal(associates)
#' @export
species_font <- function(x){
x <- paste0('*', x, '*')
x <- gsub('  ', ' ', x)
x <- paste0(x, '.')
if(any(grep(' sp..| s.p[.]| var. | subsp. ', x)) == TRUE){
x <- gsub(' sp[.], ', '* sp., *', x)
x <- gsub(' sp[.]\\*$', '* sp.', x)
x <- gsub(' spp[.]\\*$', '* spp.', x)
x <- gsub(' spp[.], ', '* spp., *', x)
# infraspecies will always have a space before and after - WORKING
x <- gsub(' ssp[.] ', '* ssp. *', x)
x <- gsub(' ssp[.]\\*$', '* ssp.', x)
x <- gsub(' var[.] ', '* var. *', x)
x <- gsub(' subsp[.] ', '* spp. *', x)
x <- gsub("..", ".", x, fixed = TRUE)
return(x)
}
x <- gsub("..", ".", x, fixed = TRUE)
return(x)
}
associates <- c('Eriogonum ovalifolium var. purpureum, Castilleja sp., Crepis spp.')
species_font(associates)
#' ensure proper italicization of a associated species
#'
#' This function works at the time of label creation to ensure that abbreviations
#' such as 'species' 'variety' and such are not italicizded, per convention.
#' @param x a value being feed into the label during the merge
#' @examples
#' associates <- c('Eriogonum ovalifolium var. purpureum, Castilleja sp., Crepis spp.')
#' spp_normal(associates)
#' @export
species_font <- function(x){
x <- paste0('*', x, '*')
if(any(grep(' sp..| s.p[.]| var. | subsp. ', x)) == TRUE){
x <- gsub(' sp[.], ', '* sp., *', x)
x <- gsub(' sp[.]\\*$', '* sp.', x)
x <- gsub(' spp[.]\\*$', '* spp.', x)
x <- gsub(' spp[.], ', '* spp., *', x)
# infraspecies will always have a space before and after - WORKING
x <- gsub(' ssp[.] ', '* ssp. *', x)
x <- gsub(' ssp[.]\\*$', '* ssp.', x)
x <- gsub(' var[.] ', '* var. *', x)
x <- gsub(' subsp[.] ', '* spp. *', x)
return(x)
}
x <- gsub('  ', ' ', x)
x <- paste0(x, '.')
x <- gsub("..", ".", x, fixed = TRUE)
return(x)
}
associates <- c('Eriogonum ovalifolium var. purpureum, Castilleja sp., Crepis spp.')
spp_normal(associates)
species_font(associates)
#' ensure proper italicization of a associated species
#'
#' This function works at the time of label creation to ensure that abbreviations
#' such as 'species' 'variety' and such are not italicizded, per convention.
#' @param x a value being feed into the label during the merge
#' @examples
#' associates <- c('Eriogonum ovalifolium var. purpureum, Castilleja sp., Crepis spp.')
#' species_font(associates)
#' @export
species_font <- function(x){
x <- paste0('*', x, '*')
if(any(grep(' sp..| s.p[.]| var. | subsp. ', x)) == TRUE){
x <- gsub(' sp[.], ', '* sp., *', x)
x <- gsub(' sp[.]\\*$', '* sp.', x)
x <- gsub(' spp[.]\\*$', '* spp.', x)
x <- gsub(' spp[.], ', '* spp., *', x)
# infraspecies will always have a space before and after - WORKING
x <- gsub(' ssp[.] ', '* ssp. *', x)
x <- gsub(' ssp[.]\\*$', '* ssp.', x)
x <- gsub(' var[.] ', '* var. *', x)
x <- gsub(' subsp[.] ', '* spp. *', x)
x <- gsub('  ', ' ', x)
x <- paste0(x, '.')
x <- gsub("..", ".", x, fixed = TRUE)
return(x)
}
x <- gsub('  ', ' ', x)
x <- paste0(x, '.')
x <- gsub("..", ".", x, fixed = TRUE)
return(x)
}
associates <- c('Eriogonum ovalifolium var. purpureum, Castilleja sp., Crepis spp.')
species_font(associates)
View(collection_examples)
devtools::install_github('sagesteppe/BarnebyLives')
library(BarnebyLives)
data('collection_examples')
p <- '~/Documents/HerbariumLabels/raw'
p2libs <- .libPaths()[
grepl(paste0(version$major, '.', sub('\\..*', "", version$minor)),
.libPaths())]
folds <- c('BarnebyLives/rmarkdown/templates/labels/skeleton/skeleton.Rmd')
purrr::walk(
.x = collection_examples$Collection_number,
~ rmarkdown::render(
input = file.path( p2libs, folds),
output_file = file.path(p, glue::glue("{.x}.pdf")),
params = list(Collection_number = {.x})
)
)
View(collection_examples)
devtools::install_github('sagesteppe/BarnebyLives')
library(BarnebyLives)
# devtools::install_github('sagesteppe/BarnebyLives')
library(BarnebyLives)
data('collection_examples')
p <- '~/Documents/HerbariumLabels/raw'
p2libs <- .libPaths()[
grepl(paste0(version$major, '.', sub('\\..*', "", version$minor)),
.libPaths())]
folds <- c('BarnebyLives/rmarkdown/templates/labels/skeleton/skeleton.Rmd')
purrr::walk(
.x = collection_examples$Collection_number,
~ rmarkdown::render(
input = file.path( p2libs, folds),
output_file = file.path(p, glue::glue("{.x}.pdf")),
params = list(Collection_number = {.x})
)
)
devtools::install_github('sagesteppe/BarnebyLives')
# devtools::install_github('sagesteppe/BarnebyLives')
library(BarnebyLives)
data('collection_examples')
View(collection_examples)
p <- '~/Documents/HerbariumLabels/raw'
p2libs <- .libPaths()[
grepl(paste0(version$major, '.', sub('\\..*', "", version$minor)),
.libPaths())]
folds <- c('BarnebyLives/rmarkdown/templates/labels/skeleton/skeleton.Rmd')
purrr::walk(
.x = collection_examples$Collection_number,
~ rmarkdown::render(
input = file.path( p2libs, folds),
output_file = file.path(p, glue::glue("{.x}.pdf")),
params = list(Collection_number = {.x})
)
)
View(collection_examples)
#' remove collection from associated species
#'
#' this function removes the collected species from the list of associated
#' species
#' @param x a dataframe containing collection info
#' @example
#' @export
associate_dropper <- function(x){
x$Associates <- gsub(paste0(x$Full_name), "", x$Associates)
x$Associates <- trimws(gsub("\\s+", " ", x$Associates))
x$Associates <- gsub(",$", "", x$Associates))
#' remove collection from associated species
#'
#' this function removes the collected species from the list of associated
#' species
#' @param x a dataframe containing collection info
#' @example
#' @export
associate_dropper <- function(x){
x$Associates <- gsub(paste0(x$Full_name), "", x$Associates)
x$Associates <- trimws(gsub("\\s+", " ", x$Associates))
x$Associates <- gsub(",$", "", x$Associates)
x$Associates <- gsub(", ,", ",", x$Associates)
return(x)
}
View(collection_examples)
#' This functions determines whether to write information on associated plant
#' species. It used as a final step when formatting labels.
#' @param x dataframe holding the values
#' @examples
#' library(BarnebyLives)
#' hilaria <- collection_examples[73,]
#' associates_writer(hilaria)
#' agoseris <- collection_examples[82,]
#' associates_writer(agoseris)
#' @export
associates_writer <- function(x){
x[x==""] <- NA
if (is.na(x)){""} else {
gsub("..", ".", paste0('Ass.: ', species_font(x)), fixed = TRUE)}
x <- gsub('.,.$' '.', x)
#' This functions determines whether to write information on associated plant
#' species. It used as a final step when formatting labels.
#' @param x dataframe holding the values
#' @examples
#' library(BarnebyLives)
#' hilaria <- collection_examples[73,]
#' associates_writer(hilaria)
#' agoseris <- collection_examples[82,]
#' associates_writer(agoseris)
#' @export
associates_writer <- function(x){
x[x==""] <- NA
if (is.na(x)){""} else {
gsub("..", ".", paste0('Ass.: ', species_font(x)), fixed = TRUE)}
x <- gsub('.,.$', '.', x)
return(x)
}
View(collection_examples)
#' remove collection from associated species
#'
#' this function removes the collected species from the list of associated
#' species
#' @param x a dataframe containing collection info
#' @example
#' @export
associate_dropper <- function(x){
x$Associates <- gsub(paste0(x$Full_name), "", x$Associates)
x$Associates <- trimws(gsub("\\s+", " ", x$Associates))
x$Associates <- gsub(",$", "", x$Associates)
x$Associates <- gsub(", ,", ",", x$Associates)
return(x)
}
associate_dropper(collection_examples$Associates)
associate_dropper(collection_examples)
apply(collection_examples, associate_dropper)
apply(collection_examples, FUN = associate_dropper)
apply(collection_examples, FUN = associate_dropper, MARGIN = 2)
apply(collection_examples, FUN = associate_dropper, MARGIN = 1)
#' remove collection from associated species
#'
#' this function removes the collected species from the list of associated
#' species
#' @param x a dataframe containing collection info
#' @example
#' @export
associate_dropper <- function(x){
x$Associates <- gsub(paste0(Full_name), "", Associates)
x$Associates <- trimws(gsub("\\s+", " ", Associates))
x$Associates <- gsub(",$", "", Associates)
x$Associates <- gsub(", ,", ",", Associates)
return(x)
}
#' remove collection from associated species
#'
#' this function removes the collected species from the list of associated
#' species
#' @param x a dataframe containing collection info
#' @example
#' @export
associate_dropper <- function(x){
x |>
mutate(Associates = gsub(paste0(Full_name), "", Associates),
Associates = trimws(gsub("\\s+", " ", Associates)),
Associates = gsub(",$", "", Associates),
Associates <- gsub(", ,", ",", Associates)
)
return(x)
}
associate_dropper(collection_examples)
#' remove collection from associated species
#'
#' this function removes the collected species from the list of associated
#' species
#' @param x a dataframe containing collection info
#' @example
#' @export
associate_dropper <- function(x){
x |>
dplyr::mutate(Associates = gsub(paste0(Full_name), "", Associates),
Associates = trimws(gsub("\\s+", " ", Associates)),
Associates = gsub(",$", "", Associates),
Associates <- gsub(", ,", ",", Associates)
)
return(x)
}
associate_dropper(collection_examples)
#' remove collection from associated species
#'
#' this function removes the collected species from the list of associated
#' species
#' @param x a dataframe containing collection info
#' @example
#' @export
associate_dropper <- function(x){
x |>
dplyr::rowwise() |>
dplyr::mutate(
Associates = gsub(paste0(Full_name), "", Associates),
Associates = trimws(gsub("\\s+", " ", Associates)),
Associates = gsub(",$", "", Associates),
Associates <- gsub(", ,", ",", Associates)
)
return(x)
}
associate_dropper(collection_examples)
out <- associate_dropper(collection_examples)
out <- associate_dropper(collection_examples) |>
dplyr::select(Full_name, Associates)
View(out)
#' remove collection from associated species
#'
#' this function removes the collected species from the list of associated
#' species
#' @param x a dataframe containing collection info
#' @example
#' @export
associate_dropper <- function(x){
x |>
dplyr::rowwise() |>
dplyr::mutate(
Associates = gsub(paste0(Full_name), "", Associates),
Associates = trimws(gsub("\\s+", " ", Associates)),
Associates = gsub(",$", "", Associates),
Associates <- gsub(", ,", ",", Associates)
)
return(x)
}
out <- associate_dropper(collection_examples) |>
dplyr::select(Full_name, Associates)
#' remove collection from associated species
#'
#' this function removes the collected species from the list of associated
#' species
#' @param x a dataframe containing collection info
#' @example
#' @export
associate_dropper <- function(x){
x <- x |>
dplyr::rowwise() |>
dplyr::mutate(
Associates = gsub(paste0(Full_name), "", Associates),
Associates = trimws(gsub("\\s+", " ", Associates)),
Associates = gsub(",$", "", Associates),
Associates <- gsub(", ,", ",", Associates)
)
return(x)
}
out <- associate_dropper(collection_examples) |>
dplyr::select(Full_name, Associates)
#' remove collection from associated species
#'
#' this function removes the collected species from the list of associated
#' species
#' @param x a dataframe containing collection info
#' @example
#' @export
associate_dropper <- function(x){
x <- x |>
dplyr::rowwise() |>
dplyr::mutate(
Associates = gsub(paste0(Full_name), "", Associates),
Associates = trimws(gsub("\\s+", " ", Associates)),
Associates = gsub(",$", "", Associates),
Associates <- gsub(",,", ",", Associates)
)
return(x)
}
out <- associate_dropper(collection_examples) |>
dplyr::select(Full_name, Associates)
#' remove collection from associated species
#'
#' this function removes the collected species from the list of associated
#' species
#' @param x a dataframe containing collection info
#' @example
#' @export
associate_dropper <- function(x){
x <- x |>
dplyr::rowwise() |>
dplyr::mutate(
Associates = gsub(paste0(Full_name), "", Associates),
Associates = trimws(gsub("\\s+", " ", Associates)),
Associates = gsub(",$", "", Associates),
Associates = gsub(", ,", ",", Associates)
)
return(x)
}
out <- associate_dropper(collection_examples) |>
dplyr::select(Full_name, Associates)
#' remove collection from associated species
#'
#' this function removes the collected species from the list of associated
#' species
#' @param x a dataframe containing collection info
#' @example
#' @export
associate_dropper <- function(x){
x <- x |>
dplyr::rowwise() |>
dplyr::mutate(
Associates = gsub(paste0(Full_name), "", Associates),
Associates = trimws(gsub("\\s+", " ", Associates)),
Associates = gsub(",$", "", Associates),
Associates = gsub("^, ", "", Associates),
Associates = gsub(", ,", ",", Associates)
)
return(x)
}
out <- associate_dropper(collection_examples) |>
dplyr::select(Full_name, Associates)
View(out)
View(out)
# devtools::install_github('sagesteppe/BarnebyLives')
library(tidyverse)
library(BarnebyLives)
data <- read_sheet('1iOQBNeGqRJ3yhA-Sujas3xZ2Aw5rFkktUKv3N_e4o8M',
sheet = 'Processed - Examples')
library(googlesheets4)
data <- read_sheet('1iOQBNeGqRJ3yhA-Sujas3xZ2Aw5rFkktUKv3N_e4o8M',
sheet = 'Processed - Examples')
data <- associate_dropper(data)
df <- sf::st_drop_geometry(directions)
df <- sf::st_drop_geometry(data)
sheet_append('1iOQBNeGqRJ3yhA-Sujas3xZ2Aw5rFkktUKv3N_e4o8M',
sheet = 'Processed - Examples', data = df)
setwd('/media/steppe/hdd/BarnebyLives/data-raw')
googledrive::drive_auth("reedbenkendorf27@gmail.com")
# read in data from the sheet to process
collection_examples <- read_sheet('1iOQBNeGqRJ3yhA-Sujas3xZ2Aw5rFkktUKv3N_e4o8M',
sheet = 'Processed - Examples')
usethis::use_data(collection_examples, overwrite = TRUE)
devtools::install_github('sagesteppe/BarnebyLives')
