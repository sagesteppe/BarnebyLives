.before = geometry)
locality <- sf::st_drop_geometry(sites)
locality <- locality[1, 'ID']
focal <- gnis_places[grep(locality, gnis_places$ID), ]
location_from <- sf::st_centroid(focal)
location_from <- sf::st_transform(location_from, 5070)
x_planar <- sf::st_transform(x, 5070)
distances <- sf::st_distance(location_from, x_planar, which = 'Euclidean')
place <- data.frame('Place' =  st_drop_geometry(gnis_places[x$ID, 'fetr_nm']))
azy <- nngeo::st_azimuth(
location_from,
x_planar
)
distances <- data.frame(
sf::st_drop_geometry(x),
Distance = round(as.numeric(distances / 1609.34), -1),
Azimuth = round(as.numeric(azy), 0),
Place = place
)  |>
dplyr::mutate(Site = if_else(
Distance < 100, paste0('At ', fetr_nm, '.'),
paste0(Distance, 'm', ' at ', format_degree(Azimuth), ' from ', fetr_nm, '.')),
Site = stringr::str_replace(Site, '\\..$', '.')) |>
dplyr::select(-any_of(c('Distance', 'Azimuth', 'Place', 'ID', 'fetr_nm')))
out <- dplyr::bind_cols(x, distances) |>
dplyr::relocate(Site, .before = geometry) |>
dplyr::select(-any_of(c('ID')))
}
#' check that genera and specific epithets are spelled (almost) correctly
#'
#' @description this function attempts to verify the spelling of a user submitted taxonomic name. If necessary it will proceed step-wise by name pieces attempting to place them.
#' @param x a vector of species names
#' @param path a path to a folder containing the taxonomic data.
#' @examples
#' names_vec <- c('Astagalus purshii', 'Linnaeus borealius', 'Heliumorus multifora')
#' spelling <- spell_check(names_vec, path = '../taxonomic_data')
#' spelling
#' @export
spell_check <- function(x, path){
sppLKPtab <- read.csv(file.path(path, 'species_lookup_table.csv'))
epiLKPtab <- read.csv(file.path(path, 'epithet_lookup_table.csv'))
genLKPtab <- read.csv(file.path(path, 'genus_lookup_table.csv'))
pieces <- unlist(stringr::str_split(x, pattern = " "))
genus <- pieces[1] ; species <- pieces[2]
binom <- paste(genus, species)
# infra species should be found without much hassle due to their length
if(length(pieces) == 4){
infras <- na.omit(epiLKPtab)
full_name <- paste(genus, species,
stringr::str_replace(pieces[3], 'ssp\\.|ssp', 'subsp.'), pieces[4])
if (any(grep( x = infras$scientificName, pattern = full_name, fixed = T))) {
return(data.frame(Query = x, Result = full_name, Match = 'exact'))
} else {
infras <- na.omit(epiLKPtab)
full_name <- paste(genus, species,
stringr::str_replace(pieces[3], 'ssp\\.|ssp', 'subsp.'), pieces[4])
infraspecies_name <-
infras[which.min(adist(full_name, infras$scientificName)), 'scientificName'] |> as.character()
return(data.frame(Query = x, Result = infraspecies_name, Match = 'fuzzy'))
}
# species can become difficult due to their short  names, e.g. 'Poa annua'
} else {
if (any(grep( x = sppLKPtab$scientificName, pattern = binom, fixed = T))) {
return(data.frame(Query = x, Result = x, Match = 'exact'))
} else{
# try and determine which piece is incorrect.
# subset datasets to query each name component separately
genus2char <- stringr::str_extract(genus, '[A-Z][a-z]{1}')
species3char <- stringr::str_extract(species, '[a-z]{3}')
gen_strings <-
dplyr::filter(genLKPtab, .data$Grp == genus2char) |> dplyr::pull(strings)
spe_strings <-
dplyr::filter(sppLKPtab, .data$Grp == species3char) |> dplyr::pull(strings)
# check to see if both genus and species are clean
if (any(grep(x = gen_strings, pattern = paste0('^', genus, '$')))) {
clean_genus_Tag <- genus
} else {
possible_genus_Tag <-
gen_strings[which.min(adist(genus, gen_strings))]
}
# is species clean
if (any(grep(x = spe_strings, pattern = paste0('^', species, '$')))) {
clean_species_Tag <- species
} else {
possible_species_Tag <-
spe_strings[which.min(adist(species, spe_strings))]
}
# if both the genus and species name are present, we could be missing it from the DB
if (exists('clean_genus_Tag') & exists ('clean_species_Tag'))
{
return(data.frame(
Query = x, Result = binom, Match = 'Suspected missing from ref DB'))
} else { # if one is not clean search them with the 'cleaned' up versions
combos <- ls()[grep(ls(), pattern = 'Tag')]
search_q <-
combos[c(grep(combos, pattern = 'genus'),
grep(combos, pattern = 'species'))]
search_nom <- paste(unlist(mget(search_q)), collapse = " ")
if (any(grep(x = epiLKPtab$scientificName, pattern = search_nom, fixed = T))) {
return(data.frame(Query = x, Result = search_nom, Match = 'fuzzy'))
} else{
possible_binomial <-
epiLKPtab[which.min(adist(search_nom, epiLKPtab$scientificName)), 'scientificName'] |>
as.character()
return(data.frame(Query = x, Binomial = possible_binomial, Match = 'fuzzy'))
}
}
}
}
}
abbrevs <- read.csv('/hdd/Barneby_Lives-dev/taxonomic_data_raw/ipni_author_abbreviations.csv')
trailed <- vector(mode = 'character', length = nrow(abbrevs))
trailed[grep('\\.$', abbrevs$author_abbrevation)] <- '.'
abbrevs_spaced <- sub('\\.$', '', abbrevs$author_abbrevation) # remove the trailing periods
abbrevs_notrail <- sub('\\.(?!.*\\.)', ". ",
abbrevs_spaced, perl = T) # identify the last period in the name, and add a space after it
abbrevs <- paste0(abbrevs_notrail, trailed)
#usethis::use_data(abbrevs)
write.csv(abbrevs, row.names = F, '../taxonomic_data/abbrevs.csv')
#usethis::use_data(abbrevs)
write.csv(abbrevs, row.names = F, '/hdd/Barneby_Lives-dev/taxonomic_data/abbrevs.csv')
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
usethis::use_rmarkdown_template(
template_name = "Template Name",
template_dir = NULL,
template_description = "A description of the template",
template_create_dir = FALSE
)
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
quit()
(({#files[@]}/4))
animals=(A B C D E F G H I J K L)
devtools::install_github('sagesteppe/BarnebyLives')
# devtools::install_github('sagesteppe/BarnebyLives')
library(BarnebyLives)
p <- '~/Documents/HerbariumLabels'
p2libs <- .libPaths()[
grepl(paste0(version$major, '.', sub('\\..*', "", version$minor)),
.libPaths())]
folds <- c('BarnebyLives/rmarkdown/templates/labels/skeleton/skeleton.Rmd')
purrr::walk(
.x = collection_examples$Collection_number,
~ rmarkdown::render(
input = file.path( p2libs, folds),
output_file = file.path(p, glue::glue("{.x}.pdf")),
params = list(Collection_number = {.x})
)
)
p <- '~/Documents/HerbariumLabels/raw'
p2libs <- .libPaths()[
grepl(paste0(version$major, '.', sub('\\..*', "", version$minor)),
.libPaths())]
folds <- c('BarnebyLives/rmarkdown/templates/labels/skeleton/skeleton.Rmd')
purrr::walk(
.x = collection_examples$Collection_number,
~ rmarkdown::render(
input = file.path( p2libs, folds),
output_file = file.path(p, glue::glue("{.x}.pdf")),
params = list(Collection_number = {.x})
)
)
phacelia <- collection_examples[31,]
View(phacelia)
# devtools::install_github('sagesteppe/BarnebyLives')
library(tidyverse)
library(BarnebyLives)
library(googlesheets4)
googledrive::drive_auth("reedbenkendorf27@gmail.com")
# read in data from the sheet to process
df <- read_sheet('1iOQBNeGqRJ3yhA-Sujas3xZ2Aw5rFkktUKv3N_e4o8M',
sheet = 'Data Entry - Examples') %>%
mutate(UNIQUEID = paste0(Primary_Collector, Collection_number))
# determine whether these data have already been processed by the script, using
# a unique combination of collection name and collection code.
processed <- read_sheet('1iOQBNeGqRJ3yhA-Sujas3xZ2Aw5rFkktUKv3N_e4o8M',
sheet = 'Processed - Examples') %>%
select(Collection_number, Primary_Collector) %>%
mutate(UNIQUEID = paste0(Primary_Collector, Collection_number))
input <- filter(df, ! UNIQUEID %in% processed$UNIQUEID ) %>%
select(-UNIQUEID)
rm(processed, df)
data <- date_parser(input, 'Date_digital', 'det_date')
View(input)
data <- date_parser(input, 'Date_digital', 'Determined_date')
View(data)
library(googlesheets4)
googledrive::drive_auth("reedbenkendorf27@gmail.com")
# read in data from the sheet to process
df <- read_sheet('1iOQBNeGqRJ3yhA-Sujas3xZ2Aw5rFkktUKv3N_e4o8M',
sheet = 'Data Entry - Examples') %>%
mutate(UNIQUEID = paste0(Primary_Collector, Collection_number))
# determine whether these data have already been processed by the script, using
# a unique combination of collection name and collection code.
processed <- read_sheet('1iOQBNeGqRJ3yhA-Sujas3xZ2Aw5rFkktUKv3N_e4o8M',
sheet = 'Processed - Examples') %>%
select(Collection_number, Primary_Collector) %>%
mutate(UNIQUEID = paste0(Primary_Collector, Collection_number))
input <- filter(df, ! UNIQUEID %in% processed$UNIQUEID ) %>%
select(-UNIQUEID)
rm(processed, df)
data <- date_parser(input, 'Date_digital', 'Determined_date')
dplyr::select(data, starts_with('Date')) %>%
utils::head()
data <- dms2dd(data, dms = F)
dplyr::select(data, starts_with(c('latitude', 'longitude'))) %>%
utils::head()
data <- coords2sf(data)
head(data) # now we can see that it is an sf object
p <- '/media/steppe/hdd/Barneby_Lives-dev/geodata'
data <- political_grabber(data, y = 'Collection_number', path = p)
data <- site_writer(data, path = p)
data <- physical_grabber(data, path = p)
p <- '/media/steppe/hdd/Barneby_Lives-dev/taxonomic_data'
data <- spell_check(data, path = p)
data <- author_check(data, path = p)
names <- sf::st_drop_geometry(data) %>%
pull(Full_name)
pow_res <- lapply(names,
powo_searcher) %>%
bind_rows()
data <- bind_cols(data, pow_res)
rm(names, pow_res)
SoS_gkey = Sys.getenv("Sos_gkey")
directions <- directions_grabber(data, api_key = SoS_gkey)
# first ensure the columns are in the same order as google sheets
processed <- read_sheet('1iOQBNeGqRJ3yhA-Sujas3xZ2Aw5rFkktUKv3N_e4o8M',
sheet = 'Processed - Examples') %>%
colnames()
df <- sf::st_drop_geometry(directions) %>%
select(all_of(processed))
# we will add these data onto our final sheet.
sheet_append('1iOQBNeGqRJ3yhA-Sujas3xZ2Aw5rFkktUKv3N_e4o8M',
sheet = 'Processed - Examples', data = df)
setwd('/media/steppe/hdd/BarnebyLives/data-raw')
library(usethis)
library(googlesheets4)
# read in data from the sheet to process
collection_examples <- read_sheet('1iOQBNeGqRJ3yhA-Sujas3xZ2Aw5rFkktUKv3N_e4o8M',
sheet = 'Processed - Examples')
usethis::use_data(collection_examples, overwrite = TRUE)
p <- '~/Documents/HerbariumLabels/raw'
p2libs <- .libPaths()[
grepl(paste0(version$major, '.', sub('\\..*', "", version$minor)),
.libPaths())]
folds <- c('BarnebyLives/rmarkdown/templates/labels/skeleton/skeleton.Rmd')
purrr::walk(
.x = collection_examples$Collection_number,
~ rmarkdown::render(
input = file.path( p2libs, folds),
output_file = file.path(p, glue::glue("{.x}.pdf")),
params = list(Collection_number = {.x})
)
)
View(collection_examples)
library(googlesheets4)
googledrive::drive_auth("reedbenkendorf27@gmail.com")
# read in data from the sheet to process
df <- read_sheet('1iOQBNeGqRJ3yhA-Sujas3xZ2Aw5rFkktUKv3N_e4o8M',
sheet = 'Data Entry - Examples') %>%
mutate(UNIQUEID = paste0(Primary_Collector, Collection_number))
View(df)
data <- date_parser(df, 'Date_digital', 'Determined_date')
dplyr::select(data, starts_with('Date')) %>%
utils::head()
?date_parse
?date_parser
data <- date_parser(df, coll_date = 'Date_digital', det_date = 'Determined_date')
dplyr::select(data, starts_with('Date')) %>%
utils::head()
View(data)
# devtools::install_github('sagesteppe/BarnebyLives')
library(tidyverse)
library(BarnebyLives)
library(googlesheets4)
googledrive::drive_auth("reedbenkendorf27@gmail.com")
# read in data from the sheet to process
df <- read_sheet('1iOQBNeGqRJ3yhA-Sujas3xZ2Aw5rFkktUKv3N_e4o8M',
sheet = 'Data Entry - Examples') %>%
mutate(UNIQUEID = paste0(Primary_Collector, Collection_number))
# determine whether these data have already been processed by the script, using
# a unique combination of collection name and collection code.
processed <- read_sheet('1iOQBNeGqRJ3yhA-Sujas3xZ2Aw5rFkktUKv3N_e4o8M',
sheet = 'Processed - Examples') %>%
select(Collection_number, Primary_Collector) %>%
mutate(UNIQUEID = paste0(Primary_Collector, Collection_number))
input <- filter(df, ! UNIQUEID %in% processed$UNIQUEID ) %>%
select(-UNIQUEID)
rm(processed, df)
data <- date_parser(df, coll_date = 'Date_digital', det_date = 'Determined_date')
data <- date_parser(input, coll_date = 'Date_digital', det_date = 'Determined_date')
dplyr::select(data, starts_with('Date')) %>%
utils::head()
View(data)
dplyr::select(data, starts_with('Date')) %>%
utils::head()
dplyr::select(data, starts_with('Date|Determined')) %>%
utils::head()
dplyr::select(data, starts_with('Date')) %>%
utils::head()
data <- dms2dd(data, dms = F)
dplyr::select(data, starts_with(c('latitude', 'longitude'))) %>%
utils::head()
data <- coords2sf(data)
head(data) # now we can see that it is an sf object
p <- '/media/steppe/hdd/Barneby_Lives-dev/geodata'
data <- political_grabber(data, y = 'Collection_number', path = p)
data <- site_writer(data, path = p)
data <- physical_grabber(data, path = p)
p <- '/media/steppe/hdd/Barneby_Lives-dev/taxonomic_data'
data <- spell_check(data, path = p)
data <- author_check(data, path = p)
names <- sf::st_drop_geometry(data) %>%
pull(Full_name)
pow_res <- lapply(names,
powo_searcher) %>%
bind_rows()
data <- bind_cols(data, pow_res)
rm(names, pow_res)
SoS_gkey = Sys.getenv("Sos_gkey")
directions <- directions_grabber(data, api_key = SoS_gkey)
# first ensure the columns are in the same order as google sheets
processed <- read_sheet('1iOQBNeGqRJ3yhA-Sujas3xZ2Aw5rFkktUKv3N_e4o8M',
sheet = 'Processed - Examples') %>%
colnames()
df <- sf::st_drop_geometry(directions) %>%
select(all_of(processed))
# we will add these data onto our final sheet.
sheet_append('1iOQBNeGqRJ3yhA-Sujas3xZ2Aw5rFkktUKv3N_e4o8M',
sheet = 'Processed - Examples', data = df)
devtools::install_github('sagesteppe/BarnebyLives')
# devtools::install_github('sagesteppe/BarnebyLives')
library(BarnebyLives)
data('collection_examples')
data('collection_examples')
setwd('~/Documents')
dir.create('HerbariumLabels')
p <- '~/Documents/HerbariumLabels/raw'
p2libs <- .libPaths()[
grepl(paste0(version$major, '.', sub('\\..*', "", version$minor)),
.libPaths())]
folds <- c('BarnebyLives/rmarkdown/templates/labels/skeleton/skeleton.Rmd')
purrr::walk(
.x = collection_examples$Collection_number,
~ rmarkdown::render(
input = file.path( p2libs, folds),
output_file = file.path(p, glue::glue("{.x}.pdf")),
params = list(Collection_number = {.x})
)
)
load("/media/steppe/hdd/BarnebyLives/data/collection_examples.rda")
View(collection_examples)
setwd('/media/steppe/hdd/BarnebyLives/data-raw')
library(usethis)
library(googlesheets4)
googledrive::drive_auth("reedbenkendorf27@gmail.com")
# read in data from the sheet to process
collection_examples <- read_sheet('1iOQBNeGqRJ3yhA-Sujas3xZ2Aw5rFkktUKv3N_e4o8M',
sheet = 'Processed - Examples')
View(collection_examples)
# devtools::install_github('sagesteppe/BarnebyLives')
library(tidyverse)
library(BarnebyLives)
library(googlesheets4)
googledrive::drive_auth("reedbenkendorf27@gmail.com")
# read in data from the sheet to process
df <- read_sheet('1iOQBNeGqRJ3yhA-Sujas3xZ2Aw5rFkktUKv3N_e4o8M',
sheet = 'Data Entry - Examples') %>%
mutate(UNIQUEID = paste0(Primary_Collector, Collection_number))
library(googlesheets4)
googledrive::drive_auth("reedbenkendorf27@gmail.com")
# read in data from the sheet to process
df <- read_sheet('1iOQBNeGqRJ3yhA-Sujas3xZ2Aw5rFkktUKv3N_e4o8M',
sheet = 'Data Entry - Examples') %>%
mutate(UNIQUEID = paste0(Primary_Collector, Collection_number))
View(df)
# determine whether these data have already been processed by the script, using
# a unique combination of collection name and collection code.
processed <- read_sheet('1iOQBNeGqRJ3yhA-Sujas3xZ2Aw5rFkktUKv3N_e4o8M',
sheet = 'Processed - Examples') %>%
select(Collection_number, Primary_Collector) %>%
mutate(UNIQUEID = paste0(Primary_Collector, Collection_number))
# determine whether these data have already been processed by the script, using
# a unique combination of collection name and collection code.
processed <- read_sheet('1iOQBNeGqRJ3yhA-Sujas3xZ2Aw5rFkktUKv3N_e4o8M',
sheet = 'Processed - Examples') %>%
select(Collection_number, Primary_Collector) %>%
mutate(UNIQUEID = paste0(Primary_Collector, Collection_number))
input <- filter(df, ! UNIQUEID %in% processed$UNIQUEID ) %>%
select(-UNIQUEID)
rm(processed, df)
data <- date_parser(input, coll_date = 'Date_digital', det_date = 'Determined_date')
View(data)
data <- dms2dd(data, dms = F)
dplyr::select(data, starts_with(c('latitude', 'longitude'))) %>%
utils::head()
View(data)
data <- coords2sf(data)
p <- '/media/steppe/hdd/Barneby_Lives-dev/geodata'
data <- political_grabber(data, y = 'Collection_number', path = p)
data <- site_writer(data, path = p)
data <- physical_grabber(data, path = p)
p <- '/media/steppe/hdd/Barneby_Lives-dev/taxonomic_data'
data <- spell_check(data, path = p)
data <- author_check(data, path = p)
names <- sf::st_drop_geometry(data) %>%
pull(Full_name)
pow_res <- lapply(names,
powo_searcher) %>%
bind_rows()
data <- bind_cols(data, pow_res)
View(data)
rm(names, pow_res)
processed <- read_sheet('1iOQBNeGqRJ3yhA-Sujas3xZ2Aw5rFkktUKv3N_e4o8M',
sheet = 'Processed - Examples') %>%
colnames()
sheet_append('1iOQBNeGqRJ3yhA-Sujas3xZ2Aw5rFkktUKv3N_e4o8M',
sheet = 'Processed - Examples', data = df)
SoS_gkey = Sys.getenv("Sos_gkey")
directions <- directions_grabber(data, api_key = SoS_gkey)
df <- sf::st_drop_geometry(directions) #%>%
#  select(all_of(processed))
# we will add these data onto our final sheet.
sheet_append('1iOQBNeGqRJ3yhA-Sujas3xZ2Aw5rFkktUKv3N_e4o8M',
sheet = 'Processed - Examples', data = df)
#  select(all_of(processed))
# we will add these data onto our final sheet.
sheet_append('1iOQBNeGqRJ3yhA-Sujas3xZ2Aw5rFkktUKv3N_e4o8M',
sheet = 'Processed - Examples', data = df)
#  select(all_of(processed))
# we will add these data onto our final sheet.
sheet_append('1iOQBNeGqRJ3yhA-Sujas3xZ2Aw5rFkktUKv3N_e4o8M',
sheet = 'Processed - Examples', data = df)
colnames(df)
#  select(all_of(processed))
# we will add these data onto our final sheet.
write_sheet('1iOQBNeGqRJ3yhA-Sujas3xZ2Aw5rFkktUKv3N_e4o8M',
sheet = 'Processed - Examples', data = df)
setwd('/media/steppe/hdd/BarnebyLives/data-raw')
googledrive::drive_auth("reedbenkendorf27@gmail.com")
# read in data from the sheet to process
collection_examples <- read_sheet('1iOQBNeGqRJ3yhA-Sujas3xZ2Aw5rFkktUKv3N_e4o8M',
sheet = 'Processed - Examples')
usethis::use_data(collection_examples, overwrite = TRUE)
devtools::install_github('sagesteppe/BarnebyLives')
# devtools::install_github('sagesteppe/BarnebyLives')
library(BarnebyLives)
data('collection_examples')
p <- '~/Documents/HerbariumLabels/raw'
p2libs <- .libPaths()[
grepl(paste0(version$major, '.', sub('\\..*', "", version$minor)),
.libPaths())]
folds <- c('BarnebyLives/rmarkdown/templates/labels/skeleton/skeleton.Rmd')
purrr::walk(
.x = collection_examples$Collection_number,
~ rmarkdown::render(
input = file.path( p2libs, folds),
output_file = file.path(p, glue::glue("{.x}.pdf")),
params = list(Collection_number = {.x})
)
)
data('collection_examples')
View(collection_examples)
View(collection_examples)
setwd('/media/steppe/hdd/BarnebyLives/data-raw')
googledrive::drive_auth("reedbenkendorf27@gmail.com")
# read in data from the sheet to process
collection_examples <- read_sheet('1iOQBNeGqRJ3yhA-Sujas3xZ2Aw5rFkktUKv3N_e4o8M',
sheet = 'Processed - Examples')
View(collection_examples)
# read in data from the sheet to process
collection_examples <- read_sheet('1iOQBNeGqRJ3yhA-Sujas3xZ2Aw5rFkktUKv3N_e4o8M',
sheet = 'Processed - Examples')
usethis::use_data(collection_examples, overwrite = TRUE)
devtools::install_github('sagesteppe/BarnebyLives')
devtools::install_github('sagesteppe/BarnebyLives', force = TRUE)
# devtools::install_github('sagesteppe/BarnebyLives')
library(BarnebyLives)
data('collection_examples')
View(collection_examples)
View(collection_examples)
# read in data from the sheet to process
collection_examples <- read_sheet('1iOQBNeGqRJ3yhA-Sujas3xZ2Aw5rFkktUKv3N_e4o8M',
sheet = 'Processed - Examples')
usethis::use_data(collection_examples, overwrite = TRUE)
usethis::use_data(collection_examples, overwrite = TRUE)
