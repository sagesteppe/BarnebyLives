#' Currently supported options include: Symbiota, JEPS, CHIC...
#' @examples
#' @export
format_database_import <- function(x, format){
dbt <- database_templates[database_templates$Database == format,]
col2select <- dbt$BarnebyLives[!is.na(dbt$BarnebyLives)]
names4cols <- dbt$OutputField[!is.na(dbt$BarnebyLives)]
# create any necessary columns by engineering the input data.
if(any(col2select=='Vegetation_Associates')){
x <- tidyr::unite(x, col = Vegetation_Associates,
Vegetation, Associates, na.rm=TRUE, sep = ", ")}
if(any(col2select=='Coordinate_Uncertainty')){
x <- dplyr::mutate(x, Coordinate_Uncertainty = 'Not Recorded')}
if(any(col2select=='Elevation_Units')){
x <- dplyr::mutate(x, Coordinate_Uncertainty = 'm')}
# select the relevant columns & rename them
x_sub <- dplyr::select(x, dplyr::all_of(col2select)) |>
purrr::set_names(names4cols)
# pad output data with empty columns
empty_cols <- dbt$OutputField[is.na(dbt$BarnebyLives)]
empty_cols <- setNames(
data.frame(
matrix(nrow = nrow(x), ncol = length(empty_cols))),
empty_cols)
out <- dplyr::bind_cols(x_sub, empty_cols) |>
dplyr::select(dplyr::all_of(dbt$OutputField))
# return object
return(out)
}
library(BarnebyLives)
ce <- collection_examples
ob <- format_database_import(ce, format = 'JEPS')
View(ob)
#' Export a spreadsheet for mass upload to an herbariums database
#'
#' Only a few schemas are currently supported, but we always seek to add more.
#' @param x data frame holding the final output from BarnebyLives
#' @param format a character vector indicating which database to create output for.
#' Currently supported options include: Symbiota, JEPS, CHIC...
#' @examples
#' @export
format_database_import <- function(x, format){
dbt <- database_templates[database_templates$Database == format,]
col2select <- dbt$BarnebyLives[!is.na(dbt$BarnebyLives)]
names4cols <- dbt$OutputField[!is.na(dbt$BarnebyLives)]
# create any necessary columns by engineering the input data.
if(any(col2select=='Vegetation_Associates')){
x <- tidyr::unite(x, col = Vegetation_Associates,
Vegetation, Associates, na.rm=TRUE, sep = ", ")}
if(any(col2select=='Coordinate_Uncertainty')){
x <- dplyr::mutate(x, Coordinate_Uncertainty = 'Not Recorded')}
if(any(col2select=='Elevation_Units')){
x <- dplyr::mutate(x, Coordinate_Uncertainty = 'm')}
# select the relevant columns & rename them
x_sub <- dplyr::select(x, dplyr::all_of(col2select)) |>
purrr::set_names(names4cols)
# pad output data with empty columns
empty_cols <- dbt$OutputField[is.na(dbt$BarnebyLives)]
empty_cols <- setNames(
data.frame(
matrix(nrow = nrow(x), ncol = length(empty_cols))),
empty_cols)
out <- dplyr::bind_cols(x_sub, empty_cols) |>
dplyr::select(dplyr::all_of(dbt$OutputField))
# return object
return(out)
}
library(BarnebyLives)
ce <- collection_examples
ob <- format_database_import(ce, format = 'JEPS')
View(ob)
#' Export a spreadsheet for mass upload to an herbariums database
#'
#' Only a few schemas are currently supported, but we always seek to add more.
#' @param x data frame holding the final output from BarnebyLives
#' @param format a character vector indicating which database to create output for.
#' Currently supported options include: Symbiota, JEPS, CHIC...
#' @examples
#' @export
format_database_import <- function(x, format){
dbt <- database_templates[database_templates$Database == format,]
col2select <- dbt$BarnebyLives[!is.na(dbt$BarnebyLives)]
names4cols <- dbt$OutputField[!is.na(dbt$BarnebyLives)]
# create any necessary columns by engineering the input data.
if(any(col2select=='Vegetation_Associates')){
x <- tidyr::unite(x, col = Vegetation_Associates,
Vegetation, Associates, na.rm=TRUE, sep = ", ")}
if(any(col2select=='Coordinate_Uncertainty')){
x <- dplyr::mutate(x, Coordinate_Uncertainty = 'Not Recorded')}
if(any(col2select=='Elevation_Units')){
x <- dplyr::mutate(x, Coordinate_Uncertainty = 'm')}
# select the relevant columns & rename them
x_sub <- dplyr::select(x, dplyr::all_of(col2select)) |>
purrr::set_names(names4cols)
# pad output data with empty columns
empty_cols <- dbt$OutputField[is.na(dbt$BarnebyLives)]
empty_cols <- setNames(
data.frame(
matrix(nrow = nrow(x), ncol = length(empty_cols))),
empty_cols)
out <- dplyr::bind_cols(x_sub, empty_cols) |>
dplyr::select(dplyr::all_of(dbt$OutputField))
return(out)
}
library(BarnebyLives)
ce <- collection_examples
ob <- format_database_import(ce, format = 'JEPS')
View(ob)
View(ob)
colnames(ob)
#' Export a spreadsheet for mass upload to an herbariums database
#'
#' Only a few schemas are currently supported, but we always seek to add more.
#' @param x data frame holding the final output from BarnebyLives
#' @param format a character vector indicating which database to create output for.
#' Currently supported options include: Symbiota, JEPS, CHIC...
#' @examples
#' @export
format_database_import <- function(x, format){
dbt <- database_templates[database_templates$Database == format,]
col2select <- dbt$BarnebyLives[!is.na(dbt$BarnebyLives)]
names4cols <- dbt$OutputField[!is.na(dbt$BarnebyLives)]
# create any necessary columns by engineering the input data.
if(any(col2select=='Vegetation_Associates')){
x <- tidyr::unite(x, col = Vegetation_Associates,
Vegetation, Associates, na.rm=TRUE, sep = ", ")}
if(any(col2select=='Coordinate_Uncertainty')){
x <- dplyr::mutate(x, Coordinate_Uncertainty = 'Not Recorded')}
if(any(col2select=='Elevation_Units')){
x <- dplyr::mutate(x, Coordinate_Uncertainty = 'm')}
# select the relevant columns & rename them
x_sub <- dplyr::select(x, dplyr::all_of(col2select)) |>
purrr::set_names(names4cols)
# pad output data with empty columns
empty_cols <- dbt$OutputField[is.na(dbt$BarnebyLives)]
empty_cols <- setNames(
data.frame(
matrix(nrow = nrow(x), ncol = length(empty_cols))),
empty_cols)
out <- dplyr::bind_cols(x_sub, empty_cols) |>
dplyr::select(dplyr::all_of(dbt$OutputField))
return(out)
}
View(ob)
setwd('/media/steppe/hdd/Barneby_Lives-dev/database_data')
library(tidyverse)
all_names <- read.csv('all_darwincore_colnames.csv')
setwd('/media/steppe/hdd/Barneby_Lives-dev/database_data')
library(tidyverse)
final_names <- filter(all_names, !COLNAMES %in% pop_names$DarwinCore ) %>%
mutate(BL = NA) %>%
rename(DarwinCore = COLNAMES) %>%
bind_rows(., pop_names) %>%
slice(match(all_names$COLNAMES, DarwinCore))
library(usethis)
setwd('/media/steppe/hdd/BarnebyLives/data-raw')
setwd('/media/steppe/hdd/BarnebyLives/data-raw')
dbt_fields <- read.csv('Fields.csv')
usethis::use_data(dbt_fields, overwrite = TRUE)
database_templates
database_templates <- read.csv('Fields.csv')
usethis::use_data(database_templates, overwrite = TRUE)
#' Export a spreadsheet for mass upload to an herbariums database
#'
#' Only a few schemas are currently supported, but we always seek to add more.
#' @param x data frame holding the final output from BarnebyLives
#' @param format a character vector indicating which database to create output for.
#' Currently supported options include: Symbiota, JEPS, CHIC...
#' @examples
#' @export
format_database_import <- function(x, format){
dbt <- database_templates[database_templates$Database == format,]
col2select <- dbt$BarnebyLives[!is.na(dbt$BarnebyLives)]
names4cols <- dbt$OutputField[!is.na(dbt$BarnebyLives)]
# create any necessary columns by engineering the input data.
if(any(col2select=='Vegetation_Associates')){
x <- tidyr::unite(x, col = Vegetation_Associates,
Vegetation, Associates, na.rm=TRUE, sep = ", ")}
if(any(col2select=='Coordinate_Uncertainty')){
x <- dplyr::mutate(x, Coordinate_Uncertainty = 'Not Recorded')}
if(any(col2select=='Elevation_Units')){
x <- dplyr::mutate(x, Coordinate_Uncertainty = 'm')}
# select the relevant columns & rename them
x_sub <- dplyr::select(x, dplyr::all_of(col2select)) |>
purrr::set_names(names4cols)
# pad output data with empty columns
empty_cols <- dbt$OutputField[is.na(dbt$BarnebyLives)]
empty_cols <- setNames(
data.frame(
matrix(nrow = nrow(x), ncol = length(empty_cols))),
empty_cols)
out <- dplyr::bind_cols(x_sub, empty_cols) |>
dplyr::select(dplyr::all_of(dbt$OutputField))
return(out)
}
library(BarnebyLives)
ce <- collection_examples
ob <- format_database_import(ce, format = 'JEPS')
#' Export a spreadsheet for mass upload to an herbariums database
#'
#' Only a few schemas are currently supported, but we always seek to add more.
#' @param x data frame holding the final output from BarnebyLives
#' @param format a character vector indicating which database to create output for.
#' Currently supported options include: Symbiota, JEPS, CHIC...
#' @examples
#' @export
format_database_import <- function(x, format){
dbt <- database_templates[database_templates$Database == format,]
col2select <- dbt$BarnebyLives[!is.na(dbt$BarnebyLives)]
names4cols <- dbt$OutputField[!is.na(dbt$BarnebyLives)]
# create any necessary columns by engineering the input data.
if(any(col2select=='Vegetation_Associates')){
x <- tidyr::unite(x, col = Vegetation_Associates,
Vegetation, Associates, na.rm=TRUE, sep = ", ")}
if(any(col2select=='Coordinate_Uncertainty')){
x <- dplyr::mutate(x, Coordinate_Uncertainty = 'Not Recorded')}
if(any(col2select=='Elevation_Units')){
x <- dplyr::mutate(x, Coordinate_Uncertainty = 'm')}
return(x)
# select the relevant columns & rename them
x_sub <- dplyr::select(x, dplyr::all_of(col2select)) |>
purrr::set_names(names4cols)
# pad output data with empty columns
empty_cols <- dbt$OutputField[is.na(dbt$BarnebyLives)]
empty_cols <- setNames(
data.frame(
matrix(nrow = nrow(x), ncol = length(empty_cols))),
empty_cols)
out <- dplyr::bind_cols(x_sub, empty_cols) |>
dplyr::select(dplyr::all_of(dbt$OutputField))
return(out)
}
library(BarnebyLives)
ce <- collection_examples
ob <- format_database_import(ce, format = 'JEPS')
View(ob)
#' Export a spreadsheet for mass upload to an herbariums database
#'
#' Only a few schemas are currently supported, but we always seek to add more.
#' @param x data frame holding the final output from BarnebyLives
#' @param format a character vector indicating which database to create output for.
#' Currently supported options include: Symbiota, JEPS, CHIC...
#' @examples
#' @export
format_database_import <- function(x, format){
dbt <- database_templates[database_templates$Database == format,]
col2select <- dbt$BarnebyLives[!is.na(dbt$BarnebyLives)]
names4cols <- dbt$OutputField[!is.na(dbt$BarnebyLives)]
# create any necessary columns by engineering the input data.
if(any(col2select=='Vegetation_Associates')){
x <- tidyr::unite(x, col = Vegetation_Associates,
Vegetation, Associates, na.rm=TRUE, sep = ", ")}
if(any(col2select=='Coordinate_Uncertainty')){
x <- dplyr::mutate(x, Coordinate_Uncertainty = 'Not Recorded')}
if(any(col2select=='Elevation_Units')){
x <- dplyr::mutate(x, Elevation_Units = 'm')}
# select the relevant columns & rename them
x_sub <- dplyr::select(x, dplyr::all_of(col2select)) |>
purrr::set_names(names4cols)
# pad output data with empty columns
empty_cols <- dbt$OutputField[is.na(dbt$BarnebyLives)]
empty_cols <- setNames(
data.frame(
matrix(nrow = nrow(x), ncol = length(empty_cols))),
empty_cols)
out <- dplyr::bind_cols(x_sub, empty_cols) |>
dplyr::select(dplyr::all_of(dbt$OutputField))
return(out)
}
library(BarnebyLives)
ce <- collection_examples
ob <- format_database_import(ce, format = 'JEPS')
colnames(ob)
#' Export a spreadsheet for mass upload to an herbariums database
#'
#' Only a few schemas are currently supported, but we always seek to add more.
#' @param x data frame holding the final output from BarnebyLives
#' @param format a character vector indicating which database to create output for.
#' Currently supported options include: Symbiota, JEPS, CHIC...
#' @examples
#' @export
format_database_import <- function(x, format){
dbt <- database_templates[database_templates$Database == format,]
col2select <- dbt$BarnebyLives[!is.na(dbt$BarnebyLives)]
names4cols <- dbt$OutputField[!is.na(dbt$BarnebyLives)]
# create any necessary columns by engineering the input data.
if(any(col2select=='Vegetation_Associates')){
x <- tidyr::unite(x, col = Vegetation_Associates,
Vegetation, Associates, na.rm=TRUE, sep = ", ")}
if(any(col2select=='Coordinate_Uncertainty')){
x <- dplyr::mutate(x, Coordinate_Uncertainty = 'Not Recorded')}
if(any(col2select=='Elevation_Units')){
x <- dplyr::mutate(x, Elevation_Units = 'm')}
# select the relevant columns & rename them
x_sub <- dplyr::select(x, dplyr::all_of(col2select)) |>
purrr::set_names(names4cols)
# pad output data with empty columns
empty_cols <- dbt$OutputField[is.na(dbt$BarnebyLives)]
empty_cols <- setNames(
data.frame(
matrix(nrow = nrow(x), ncol = length(empty_cols))),
empty_cols)
out <- dplyr::bind_cols(x_sub, empty_cols) |>
dplyr::select(dplyr::all_of(dbt$OutputField))
return(out)
}
library(BarnebyLives)
ce <- collection_examples
ob <- format_database_import(ce, format = 'JEPS')
colnames(ob)
View(ob)
ob |>
mutate(Label_Footer == 'Collected under the auspices of the United States Bureau of Land Management')
ob |>
mutate(
Label_Footer == 'Collected under the auspices of the United States Bureau of Land Management',
Coordinate_Source == 'iPad')
ob <- ob |>
mutate(
Label_Footer == 'Collected under the auspices of the United States Bureau of Land Management',
Coordinate_Source == 'iPad')
ob <- format_database_import(ce, format = 'JEPS')
ob <- ob |>
mutate(
Label_Footer = 'Collected under the auspices of the United States Bureau of Land Management',
Coordinate_Source = 'iPad')
View(ob)
colnames(ob)
ob <- ob |>
mutate(
Label_Footer = 'Collected under the auspices of the United States Bureau of Land Management',
Coordinate_Uncertainty_In_Meters = 5,
Coordinate_Source = 'iPad')
ob <- format_database_import(ce, format = 'JEPS')
ob <- ob |>
mutate(
Label_Footer = 'Collected under the auspices of the United States Bureau of Land Management',
Coordinate_Uncertainty_In_Meters = 5,
Coordinate_Source = 'iPad')
colnames(ob)
ob
#' Export a spreadsheet for mass upload to an herbariums database
#'
#' Only a few schemas are currently supported, but we always seek to add more.
#' @param x data frame holding the final output from BarnebyLives
#' @param format a character vector indicating which database to create output for.
#' Currently supported options include: Symbiota, JEPS, CHIC...
#' @examples
#' @export
format_database_import <- function(x, format){
dbt <- database_templates[database_templates$Database == format,]
col2select <- dbt$BarnebyLives[!is.na(dbt$BarnebyLives)]
names4cols <- dbt$OutputField[!is.na(dbt$BarnebyLives)]
# create any necessary columns by engineering the input data.
if(any(col2select=='Vegetation_Associates')){
x <- tidyr::unite(x, col = Vegetation_Associates,
Vegetation, Associates, na.rm=TRUE, sep = ", ")}
if(any(col2select=='Coordinate_Uncertainty')){
x <- dplyr::mutate(x, Coordinate_Uncertainty = 'Not Recorded')}
if(any(col2select=='Elevation_Units')){
x <- dplyr::mutate(x, Elevation_Units = 'm')}
# select the relevant columns & rename them
x_sub <- dplyr::select(x, dplyr::all_of(col2select)) |>
purrr::set_names(names4cols)
# pad output data with empty columns
empty_cols <- dbt$OutputField[is.na(dbt$BarnebyLives)]
empty_cols <- setNames(
data.frame(
matrix(nrow = nrow(x), ncol = length(empty_cols))),
empty_cols)
out <- dplyr::bind_cols(x_sub, empty_cols) |>
dplyr::select(dplyr::all_of(dbt$OutputField))
return(out)
}
library(BarnebyLives)
ce <- collection_examples
ob <- format_database_import(ce, format = 'JEPS')
ob <- ob |>
mutate(
Label_Footer = 'Collected under the auspices of the Bureau of Land Management',
Coordinate_Uncertainty_In_Meters = 5,
Coordinate_Source = 'iPad')
View(ob)
ob <- format_database_import(collection_examples, format = 'JEPS')
library(BarnebyLives)
dat4import <- format_database_import(collection_examples, format = 'JEPS')
dat4import |>
mutate(
Label_Footer = 'Collected under the auspices of the Bureau of Land Management',
Coordinate_Uncertainty_In_Meters = 5,
Coordinate_Source = 'iPad')
}
#' library(BarnebyLives)
#' dat4import <- format_database_import(collection_examples, format = 'JEPS')
#'
# we also know a bit about our material and can populate it here by hand #
#' dat4import |>
#'   dplyr::mutate(
#'    Label_Footer = 'Collected under the auspices of the Bureau of Land Management',
#'    Coordinate_Uncertainty_In_Meters = 5,
#    Coordinate_Source = 'iPad')
#' @export
format_database_import <- function(x, format){
data <- read.csv('data/test_data.csv', na.strings = "") %>%
drop_na(c('Longitude', 'Latitude', 'Date_digital')) %>%
unite(col = 'Scientific_name', c(Binomial, Infrarank, Infraspecies), na.rm=TRUE, sep = " ", remove = F)
data
data <- read.csv('data/test_data.csv', na.strings = "") %>%
drop_na(c('Longitude', 'Latitude', 'Date_digital')) %>%
unite(col = 'Scientific_name', c(Binomial, Infrarank, Infraspecies), na.rm=TRUE, sep = " ", remove = F)
View(data)
n_sp_authors <- data %>%
drop_na(Binomial_authority) %>%
count() %>% # 557 groups of authors
pull()
View(data)
n_sp_authors <- data %>%
drop_na(Vegetation) %>%
distinct(Vegetation)
n_vegetation_fields <- data %>%
drop_na(Vegetation) %>%
distinct(Vegetation)
View(n_vegetation_fields)
n_vegetation_fields <- data %>%
drop_na(Vegetation) %>%
distinct(Vegetation) |>
nrow()
n_associates_fields <- data %>%
drop_na(Associates) %>%
distinct(Associates) |>
nrow()
n_associates_fields
View(data)
devtools::install_github('sagesteppe/BarnebyLives')
devtools::install_github('sagesteppe/BarnebyLives')
library(tidyverse) # data operations
library(BarnebyLives) # for helping accession collections
data <- read.csv('data/test_data.csv', na.strings = "") %>%
drop_na(c('Longitude', 'Latitude', 'Date_digital')) %>%
unite(col = 'Scientific_name', c(Binomial, Infrarank, Infraspecies), na.rm=TRUE, sep = " ", remove = F)
n_families <- data %>%
group_by(Family) %>%
count() %>%
nrow() # 74 families
n_genera <- data %>%
separate(Scientific_name, into = c('Genus', 'Epithet') , remove = FALSE, extra = 'drop') %>%
group_by(Genus) %>%
count() %>%
nrow() # 292 Genera
n_spp <- data %>%
group_by(Binomial) %>%
count() %>%
nrow() # 616 species
n_infraspecies <- data %>%
drop_na(Infraspecies) %>%
group_by(Binomial, Infraspecies) %>%
count() %>%
nrow() # 66 distinct infraspecies
n_sp_authors <- data %>%
drop_na(Binomial_authority) %>%
count() %>% # 557 groups of authors
pull()
n_infra_sp_auths <- data %>%
drop_na(Infraspecific_authority) %>%
group_by(Binomial, Infraspecies) %>%
count() %>%
nrow() # 22 distinct infra species author groups
n_infra_sp_auths <- data %>%
drop_na(Infraspecific_authority) %>%
group_by(Binomial, Infraspecies) %>%
count() %>%
nrow() # 22 distinct infra species author groups
n_vegetation_fields <- data %>%
drop_na(Vegetation) %>%
distinct(Vegetation) |>
nrow()
n_associates_fields <- data %>%
drop_na(Associates) %>%
distinct(Associates) |>
nrow()
n_sites <- data %>%
distinct(Latitude, Longitude) %>%
nrow()
time_split_binomials <- system.time({ # split up names into their components
data <- split_binomial(data, 'Scientific_name')
})
time_dms2dd <- system.time({ # if necessary convert coordinates in degrees minutes second to decimal degrees
data <- dms2dd(data, dms = F)
})
time_autofill_checker <- system.time({ # has the spreadsheet software auto-incremented coordinate values?
data <- autofill_checker(data)
})
time_coords2sf <- system.time({ # create a spatial (simple features) object
data <- coords2sf(data)
})
p2geo <- '/media/steppe/hdd/Barneby_Lives-dev/geodata'
time_political_grabber <- system.time({ # grab political information for collection
data <- political_grabber(data, y = 'Collection_number', path = p2geo)
})
time_physical_grabber <- system.time({ # grab sites physical information
data <- physical_grabber(data, path = p2geo)
})
time_site_writer <- system.time({ # write site location notes
data <- site_writer(data, path = p2geo)
})
p2tax <- '/media/steppe/hdd/Barneby_Lives-dev/taxonomic_data'
time_spell_check <- system.time({ # ensure appropriate spellings of the species
data <- spell_check(data, column = 'Full_name', path = p2tax)
})
time_associate_dropper <- system.time({ # remove the focal taxon from the noted associates
data <- associate_dropper(data, 'Full_name')
})
