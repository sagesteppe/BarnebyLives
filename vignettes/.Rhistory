dplyr::select(-crs) %>%
dplyr::mutate(datum = 'WGS84', .before = geometry)
}
return(dat_list)
}
data <- coords2sf(data)
#' @param example mixed_datum <- data.frame(
#'  datum = (rep(c('nad27', 'NAD83', 'wGs84'), each = 5)),
#'  longitude_dd = runif(15, min = -120, max = -100),
#'  latitude_dd = runif(15, min = 35, max = 48)
#'  )
#'
#' wgs84_dat <- coords2sf( mixed_datum )
#' str(wgs84_dat)
#' st_crs(wgs84_dat)
#' @param export
coords2sf <- function(x, datum){
suppressMessages(library(magrittr))
if(missing(datum)){ # identify datum information
if(length(colnames(x)[grep('datum', colnames(x), ignore.case = T)]) == 1){
datum_name = colnames(x)[grep('datum', colnames(x), ignore.case = T)] } else {
x$datum = 'WGS84'
}
}
if(datum_name == NULL){datum_name = 'datum'}
dat_check <- function(x){if(grepl('nad.*27', ignore.case = T, x = x)) {
x = "NAD27"} else if(grepl('nad.*83', ignore.case = T, x = x)) {
x = 'NAD83'} else if(grepl('wgs', ignore.case = T, x = x)) {
x = "WGS84"
} else {x = 'WGS84'}
}
# now ensure the datum is appropriate for each point
x[datum_name] <- sapply( as.character(x[datum_name]), dat_check)
crs_lkp = data.frame(
datum = c('NAD27', 'NAD83', 'WGS84'),
crs = c(4267, 4269, 4326))
colnames(crs_lkp)[1] <- datum_name
x <- dplyr::left_join(x, crs_lkp, by = datum_name)
# separate all points by there datum
dat_list <- split(x, f = x[datum_name])
if(length(dat_list) == 1) {
dat_list <- dplyr::bind_rows(dat_list)
crss <- dat_list$crs[1]
dat_list <- dat_list |>
sf::st_as_sf(coords = c(x = 'longitude_dd', y = 'latitude_dd'),
crs = crss, remove = F) |>
sf::st_transform(4326) |>
dplyr::select(-crs) |>
dplyr::mutate(datum = 'WGS84', .before = geometry)
} else {
dat_list <- purrr::map(dat_list, . |>
sf::st_as_sf(., coords = c(x = 'longitude_dd', y = 'latitude_dd'),
crs = .$crs[1], remove = F) |>
sf::st_transform(4326)) |>
dplyr::bind_rows() %>%
dplyr::select(-crs) %>%
dplyr::mutate(datum = 'WGS84', .before = geometry)
}
return(dat_list)
}
data <- coords2sf(data)
#' @param example mixed_datum <- data.frame(
#'  datum = (rep(c('nad27', 'NAD83', 'wGs84'), each = 5)),
#'  longitude_dd = runif(15, min = -120, max = -100),
#'  latitude_dd = runif(15, min = 35, max = 48)
#'  )
#'
#' wgs84_dat <- coords2sf( mixed_datum )
#' str(wgs84_dat)
#' st_crs(wgs84_dat)
#' @param export
coords2sf <- function(x, datum){
suppressMessages(library(magrittr))
if(missing(datum)){ # identify datum information
if(length(colnames(x)[grep('datum', colnames(x), ignore.case = T)]) == 1){
datum_name = colnames(x)[grep('datum', colnames(x), ignore.case = T)] } else {
x$datum = 'WGS84'
}
}
if(is.na(datum_name)){datum_name = 'datum'}
dat_check <- function(x){if(grepl('nad.*27', ignore.case = T, x = x)) {
x = "NAD27"} else if(grepl('nad.*83', ignore.case = T, x = x)) {
x = 'NAD83'} else if(grepl('wgs', ignore.case = T, x = x)) {
x = "WGS84"
} else {x = 'WGS84'}
}
# now ensure the datum is appropriate for each point
x[datum_name] <- sapply( as.character(x[datum_name]), dat_check)
crs_lkp = data.frame(
datum = c('NAD27', 'NAD83', 'WGS84'),
crs = c(4267, 4269, 4326))
colnames(crs_lkp)[1] <- datum_name
x <- dplyr::left_join(x, crs_lkp, by = datum_name)
# separate all points by there datum
dat_list <- split(x, f = x[datum_name])
if(length(dat_list) == 1) {
dat_list <- dplyr::bind_rows(dat_list)
crss <- dat_list$crs[1]
dat_list <- dat_list |>
sf::st_as_sf(coords = c(x = 'longitude_dd', y = 'latitude_dd'),
crs = crss, remove = F) |>
sf::st_transform(4326) |>
dplyr::select(-crs) |>
dplyr::mutate(datum = 'WGS84', .before = geometry)
} else {
dat_list <- purrr::map(dat_list, . |>
sf::st_as_sf(., coords = c(x = 'longitude_dd', y = 'latitude_dd'),
crs = .$crs[1], remove = F) |>
sf::st_transform(4326)) |>
dplyr::bind_rows() %>%
dplyr::select(-crs) %>%
dplyr::mutate(datum = 'WGS84', .before = geometry)
}
return(dat_list)
}
data <- coords2sf(data)
#' @param example mixed_datum <- data.frame(
#'  datum = (rep(c('nad27', 'NAD83', 'wGs84'), each = 5)),
#'  longitude_dd = runif(15, min = -120, max = -100),
#'  latitude_dd = runif(15, min = 35, max = 48)
#'  )
#'
#' wgs84_dat <- coords2sf( mixed_datum )
#' str(wgs84_dat)
#' st_crs(wgs84_dat)
#' @param export
coords2sf <- function(x, datum){
suppressMessages(library(magrittr))
if(missing(datum)){ # identify datum information
if(length(colnames(x)[grep('datum', colnames(x), ignore.case = T)]) == 1){
datum_name = colnames(x)[grep('datum', colnames(x), ignore.case = T)] } else {
x$datum = 'WGS84'
}
}
if(is.na(datum_name)){datum_name = 'datum'}
dat_check <- function(x){if(grepl('nad.*27', ignore.case = T, x = x)) {
x = "NAD27"} else if(grepl('nad.*83', ignore.case = T, x = x)) {
x = 'NAD83'} else if(grepl('wgs', ignore.case = T, x = x)) {
x = "WGS84"
} else {x = 'WGS84'}
}
# now ensure the datum is appropriate for each point
x[datum_name] <- sapply( as.character(x[datum_name]), dat_check)
crs_lkp = data.frame(
datum = c('NAD27', 'NAD83', 'WGS84'),
crs = c(4267, 4269, 4326))
colnames(crs_lkp)[1] <- datum_name
x <- dplyr::left_join(x, crs_lkp, by = datum_name)
# separate all points by there datum
dat_list <- split(x, f = x[datum_name])
if(length(dat_list) == 1) {
dat_list <- dplyr::bind_rows(dat_list)
crss <- dat_list$crs[1]
dat_list <- dat_list |>
sf::st_as_sf(coords = c(x = 'longitude_dd', y = 'latitude_dd'),
crs = crss, remove = F) |>
sf::st_transform(4326) |>
dplyr::select(-crs) |>
dplyr::mutate(datum = 'WGS84', .before = geometry)
} else {
dat_list <- purrr::map(dat_list, . |>
sf::st_as_sf(., coords = c(x = 'longitude_dd', y = 'latitude_dd'),
crs = .$crs[1], remove = F) |>
sf::st_transform(4326)) |>
dplyr::bind_rows() %>%
dplyr::select(-crs) %>%
dplyr::mutate(datum = 'WGS84', .before = geometry)
}
return(dat_list)
}
data <- coords2sf(data)
#' @param example mixed_datum <- data.frame(
#'  datum = (rep(c('nad27', 'NAD83', 'wGs84'), each = 5)),
#'  longitude_dd = runif(15, min = -120, max = -100),
#'  latitude_dd = runif(15, min = 35, max = 48)
#'  )
#'
#' wgs84_dat <- coords2sf( mixed_datum )
#' str(wgs84_dat)
#' st_crs(wgs84_dat)
#' @param export
coords2sf <- function(x, datum){
suppressMessages(library(magrittr))
if(missing(datum)){ # identify datum information
if(length(colnames(x)[grep('datum', colnames(x), ignore.case = T)]) == 1){
datum_name = colnames(x)[grep('datum', colnames(x), ignore.case = T)] } else {
x$datum = 'WGS84'
}
}
if(exists(datum_name)){datum_name = 'datum'}
dat_check <- function(x){if(grepl('nad.*27', ignore.case = T, x = x)) {
x = "NAD27"} else if(grepl('nad.*83', ignore.case = T, x = x)) {
x = 'NAD83'} else if(grepl('wgs', ignore.case = T, x = x)) {
x = "WGS84"
} else {x = 'WGS84'}
}
# now ensure the datum is appropriate for each point
x[datum_name] <- sapply( as.character(x[datum_name]), dat_check)
crs_lkp = data.frame(
datum = c('NAD27', 'NAD83', 'WGS84'),
crs = c(4267, 4269, 4326))
colnames(crs_lkp)[1] <- datum_name
x <- dplyr::left_join(x, crs_lkp, by = datum_name)
# separate all points by there datum
dat_list <- split(x, f = x[datum_name])
if(length(dat_list) == 1) {
dat_list <- dplyr::bind_rows(dat_list)
crss <- dat_list$crs[1]
dat_list <- dat_list |>
sf::st_as_sf(coords = c(x = 'longitude_dd', y = 'latitude_dd'),
crs = crss, remove = F) |>
sf::st_transform(4326) |>
dplyr::select(-crs) |>
dplyr::mutate(datum = 'WGS84', .before = geometry)
} else {
dat_list <- purrr::map(dat_list, . |>
sf::st_as_sf(., coords = c(x = 'longitude_dd', y = 'latitude_dd'),
crs = .$crs[1], remove = F) |>
sf::st_transform(4326)) |>
dplyr::bind_rows() %>%
dplyr::select(-crs) %>%
dplyr::mutate(datum = 'WGS84', .before = geometry)
}
return(dat_list)
}
data <- coords2sf(data)
#' @param example mixed_datum <- data.frame(
#'  datum = (rep(c('nad27', 'NAD83', 'wGs84'), each = 5)),
#'  longitude_dd = runif(15, min = -120, max = -100),
#'  latitude_dd = runif(15, min = 35, max = 48)
#'  )
#'
#' wgs84_dat <- coords2sf( mixed_datum )
#' str(wgs84_dat)
#' st_crs(wgs84_dat)
#' @param export
coords2sf <- function(x, datum){
library(magrittr)
if(missing(datum)){ # identify datum information
if(length(colnames(x)[grep('datum', colnames(x), ignore.case = T)]) == 1){
datum_name = colnames(x)[grep('datum', colnames(x), ignore.case = T)] } else {
x$datum = 'WGS84'
}
}
if(exists(datum_name)){datum_name = 'datum'}
dat_check <- function(x){if(grepl('nad.*27', ignore.case = T, x = x)) {
x = "NAD27"} else if(grepl('nad.*83', ignore.case = T, x = x)) {
x = 'NAD83'} else if(grepl('wgs', ignore.case = T, x = x)) {
x = "WGS84"
} else {x = 'WGS84'}
}
# now ensure the datum is appropriate for each point
x[datum_name] <- sapply( as.character(x[datum_name]), dat_check)
crs_lkp = data.frame(
datum = c('NAD27', 'NAD83', 'WGS84'),
crs = c(4267, 4269, 4326))
colnames(crs_lkp)[1] <- datum_name
x <- dplyr::left_join(x, crs_lkp, by = datum_name)
# separate all points by there datum
dat_list <- split(x, f = x[datum_name])
if(length(dat_list) == 1) {
dat_list <- dplyr::bind_rows(dat_list)
crss <- dat_list$crs[1]
dat_list <- dat_list |>
sf::st_as_sf(coords = c(x = 'longitude_dd', y = 'latitude_dd'),
crs = crss, remove = F) |>
sf::st_transform(4326) |>
dplyr::select(-crs) |>
dplyr::mutate(datum = 'WGS84', .before = geometry)
} else {
dat_list <- purrr::map(dat_list, . |>
sf::st_as_sf(., coords = c(x = 'longitude_dd', y = 'latitude_dd'),
crs = .$crs[1], remove = F) |>
sf::st_transform(4326)) |>
dplyr::bind_rows() %>%
dplyr::select(-crs) %>%
dplyr::mutate(datum = 'WGS84', .before = geometry)
}
return(dat_list)
}
data <- coords2sf(data)
#' @param example mixed_datum <- data.frame(
#'  datum = (rep(c('nad27', 'NAD83', 'wGs84'), each = 5)),
#'  longitude_dd = runif(15, min = -120, max = -100),
#'  latitude_dd = runif(15, min = 35, max = 48)
#'  )
#'
#' wgs84_dat <- coords2sf( mixed_datum )
#' str(wgs84_dat)
#' st_crs(wgs84_dat)
#' @param export
coords2sf <- function(x, datum){
library(magrittr)
if(missing(datum)){ # identify datum information
if(length(colnames(x)[grep('datum', colnames(x), ignore.case = T)]) == 1){
datum_name = colnames(x)[grep('datum', colnames(x), ignore.case = T)] } else {
x$datum = 'WGS84'
}
}
if(exists('datum_name')){datum_name = 'datum'}
dat_check <- function(x){if(grepl('nad.*27', ignore.case = T, x = x)) {
x = "NAD27"} else if(grepl('nad.*83', ignore.case = T, x = x)) {
x = 'NAD83'} else if(grepl('wgs', ignore.case = T, x = x)) {
x = "WGS84"
} else {x = 'WGS84'}
}
# now ensure the datum is appropriate for each point
x[datum_name] <- sapply( as.character(x[datum_name]), dat_check)
crs_lkp = data.frame(
datum = c('NAD27', 'NAD83', 'WGS84'),
crs = c(4267, 4269, 4326))
colnames(crs_lkp)[1] <- datum_name
x <- dplyr::left_join(x, crs_lkp, by = datum_name)
# separate all points by there datum
dat_list <- split(x, f = x[datum_name])
if(length(dat_list) == 1) {
dat_list <- dplyr::bind_rows(dat_list)
crss <- dat_list$crs[1]
dat_list <- dat_list |>
sf::st_as_sf(coords = c(x = 'longitude_dd', y = 'latitude_dd'),
crs = crss, remove = F) |>
sf::st_transform(4326) |>
dplyr::select(-crs) |>
dplyr::mutate(datum = 'WGS84', .before = geometry)
} else {
dat_list <- purrr::map(dat_list, . |>
sf::st_as_sf(., coords = c(x = 'longitude_dd', y = 'latitude_dd'),
crs = .$crs[1], remove = F) |>
sf::st_transform(4326)) |>
dplyr::bind_rows() %>%
dplyr::select(-crs) %>%
dplyr::mutate(datum = 'WGS84', .before = geometry)
}
return(dat_list)
}
data <- coords2sf(data)
#' @param example mixed_datum <- data.frame(
#'  datum = (rep(c('nad27', 'NAD83', 'wGs84'), each = 5)),
#'  longitude_dd = runif(15, min = -120, max = -100),
#'  latitude_dd = runif(15, min = 35, max = 48)
#'  )
#'
#' wgs84_dat <- coords2sf( mixed_datum )
#' str(wgs84_dat)
#' st_crs(wgs84_dat)
#' @param export
coords2sf <- function(x, datum){
library(magrittr)
if(missing(datum)){ # identify datum information
if(length(colnames(x)[grep('datum', colnames(x), ignore.case = T)]) == 1){
datum_name = colnames(x)[grep('datum', colnames(x), ignore.case = T)] } else {
x$datum = 'WGS84'
}
}
if(!exists('datum_name')){datum_name = 'datum'}
dat_check <- function(x){if(grepl('nad.*27', ignore.case = T, x = x)) {
x = "NAD27"} else if(grepl('nad.*83', ignore.case = T, x = x)) {
x = 'NAD83'} else if(grepl('wgs', ignore.case = T, x = x)) {
x = "WGS84"
} else {x = 'WGS84'}
}
# now ensure the datum is appropriate for each point
x[datum_name] <- sapply( as.character(x[datum_name]), dat_check)
crs_lkp = data.frame(
datum = c('NAD27', 'NAD83', 'WGS84'),
crs = c(4267, 4269, 4326))
colnames(crs_lkp)[1] <- datum_name
x <- dplyr::left_join(x, crs_lkp, by = datum_name)
# separate all points by there datum
dat_list <- split(x, f = x[datum_name])
if(length(dat_list) == 1) {
dat_list <- dplyr::bind_rows(dat_list)
crss <- dat_list$crs[1]
dat_list <- dat_list |>
sf::st_as_sf(coords = c(x = 'longitude_dd', y = 'latitude_dd'),
crs = crss, remove = F) |>
sf::st_transform(4326) |>
dplyr::select(-crs) |>
dplyr::mutate(datum = 'WGS84', .before = geometry)
} else {
dat_list <- purrr::map(dat_list, . |>
sf::st_as_sf(., coords = c(x = 'longitude_dd', y = 'latitude_dd'),
crs = .$crs[1], remove = F) |>
sf::st_transform(4326)) |>
dplyr::bind_rows() %>%
dplyr::select(-crs) %>%
dplyr::mutate(datum = 'WGS84', .before = geometry)
}
return(dat_list)
}
data <- coords2sf(data)
View(data)
library(tidyverse)
library(BarnebyLives)
library(googlesheets4)
googledrive::drive_auth("reedbenkendorf27@gmail.com")
# read in data from the sheet to process
input <- read_sheet('1iOQBNeGqRJ3yhA-Sujas3xZ2Aw5rFkktUKv3N_e4o8M',
sheet = 'Data Entry - Examples') %>%
mutate(UNIQUEID = paste0(Primary_Collector, Collection_number))
# determine whether these data have already been processed by the script, using
# a unique combination of collection name and collection code.
read_sheet('1iOQBNeGqRJ3yhA-Sujas3xZ2Aw5rFkktUKv3N_e4o8M',
sheet = 'Processed - Examples') %>%
select(Collection_number, Primary_Collector) %>%
mutate(UNIQUEID = paste0(Primary_Collector, Collection_number))
data <- date_parser(input, 'Date_digital')
dplyr::select(data, starts_with('Date')) %>%
utils::head()
data <- dms2dd(data, dms = F)
dplyr::select(data, starts_with(c('latitude', 'longitude'))) %>%
utils::head()
data
data1 <- coords2sf(data)
head(data) # now we can see that it is an sf object
data <- coords2sf(data)
head(data) # now we can see that it is an sf object
test_place <- input[1,]
st_nearest_feature(test_place, places)
st_crs(places)
st_crs(data)
test_place <- data[1,]
st_nearest_feature(test_place, places)
places[ st_nearest_feature(test_place, places), ]
split(data, f = c('latitude_dd', 'longitude_dd'))
split(data1, f = c('latitude_dd', 'longitude_dd'))
split(data1, f = ~latitude_dd, longitude_dd)
View(input)
View(data)
head(data) # now we can see that it is an sf object
split(data1, f = list(data1$latitude_dd, data1$longitude_dd), drop=TRUE)
View(places)
sites <- split(data1, f = list(data1$latitude_dd, data1$longitude_dd), drop=TRUE)
View(sites)
sites[["39.31052.-120.51647"]][["Datum"]]
lapply(sites, '[', 'Site_Name')
lapply(sites, '[', 'Site_name')
new_names <- lapply(sites, '[', 'Site_name')
View(new_names)
View(sites)
lapply(sites, '[', 'Site_Name')
lapply(sites, '[', 'latitude_dd')
lapply(sites, '[', c( 'latitude_dd', 'longitude_dd')
lapply(sites, '[', c( 'latitude_dd', 'longitude_dd'))
lapply(sites, '[', c( 'latitude_dd', 'longitude_dd'))
sites <- lapply(sites, [1,])
sites <- lapply(sites, [1])
sites <- lapply(sites, [,1])
sites <- lapply(sites,  '[' ,1)
View(sites)
sites <- lapply(sites,  '[' ,1,)
coords <- lapply(sites, '[', c( 'latitude_dd', 'longitude_dd'))
coords <- lapply(st_drop_geometry, coords)
# extract the coordinates to serve as the DESTINATION
coords <- lapply(sites, '[', c( 'latitude_dd', 'longitude_dd'))
coords <- lapply(st_drop_geometry, coords)
# extract the coordinates to serve as the DESTINATION
coords <- lapply(sites, '[', c( 'latitude_dd', 'longitude_dd'))
# identify unique sites
sites <- split(data1, f = list(data1$latitude_dd, data1$longitude_dd), drop=TRUE)
sites <- lapply(sites,  '[' , 1,)
# extract the coordinates to serve as the DESTINATION
coords <- lapply(sites, '[', c( 'latitude_dd', 'longitude_dd'))
coords <- lapply(st_drop_geometry, coords)
coords <- lapply(coords, st_drop_geometry)
View(coords)
coords <- bind_rows(coords)
View(sites)
bind_rows(sites)
sites1 <- bind_rows(sites)
places[ st_nearest_feature(sites1, places), ]
nearest <- places[ st_nearest_feature(sites1, places), ]
View(nearest)
View(places)
nearest <- places[ st_nearest_feature(sites1, places), c('STATENS', 'NAME')] |>
st_drop_geometry()
nearest <- places[ st_nearest_feature(sites1, places), c('NAME')] |>
st_drop_geometry()
nearest
coords
View(coords)
coords <- paste(latitude_dd, longitude_dd,  sep = ", ")
coords <- paste(coords$latitude_dd, coords$longitude_dd,  sep = ", ")
coords <- paste(coords$latitude_dd, coords$longitude_dd,  sep = ", ")
nates to serve as the DESTINATION
# extract the coordinates to serve as the DESTINATION
coords <- lapply(sites, '[', c( 'latitude_dd', 'longitude_dd'))
coords <- lapply(coords, st_drop_geometry)
coords <- dplyr::bind_rows(coords)
coords <- paste(coords$latitude_dd, coords$longitude_dd,  sep = ", ")
coords
# extract the coordinates to serve as the DESTINATION
coords <- lapply(sites, '[', c( 'latitude_dd', 'longitude_dd'))
coords <- lapply(coords, st_drop_geometry)
#coords <- dplyr::bind_rows(coords)
coords <- paste(coords$latitude_dd, coords$longitude_dd,  sep = ", ")
# extract the coordinates to serve as the DESTINATION
coords <- lapply(sites, '[', c( 'latitude_dd', 'longitude_dd'))
coords <- lapply(coords, st_drop_geometry)
coords <- dplyr::bind_rows(coords)
coords <- paste(coords$latitude_dd, coords$longitude_dd,  sep = ", ")
# extract the coordinates to serve as the DESTINATION
coords <- lapply(sites, '[', c( 'latitude_dd', 'longitude_dd'))
coords <- lapply(coords, st_drop_geometry)
coords <- rbind(coords)
coords <- paste(coords$latitude_dd, coords$longitude_dd,  sep = ", ")
# extract the coordinates to serve as the DESTINATION
coords <- lapply(sites, '[', c( 'latitude_dd', 'longitude_dd'))
coords <- lapply(coords, st_drop_geometry)
coords <- do.call(rbind, coords)
coords <- paste(coords$latitude_dd, coords$longitude_dd,  sep = ", ")
roxygen2::roxygenise()
