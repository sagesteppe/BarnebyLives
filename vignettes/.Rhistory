lat = colnames(x)[grep('lat', colnames(x), ignore.case = T)] }
if(missing(long)){
long = colnames(x)[grep('long', colnames(x), ignore.case = T)] }
# remove any N | E | S | W, or for that matter other alphabetical characters
x[,long] <- gsub('[[:alpha:]]|\\s', "", x[,long])
x[,lat] <- gsub('[[:alpha:]]|\\s', "", x[,lat])
# we will need to perform this operation across every single row,
# because some people will put dms and dd in the same column...
x_spl <- split(x, f = 1:nrow(x))
dmsbyrow <- function(x, long, lat){
# test for DMS format if not supplied
suppressWarnings(
dms <- is.na( as.numeric(x[,long]) == as.numeric(parzer::parse_lon(x[,long])) ))
# convert dms to dd, or rename input columns to dd#
if(dms == T){
x$latitude_dd = parzer::parse_lat(x[,lat])
x$longitude_dd = parzer::parse_lon(x[,long])
#  x <- x[, -which(names(x) %in% c(lat, long))]
} else{
colnames(x)[which(names(x) == lat)] <- 'latitude_dd'
colnames(x)[which(names(x) == long)] <- 'longitude_dd'
}
return(x)
}
out <- lapply(x_spl, dmsbyrow, long = long, lat = lat)
x$latitude_dd <- as.numeric(x$latitude_dd)
x$longitude_dd <- as.numeric(x$longitude_dd)
# ensure the DD signs are appropriate for domain
x$latitude_dd <- abs(x$latitude_dd)
x$longitude_dd <- abs(x$longitude_dd) * -1
# now overwrite the original DMS values in our exact format
x$latitude_dms = paste0(
'N ', format_degree(parzer::pz_degree(x$latitude_dd)),
round(parzer::pz_minute(x$latitude_dd), 2),
"'", round(parzer::pz_second(x$latitude_dd), 0)
)
x$longitude_dms = paste0(
'W ', format_degree(parzer::pz_degree(x$longitude_dd)),
round(parzer::pz_minute(x$longitude_dd), 2),
"'", round(parzer::pz_second(x$longitude_dd), 0)
)
x$longitude_dms <- gsub('-', "", x$longitude_dms)
return(x)
}
fuck <- dms2dd(data1)
#' @returns dataframe(/tibble) with coordinates unambiguously labeled as being in both degress, minutes, seconds (_dms) and decimal degrees (_dd).
#' @examples
#'  coords <- data.frame(
#'   longitude_dd = runif(15, min = -120, max = -100),
#'   latitude_dd = runif(15, min = 35, max = 48)
#' )
#' coords_formatted <- dms2dd( coords )
#' head(coords_formatted)
#' colnames(coords_formatted)
#' @export
dms2dd <- function(x, lat, long, dms){
# identify columns if they were not supplied
if(missing(lat)){
lat = colnames(x)[grep('lat', colnames(x), ignore.case = T)] }
if(missing(long)){
long = colnames(x)[grep('long', colnames(x), ignore.case = T)] }
# remove any N | E | S | W, or for that matter other alphabetical characters
x[,long] <- gsub('[[:alpha:]]|\\s', "", x[,long])
x[,lat] <- gsub('[[:alpha:]]|\\s', "", x[,lat])
# we will need to perform this operation across every single row,
# because some people will put dms and dd in the same column...
x_spl <- split(x, f = 1:nrow(x))
dmsbyrow <- function(x, long, lat){
# test for DMS format if not supplied
suppressWarnings(
dms <- is.na( as.numeric(x[,long]) == as.numeric(parzer::parse_lon(x[,long])) ))
# convert dms to dd, or rename input columns to dd#
if(dms == T){
x$latitude_dd = parzer::parse_lat(x[,lat])
x$longitude_dd = parzer::parse_lon(x[,long])
#  x <- x[, -which(names(x) %in% c(lat, long))]
} else{
colnames(x)[which(names(x) == lat)] <- 'latitude_dd'
colnames(x)[which(names(x) == long)] <- 'longitude_dd'
}
return(x)
}
out <- lapply(x_spl, dmsbyrow, long = long, lat = lat)
return(out)
x$latitude_dd <- as.numeric(x$latitude_dd)
x$longitude_dd <- as.numeric(x$longitude_dd)
# ensure the DD signs are appropriate for domain
x$latitude_dd <- abs(x$latitude_dd)
x$longitude_dd <- abs(x$longitude_dd) * -1
# now overwrite the original DMS values in our exact format
x$latitude_dms = paste0(
'N ', format_degree(parzer::pz_degree(x$latitude_dd)),
round(parzer::pz_minute(x$latitude_dd), 2),
"'", round(parzer::pz_second(x$latitude_dd), 0)
)
x$longitude_dms = paste0(
'W ', format_degree(parzer::pz_degree(x$longitude_dd)),
round(parzer::pz_minute(x$longitude_dd), 2),
"'", round(parzer::pz_second(x$longitude_dd), 0)
)
x$longitude_dms <- gsub('-', "", x$longitude_dms)
return(x)
}
fuck <- dms2dd(data1)
View(fuck)
#' @returns dataframe(/tibble) with coordinates unambiguously labeled as being in both degress, minutes, seconds (_dms) and decimal degrees (_dd).
#' @examples
#'  coords <- data.frame(
#'   longitude_dd = runif(15, min = -120, max = -100),
#'   latitude_dd = runif(15, min = 35, max = 48)
#' )
#' coords_formatted <- dms2dd( coords )
#' head(coords_formatted)
#' colnames(coords_formatted)
#' @export
dms2dd <- function(x, lat, long, dms){
# identify columns if they were not supplied
if(missing(lat)){
lat = colnames(x)[grep('lat', colnames(x), ignore.case = T)] }
if(missing(long)){
long = colnames(x)[grep('long', colnames(x), ignore.case = T)] }
# remove any N | E | S | W, or for that matter other alphabetical characters
x[,long] <- gsub('[[:alpha:]]|\\s', "", x[,long])
x[,lat] <- gsub('[[:alpha:]]|\\s', "", x[,lat])
# we will need to perform this operation across every single row,
# because some people will put dms and dd in the same column...
x_spl <- split(x, f = 1:nrow(x))
dmsbyrow <- function(x, long, lat){
# test for DMS format if not supplied
suppressWarnings(
dms <- is.na( as.numeric(x[,long]) == as.numeric(parzer::parse_lon(x[,long])) ))
# convert dms to dd, or rename input columns to dd#
if(dms == T){
x$latitude_dd = parzer::parse_lat(x[,lat])
x$longitude_dd = parzer::parse_lon(x[,long])
x <- x[, -which(names(x) %in% c(lat, long))]
} else{
colnames(x)[which(names(x) == lat)] <- 'latitude_dd'
colnames(x)[which(names(x) == long)] <- 'longitude_dd'
}
return(x)
}
out <- lapply(x_spl, dmsbyrow, long = long, lat = lat)
return(out)
x$latitude_dd <- as.numeric(x$latitude_dd)
x$longitude_dd <- as.numeric(x$longitude_dd)
# ensure the DD signs are appropriate for domain
x$latitude_dd <- abs(x$latitude_dd)
x$longitude_dd <- abs(x$longitude_dd) * -1
# now overwrite the original DMS values in our exact format
x$latitude_dms = paste0(
'N ', format_degree(parzer::pz_degree(x$latitude_dd)),
round(parzer::pz_minute(x$latitude_dd), 2),
"'", round(parzer::pz_second(x$latitude_dd), 0)
)
x$longitude_dms = paste0(
'W ', format_degree(parzer::pz_degree(x$longitude_dd)),
round(parzer::pz_minute(x$longitude_dd), 2),
"'", round(parzer::pz_second(x$longitude_dd), 0)
)
x$longitude_dms <- gsub('-', "", x$longitude_dms)
return(x)
}
fuck <- dms2dd(data1)
View(fuck)
#' @returns dataframe(/tibble) with coordinates unambiguously labeled as being in both degress, minutes, seconds (_dms) and decimal degrees (_dd).
#' @examples
#'  coords <- data.frame(
#'   longitude_dd = runif(15, min = -120, max = -100),
#'   latitude_dd = runif(15, min = 35, max = 48)
#' )
#' coords_formatted <- dms2dd( coords )
#' head(coords_formatted)
#' colnames(coords_formatted)
#' @export
dms2dd <- function(x, lat, long, dms){
# identify columns if they were not supplied
if(missing(lat)){
lat = colnames(x)[grep('lat', colnames(x), ignore.case = T)] }
if(missing(long)){
long = colnames(x)[grep('long', colnames(x), ignore.case = T)] }
# remove any N | E | S | W, or for that matter other alphabetical characters
x[,long] <- gsub('[[:alpha:]]|\\s', "", x[,long])
x[,lat] <- gsub('[[:alpha:]]|\\s', "", x[,lat])
# we will need to perform this operation across every single row,
# because some people will put dms and dd in the same column...
x_spl <- split(x, f = 1:nrow(x))
dmsbyrow <- function(x, long, lat){
# test for DMS format if not supplied
suppressWarnings(
dms <- is.na( as.numeric(x[,long]) == as.numeric(parzer::parse_lon(x[,long])) ))
# convert dms to dd, or rename input columns to dd#
if(dms == T){
x$latitude_dd = parzer::parse_lat(x[,lat])
x$longitude_dd = parzer::parse_lon(x[,long])
x <- x[, -which(names(x) %in% c(lat, long))]
} else{
colnames(x)[which(names(x) == lat)] <- 'latitude_dd'
colnames(x)[which(names(x) == long)] <- 'longitude_dd'
}
return(x)
}
out <- lapply(x_spl, dmsbyrow, long = long, lat = lat) |>
data.table::rbindlist(use.names = TRUE)
return(out)
x$latitude_dd <- as.numeric(x$latitude_dd)
x$longitude_dd <- as.numeric(x$longitude_dd)
# ensure the DD signs are appropriate for domain
x$latitude_dd <- abs(x$latitude_dd)
x$longitude_dd <- abs(x$longitude_dd) * -1
# now overwrite the original DMS values in our exact format
x$latitude_dms = paste0(
'N ', format_degree(parzer::pz_degree(x$latitude_dd)),
round(parzer::pz_minute(x$latitude_dd), 2),
"'", round(parzer::pz_second(x$latitude_dd), 0)
)
x$longitude_dms = paste0(
'W ', format_degree(parzer::pz_degree(x$longitude_dd)),
round(parzer::pz_minute(x$longitude_dd), 2),
"'", round(parzer::pz_second(x$longitude_dd), 0)
)
x$longitude_dms <- gsub('-', "", x$longitude_dms)
return(x)
}
fuck <- dms2dd(data1)
#' @returns dataframe(/tibble) with coordinates unambiguously labeled as being in both degress, minutes, seconds (_dms) and decimal degrees (_dd).
#' @examples
#'  coords <- data.frame(
#'   longitude_dd = runif(15, min = -120, max = -100),
#'   latitude_dd = runif(15, min = 35, max = 48)
#' )
#' coords_formatted <- dms2dd( coords )
#' head(coords_formatted)
#' colnames(coords_formatted)
#' @export
dms2dd <- function(x, lat, long, dms){
# identify columns if they were not supplied
if(missing(lat)){
lat = colnames(x)[grep('lat', colnames(x), ignore.case = T)] }
if(missing(long)){
long = colnames(x)[grep('long', colnames(x), ignore.case = T)] }
# remove any N | E | S | W, or for that matter other alphabetical characters
x[,long] <- gsub('[[:alpha:]]|\\s', "", x[,long])
x[,lat] <- gsub('[[:alpha:]]|\\s', "", x[,lat])
# we will need to perform this operation across every single row,
# because some people will put dms and dd in the same column...
x_spl <- split(x, f = 1:nrow(x))
dmsbyrow <- function(x, long, lat){
# test for DMS format if not supplied
suppressWarnings(
dms <- is.na( as.numeric(x[,long]) == as.numeric(parzer::parse_lon(x[,long])) ))
# convert dms to dd, or rename input columns to dd#
if(dms == T){
x$latitude_dd = parzer::parse_lat(x[,lat])
x$longitude_dd = parzer::parse_lon(x[,long])
x <- x[, -which(names(x) %in% c(lat, long))]
} else{
colnames(x)[which(names(x) == lat)] <- 'latitude_dd'
colnames(x)[which(names(x) == long)] <- 'longitude_dd'
}
return(x)
}
out <- lapply(x_spl, dmsbyrow, long = long, lat = lat) |>
data.table::rbindlist(use.names = TRUE)
x$latitude_dd <- as.numeric(x$latitude_dd)
x$longitude_dd <- as.numeric(x$longitude_dd)
# ensure the DD signs are appropriate for domain
x$latitude_dd <- abs(x$latitude_dd)
x$longitude_dd <- abs(x$longitude_dd) * -1
# now overwrite the original DMS values in our exact format
x$latitude_dms = paste0(
'N ', format_degree(parzer::pz_degree(x$latitude_dd)),
round(parzer::pz_minute(x$latitude_dd), 2),
"'", round(parzer::pz_second(x$latitude_dd), 0)
)
x$longitude_dms = paste0(
'W ', format_degree(parzer::pz_degree(x$longitude_dd)),
round(parzer::pz_minute(x$longitude_dd), 2),
"'", round(parzer::pz_second(x$longitude_dd), 0)
)
x$longitude_dms <- gsub('-', "", x$longitude_dms)
return(x)
}
fuck <- dms2dd(data1)
#' @returns dataframe(/tibble) with coordinates unambiguously labeled as being in both degress, minutes, seconds (_dms) and decimal degrees (_dd).
#' @examples
#'  coords <- data.frame(
#'   longitude_dd = runif(15, min = -120, max = -100),
#'   latitude_dd = runif(15, min = 35, max = 48)
#' )
#' coords_formatted <- dms2dd( coords )
#' head(coords_formatted)
#' colnames(coords_formatted)
#' @export
dms2dd <- function(x, lat, long, dms){
# identify columns if they were not supplied
if(missing(lat)){
lat = colnames(x)[grep('lat', colnames(x), ignore.case = T)] }
if(missing(long)){
long = colnames(x)[grep('long', colnames(x), ignore.case = T)] }
# remove any N | E | S | W, or for that matter other alphabetical characters
x[,long] <- gsub('[[:alpha:]]|\\s', "", x[,long])
x[,lat] <- gsub('[[:alpha:]]|\\s', "", x[,lat])
# we will need to perform this operation across every single row,
# because some people will put dms and dd in the same column...
x_spl <- split(x, f = 1:nrow(x))
dmsbyrow <- function(x, long, lat){
# test for DMS format if not supplied
suppressWarnings(
dms <- is.na( as.numeric(x[,long]) == as.numeric(parzer::parse_lon(x[,long])) ))
# convert dms to dd, or rename input columns to dd#
if(dms == T){
x$latitude_dd = parzer::parse_lat(x[,lat])
x$longitude_dd = parzer::parse_lon(x[,long])
x <- x[, -which(names(x) %in% c(lat, long))]
} else{
colnames(x)[which(names(x) == lat)] <- 'latitude_dd'
colnames(x)[which(names(x) == long)] <- 'longitude_dd'
}
return(x)
}
x <- lapply(x_spl, dmsbyrow, long = long, lat = lat) |>
data.table::rbindlist(use.names = TRUE)
x$latitude_dd <- as.numeric(x$latitude_dd)
x$longitude_dd <- as.numeric(x$longitude_dd)
# ensure the DD signs are appropriate for domain
x$latitude_dd <- abs(x$latitude_dd)
x$longitude_dd <- abs(x$longitude_dd) * -1
# now overwrite the original DMS values in our exact format
x$latitude_dms = paste0(
'N ', format_degree(parzer::pz_degree(x$latitude_dd)),
round(parzer::pz_minute(x$latitude_dd), 2),
"'", round(parzer::pz_second(x$latitude_dd), 0)
)
x$longitude_dms = paste0(
'W ', format_degree(parzer::pz_degree(x$longitude_dd)),
round(parzer::pz_minute(x$longitude_dd), 2),
"'", round(parzer::pz_second(x$longitude_dd), 0)
)
x$longitude_dms <- gsub('-', "", x$longitude_dms)
return(x)
}
fuck <- dms2dd(data1)
View(fuck)
devtools::install_github('sagesteppe/BarnebyLives')
googledrive::drive_auth("reedbenkendorf27@gmail.com")
# read in data from the sheet to process
data <- read_sheet('1iOQBNeGqRJ3yhA-Sujas3xZ2Aw5rFkktUKv3N_e4o8M',
sheet = 'Data Entry') %>%
mutate(UNIQUEID = paste0(Primary_Collector, Collection_number)) %>%
data.frame()
time_autofill_checker <- system.time({ # has the spreadsheet software auto-incremented coordinate values?
data <- autofill_checker(data)
})
data <- dms2dd(data)
devtools::install_github('sagesteppe/BarnebyLives')
library(BarnebyLives)
data <- dms2dd(data)
library(icons)
library(fontawesome)
library(tidyverse)
file.path('BarnebyLives', 'rmarkdown')
file.path('BarnebyLives', 'rmarkdown', 'templates', 'labels', 'skeleton', 'skeleton.Rmd')
# devtools::install_github('sagesteppe/BarnebyLives')
library(BarnebyLives)
data('collection_examples')
p2libs <- .libPaths()[
grepl(paste0(version$major, '.', sub('\\..*', "", version$minor)),
.libPaths())]
file.copy(from = file.path(p2libs, folds), to =  '.')
View(collection_examples)
format_database_import(collection_examples, 'Symbiota') |>
dplyr::mutate(dplyr::across(everything(), ~ as.character(.))) |>
dplyr::mutate(across(everything(), ~ tidyr::replace_na(., '')))
format_database_import(collection_examples, 'Symbiota') |>
dplyr::mutate(dplyr::across(everything(), ~ as.character(.))) |>
dplyr::mutate(dplyr::across(everything(), ~ tidyr::replace_na(., '')))
format_database_import(collection_examples, 'Symbiota') |>
dplyr::mutate(dplyr::across(dplyr::everything(), ~ as.character(.))) |>
dplyr::mutate(dplyr::across(dplyr::everything(), ~ tidyr::replace_na(., '')))
format_database_import(collection_examples, 'Symbiota') |>
dplyr::mutate(
dplyr::across(
dplyr::everything(), ~ as.character(.)),
dplyr::across(
dplyr::everything(), ~ tidyr::replace_na(., '')))
p2libs <- .libPaths()[
grepl(paste0(version$major, '.', sub('\\..*', "", version$minor)),
.libPaths())]
p2libs
system.file('BarnebyLives')
system.file('BarnebyLives')
p2libs <- .libPaths()[
grepl(paste0(version$major, '.', sub('\\..*', "", version$minor)),
.libPaths())]
p2libs
system.file(BarnebyLives)
?system.file()
system.file(package = 'BarnebyLives')
p2libs <- .libPaths()[
grepl(paste0(version$major, '.', sub('\\..*', "", version$minor)),
.libPaths())]
p2libs
p2libs
system.file(package = 'BarnebyLives')
folds <- file.path(
'rmarkdown', 'templates', 'labels', 'skeleton', 'skeleton.Rmd')
p2libs <- system.file(package = 'BarnebyLives')
folds <- file.path(
'rmarkdown', 'templates', 'labels', 'skeleton', 'skeleton.Rmd')
purrr::walk(
.x = collection_examples$Collection_number,
~ rmarkdown::render(
input = file.path(p2libs, folds),
# the template which will be populated
output_file = file.path(p, glue::glue("{.x}.pdf")),
# the location and name for the output file.
params = list(Collection_number = {.x})
# this is what purrr will walk through, the collection numbers.
)
)
p <- '~/Documents/HerbariumLabels/raw'
purrr::walk(
.x = collection_examples$Collection_number,
~ rmarkdown::render(
input = file.path(p2libs, folds),
# the template which will be populated
output_file = file.path(p, glue::glue("{.x}.pdf")),
# the location and name for the output file.
params = list(Collection_number = {.x})
# this is what purrr will walk through, the collection numbers.
)
)
purrr::walk(
.x = collection_examples$Collection_number,
~ rmarkdown::render(
input = file.path(p2libs, folds),
# the template which will be populated
output_file = file.path(p, glue::glue("{.x}.pdf")),
# the location and name for the output file.
params = list(Collection_number = {.x})
# this is what purrr will walk through, the collection numbers.
)
)
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(dpi = 300)
knitr::opts_chunk$set(message = FALSE)
knitr::opts_chunk$set(warning = FALSE)
collection_examples
mason
TaxUnpack
p2 <- '/media/steppe/hdd/Barneby_Lives-dev/taxonomic_data' # note we have downloaded it
spp <- TaxUnpack(path = p2, continents = 'NORTHERN AMERICA')
library(BarnebyLives)
library(tidyverse)
spp <- TaxUnpack(path = p2, continents = 'NORTHERN AMERICA')
distributions <- distributions[distributions$continent == 'NORTHERN AMERICA'
& grepl('U.S.A.', distributions$region),
c('plant_name_id')] # here we select for all of the U.S.A.
abbrevs <- read.csv('/media/steppe/hdd/Barneby_Lives-dev/taxonomic_data_raw/ipni_author_abbreviations.csv')
system.file('BarnebyLives')
?system.file()
system.file(package = 'BarnebyLives')
file.path(system.file(package = 'BarnebyLives'), 'data-raw', 'ipni_author_abbreviations.csv')
trailed <- vector(mode = 'character', length = nrow(abbrevs))
trailed[grep('\\.$', abbrevs$author_abbrevation)] <- '.'
abbrevs_spaced <- sub('\\.$', '', abbrevs$author_abbrevation) # remove the trailing periods
abbrevs_notrail <- sub('\\.(?!.*\\.)', ". ",
abbrevs_spaced, perl = T) # identify the last period in the name, and add a space after it
abbrevs <- paste0(abbrevs_notrail, trailed)
#usethis::use_data(abbrevs)
write.csv(abbrevs, row.names = F, '/media/steppe/hdd/Barneby_Lives-dev/taxonomic_data/abbrevs.csv')
rm(trailed, abbrevs_notrail, abbrevs_spaced, abbrevs)
#usethis::use_data(abbrevs)
write.csv(abbrevs, row.names = F, file.path(p2, 'abbrevs.csv'))
load("/media/steppe/hdd/BarnebyLives/data/abbrevs.rda")
rm(trailed, abbrevs_notrail, abbrevs_spaced, abbrevs)
rm(spp)
p2 <- '/media/steppe/hdd/Barneby_Lives-dev/taxonomic_data' # note we have downloaded it
# to this location - this is the location where our taxonomy data will be unpacked to!
TaxUnpack(path = p2, continents = 'NORTHERN AMERICA')
library(BarnebyLives)
library(tidyverse)
p2 <- '/media/steppe/hdd/Barneby_Lives-dev/taxonomic_data' # note we have downloaded it
# to this location - this is the location where our taxonomy data will be unpacked to!
TaxUnpack(path = p2, continents = 'NORTHERN AMERICA')
abbrevs <- file.path(system.file(package = 'BarnebyLives'),
'data-raw', 'ipni_author_abbreviations.csv')
trailed <- vector(mode = 'character', length = nrow(abbrevs))
trailed[grep('\\.$', abbrevs$author_abbrevation)] <- '.'
abbrevs <- file.path(system.file(package = 'BarnebyLives'),
'data-raw', 'ipni_author_abbreviations.csv')
trailed <- vector(mode = 'character', length = nrow(abbrevs))
abbrevs
abbrevs <- read.csv(
file.path(
system.file(package = 'BarnebyLives'),
'data-raw', 'ipni_author_abbreviations.csv')
)
abbrevs <- read.csv(
file.path(
system.file(package = 'BarnebyLives'),
'data-raw', 'ipni_author_abbreviations.csv')
)
install.packages('sagesteppe/BarnebyLives')
remotes::install_github('sagesteppe/BarnebyLives')
library(BarnebyLives)
abbrevs <- read.csv(
file.path(
system.file(package = 'BarnebyLives'),
'data-raw', 'ipni_author_abbreviations.csv')
)
