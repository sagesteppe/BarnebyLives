name = c('area52', 'chill'),
latitude_dd = c(38.0697, 38.079558 ),
longitude_dd = c(-116.9984, -117.010688)
) %>%
st_as_sf(coords = c('longitude_dd', 'latitude_dd'), crs = 4326, remove = F)
SoS_gkey = Sys.getenv("Sos_gkey")
test_gq <- directions_grabber(sites, api_key = SoS_gkey)
test_gq <- get_google_directions(sites, api_key = SoS_gkey)
sites <- split(sites, f = list(sites$latitude_dd, sites$longitude_dd), drop=TRUE)
sites <- lapply(sites,  '[' , 1,)
for(i in 1:length(dir_over)){
if(dir_over[i] == '0mins from  via .'){
dir_over[i] <- 'Google will not'
dir_specific[i] <-  " give results"
} else {
dir_specific[i] <- specificDirections(test_gq[i])
}
}
dir_over <- lapply(test_gq, directions_overview) |> unlist()
test_gq <- get_google_directions(sites, api_key = SoS_gkey)
for(i in 1:length(dir_over)){
if(dir_over[i] == '0mins from  via .'){
dir_over[i] <- 'Google will not'
dir_specific[i] <-  " give results"
} else {
print(i)
#    dir_specific[i] <- specificDirections(test_gq[i])
}
}
dir_specific
for(i in 1:length(dir_over)){
if(dir_over[i] == '0mins from  via .'){
dir_over[i] <- 'Google will not'
dir_specific[i] <-  " give results"
print(i)
} else {
print(i)
#    dir_specific[i] <- specificDirections(test_gq[i])
}
}
for(i in 1:length(dir_over)){
if(dir_over[i] == '0mins from  via .'){
dir_over[i] <- 'Google will not'
dir_specific[i] <-  " give results"
print(i)
} else {
cat('cond2', i)
#    dir_specific[i] <- specificDirections(test_gq[i])
}
}
dir_specific
dir_over
dir_over <- lapply(test_gq, directions_overview) |> unlist()
if(dir_over[i] == '0mins from  via .'){
dir_specific[i] <-" give results"
} else {
dir_specific[i] <- specificDirections(test_gq[i])
}
for(i in 1:length(dir_over)){
if(dir_over[i] == '0mins from  via .'){
dir_specific[i] <-" give results"
} else {
dir_specific[i] <- specificDirections(test_gq[i])
}
}
for(i in 1:length(dir_over)){
if(dir_over[i] == '0mins from  via .'){
dir_specific[i] <-" give results"
} else {
dir_specific[i] <- specificDirections(test_gq[i])
}
}
for(i in 1:length(dir_over)){
if(dir_over[i] == '0mins from  via .'){
dir_specific[i] <-" give results"
print(i)
} else {
dir_specific[i] <- specificDirections(test_gq[i])
}
}
for(i in 1:length(dir_over)){
if(dir_over[i] == '0mins from  via .'){
dir_specific[i] <-" give results"
print(i)
} else {
print(i)
#dir_specific[i] <- specificDirections(test_gq[i])
}
}
1:length(dir_over)
for(i in 1:length(test_gq)){
if(dir_over[i] == '0mins from  via .'){
dir_specific[i] <-" give results"
print(i)
} else {
print(i)
#dir_specific[i] <- specificDirections(test_gq[i])
}
}
dir_over
dir_over[i] == '0mins from  via .'
for(i in 1:length(test_gq)){
if(dir_over[i] == '0mins from  via .'){
dir_specific[i] <-" give results"
cat(dir_over, i)
} else {
print(i)
#dir_specific[i] <- specificDirections(test_gq[i])
}
}
for(i in 1:length(test_gq)){
if(dir_over[i] == '0mins from  via .'){
dir_specific[i] <-" give results"
cat(dir_over, i)
} else {
cat(dir_over, i)
#dir_specific[i] <- specificDirections(test_gq[i])
}
}
for(i in 1:length(test_gq)){
if(dir_over[i] == '0mins from  via .'){
dir_specific[i] <-" give results"
cat('fuck', i)
} else {
cat(dir_over, i)
#dir_specific[i] <- specificDirections(test_gq[i])
}
}
for(i in 1:length(test_gq[1])){
if(dir_over[i] == '0mins from  via .'){
dir_specific[i] <-" give results"
cat('fuck', i)
} else {
cat(dir_over, i)
#dir_specific[i] <- specificDirections(test_gq[i])
}
}
for(i in 1:length(test_gq[2])){
if(dir_over[i] == '0mins from  via .'){
dir_specific[i] <-" give results"
cat('fuck', i)
} else {
cat(dir_over, i)
#dir_specific[i] <- specificDirections(test_gq[i])
}
}
for(i in 1:length(test_gq[2])){
if(dir_over[i] == '0mins from  via .'){
dir_specific[i] <-" give results"
cat('fuck', i)
} else {
cat(dir_over, i)
#dir_specific[i] <- specificDirections(test_gq[i])
}
}
for(i in 2:length(test_gq[2])){
if(dir_over[i] == '0mins from  via .'){
dir_specific[i] <-" give results"
cat('fuck', i)
} else {
cat(dir_over, i)
#dir_specific[i] <- specificDirections(test_gq[i])
}
}
if(dir_over == '0mins from  via .')
if(dir_over == '0mins from  via .')['fuck you']
if(dir_over == '0mins from  via .'){'fuck you'}
if(dir_over == '0mins from  via .'){'fuck you'} } else {'fuck me'}
}
for (i in 1:length(test_gq)){
if(dir_over == '0mins from  via .'){'fuck you'} } else {'fuck me'}
for (i in 1:length(test_gq)){
if(dir_over == '0mins from  via .'){'fuck you'}  else {'fuck me'}
}
for (i in 1:length(test_gq)){
if(dir_over[i] == '0mins from  via .'){'fuck you'}  else {'fuck me'}
}
for (i in 1:length(test_gq)){
if(dir_over[i] == '0mins from  via .'){print('fuck you')}  else {print('fuck me')}
}
1:length(test_gq)
dir_over[1]
dir_over[2]
for (i in 1:seq(test_gq)){
if(dir_over[i] == '0mins from  via .'){print('fuck you')}  else {print('fuck me')}
}
1:seq(test_gq)
seq(test_gq)
for (i in seq(test_gq)){
if(dir_over[i] == '0mins from  via .'){print('fuck you')}  else {print('fuck me')}
}
for (i in seq(test_gq)){
if(dir_over[i] == '0mins from  via .'){
dir_specific[i] <-" give results"
cat('fuck', i)
} else {
cat(dir_over, i)
#dir_specific[i] <- specificDirections(test_gq[i])
}
}
rm(dir_specific)
for (i in seq(test_gq)){
if(dir_over[i] == '0mins from  via .'){
dir_specific[i] <-" give results"
cat('fuck', i)
} else {
cat(dir_over, i)
dir_specific[i] <- specificDirections(test_gq[i])
}
}
dir_specific <- vector(mode = 'list', length = length(test_gq))
for (i in seq(test_gq)){
if(dir_over[i] == '0mins from  via .'){
dir_specific[i] <-" give results"
cat('fuck', i)
} else {
cat(dir_over, i)
dir_specific[i] <- specificDirections(test_gq[i])
}
}
for (i in seq(test_gq)){
if(dir_over[i] == '0mins from  via .'){
dir_specific[i] <-" give results"
} else {
dir_specific[i] <- specificDirections(test_gq[i])
}
}
for (i in seq(test_gq)){
if(dir_over[i] == '0mins from  via .'){
dir_specific[i] <-" give results"
} else {
#    dir_specific[i] <- specificDirections(test_gq[i])
}
}
View(dir_specific)
specificDirections(test_gq[[2]])
specificDirections(test_gq[2])
specificDirections(test_gq)
View(test_gq)
t <- test_gq[1]
specificDirections(t)
View(test_gq)
View(test_gq[["Bishop, California"]][["routes"]][["legs"]][[1]][["steps"]][[1]][["distance"]])
for (i in seq(test_gq)){
if(dir_over[i] == '0mins from  via .'){
dir_specific[i] <-" give results"
} else {
dir_specific[i] <- specificDirections(test_gq[[i]])
}
}
dir_specific <- vector(mode = 'list', length = length(test_gq))
for (i in seq(test_gq)){
if(dir_over[i] == '0mins from  via .'){
dir_specific[i] <-" give results"
} else {
dir_specific[i] <- specificDirections(test_gq[[i]])
}
}
View(dir_specific)
ir_specific <- unlist(dir_specific)
#' Have Google maps help you write directions to a site
#'
#' This function helps users write directions to a site which is somewhat near roads.
#' @param x an sf/tibble/data frame of locations
#' @param api_key a Google developer api key for use with googleway
#' @examples # see package vignette
#' @export
directions_grabber <- function(x, api_key){
# identify unique sites
sites <- split(x, f = list(x$latitude_dd, x$longitude_dd), drop=TRUE)
sites <- lapply(sites,  '[' , 1,)
# gather results from API
test_gq <- get_google_directions(sites, api_key = SoS_gkey)
# extract an overview of the directions as well as the specifics
dir_over <- lapply(test_gq, directions_overview) |> unlist()
dir_specific <- vector(mode = 'list', length = length(test_gq))
for (i in seq(test_gq)){ # some areas google says NO! to, handle them here.
if(dir_over[i] == '0mins from  via .'){
dir_specific[i] <-" give results"
} else {
dir_specific[i] <- specificDirections(test_gq[[i]])
}
}
dir_specific <- unlist(dir_specific)
sites_out <- do.call(rbind, sites)
sites_out <- sites_out[, c('latitude_dd', 'longitude_dd')]
sites_out <- sf::st_drop_geometry(sites_out)
sites_out$Directions_BL = paste(dir_over, dir_specific)
out <- dplyr::left_join(x,
sites_out, by = c('latitude_dd', 'longitude_dd')) |>
dplyr::relocate(Directions_BL, .before = geometry)
return(out)
}
sites <- data.frame(
name = c('area52', 'chill'),
latitude_dd = c(38.0697, 38.079558 ),
longitude_dd = c(-116.9984, -117.010688)
) %>%
st_as_sf(coords = c('longitude_dd', 'latitude_dd'), crs = 4326, remove = F)
#' Have Google maps help you write directions to a site
#'
#' This function helps users write directions to a site which is somewhat near roads.
#' @param x an sf/tibble/data frame of locations
#' @param api_key a Google developer api key for use with googleway
#' @examples # see package vignette
#' @export
directions_grabber <- function(x, api_key){
# identify unique sites
sites <- split(x, f = list(x$latitude_dd, x$longitude_dd), drop=TRUE)
sites <- lapply(sites,  '[' , 1,)
# gather results from API
test_gq <- get_google_directions(sites, api_key = SoS_gkey)
# extract an overview of the directions as well as the specifics
dir_over <- lapply(test_gq, directions_overview) |> unlist()
dir_specific <- vector(mode = 'list', length = length(test_gq))
for (i in seq(test_gq)){ # some areas google says NO! to, handle them here.
if(dir_over[i] == '0mins from  via .'){
dir_specific[i] <-" give results"
} else {
dir_specific[i] <- specificDirections(test_gq[[i]])
}
}
dir_specific <- unlist(dir_specific)
sites_out <- do.call(rbind, sites)
sites_out <- sites_out[, c('latitude_dd', 'longitude_dd')]
sites_out <- sf::st_drop_geometry(sites_out)
sites_out$Directions_BL = paste(dir_over, dir_specific)
out <- dplyr::left_join(x,
sites_out, by = c('latitude_dd', 'longitude_dd')) |>
dplyr::relocate(Directions_BL, .before = geometry)
return(out)
}
SoS_gkey = Sys.getenv("Sos_gkey")
test_gq <- get_google_directions(sites, api_key = SoS_gkey)
#' Have Google maps help you write directions to a site
#'
#' This function helps users write directions to a site which is somewhat near roads.
#' @param x an sf/tibble/data frame of locations
#' @param api_key a Google developer api key for use with googleway
#' @examples # see package vignette
#' @export
directions_grabber <- function(x, api_key){
# identify unique sites
sites <- split(x, f = list(x$latitude_dd, x$longitude_dd), drop=TRUE)
sites <- lapply(sites,  '[' , 1,)
# gather results from API
test_gq <- get_google_directions(sites, api_key = SoS_gkey)
# extract an overview of the directions as well as the specifics
dir_over <- lapply(test_gq, directions_overview) |> unlist()
dir_specific <- vector(mode = 'list', length = length(test_gq))
for (i in seq(test_gq)){ # some areas google says NO! to, handle them here.
if(dir_over[i] == '0mins from  via .'){
dir_specific[i] <-" give results"
} else {
dir_specific[i] <- specificDirections(test_gq[[i]])
}
}
dir_specific <- unlist(dir_specific)
sites_out <- do.call(rbind, sites)
#  sites_out <- sites_out[, c('latitude_dd', 'longitude_dd')]
#  sites_out <- sf::st_drop_geometry(sites_out)
#  sites_out$Directions_BL = paste(dir_over, dir_specific)
#  out <- dplyr::left_join(x,
#                          sites_out, by = c('latitude_dd', 'longitude_dd')) |>
#    dplyr::relocate(Directions_BL, .before = geometry)
return(sites_out)
}
test_gq <- get_google_directions(sites, api_key = SoS_gkey)
#' Have Google maps help you write directions to a site
#'
#' This function helps users write directions to a site which is somewhat near roads.
#' @param x an sf/tibble/data frame of locations
#' @param api_key a Google developer api key for use with googleway
#' @examples # see package vignette
#' @export
directions_grabber <- function(x, api_key){
# identify unique sites
sites <- split(x, f = list(x$latitude_dd, x$longitude_dd), drop=TRUE)
sites <- lapply(sites,  '[' , 1,)
# gather results from API
test_gq <- get_google_directions(sites, api_key = SoS_gkey)
# extract an overview of the directions as well as the specifics
dir_over <- lapply(test_gq, directions_overview) |> unlist()
dir_specific <- vector(mode = 'list', length = length(test_gq))
for (i in seq(test_gq)){ # some areas google says NO! to, handle them here.
if(dir_over[i] == '0mins from  via .'){
dir_specific[i] <-" give results"
} else {
dir_specific[i] <- specificDirections(test_gq[[i]])
}
}
dir_specific <- unlist(dir_specific)
return(dir_specific)
sites_out <- do.call(rbind, sites)
#  sites_out <- sites_out[, c('latitude_dd', 'longitude_dd')]
#  sites_out <- sf::st_drop_geometry(sites_out)
#  sites_out$Directions_BL = paste(dir_over, dir_specific)
#  out <- dplyr::left_join(x,
#                          sites_out, by = c('latitude_dd', 'longitude_dd')) |>
#    dplyr::relocate(Directions_BL, .before = geometry)
#  return(out)
}
test_gq <- get_google_directions(sites, api_key = SoS_gkey)
test_gq <- directions_grabber(sites, api_key = SoS_gkey)
test_gq
#' Have Google maps help you write directions to a site
#'
#' This function helps users write directions to a site which is somewhat near roads.
#' @param x an sf/tibble/data frame of locations
#' @param api_key a Google developer api key for use with googleway
#' @examples # see package vignette
#' @export
directions_grabber <- function(x, api_key){
# identify unique sites
sites <- split(x, f = list(x$latitude_dd, x$longitude_dd), drop=TRUE)
sites <- lapply(sites,  '[' , 1,)
# gather results from API
test_gq <- get_google_directions(sites, api_key = SoS_gkey)
# extract an overview of the directions as well as the specifics
dir_over <- lapply(test_gq, directions_overview) |> unlist()
dir_specific <- vector(mode = 'list', length = length(test_gq))
for (i in seq(test_gq)){ # some areas google says NO! to, handle them here.
if(dir_over[i] == '0mins from  via .'){
dir_specific[i] <-" give results"
} else {
dir_specific[i] <- specificDirections(test_gq[[i]])
}
}
dir_specific <- unlist(dir_specific)
return(dir_specific)
sites_out <- do.call(rbind, sites)
sites_out <- sites_out[, c('latitude_dd', 'longitude_dd')]
sites_out <- sf::st_drop_geometry(sites_out)
sites_out$Directions_BL = paste(dir_over, dir_specific)
out <- dplyr::left_join(x,
sites_out, by = c('latitude_dd', 'longitude_dd')) |>
dplyr::relocate(Directions_BL, .before = geometry)
return(out)
}
test_gq <- directions_grabber(sites, api_key = SoS_gkey)
test_gq
#' Have Google maps help you write directions to a site
#'
#' This function helps users write directions to a site which is somewhat near roads.
#' @param x an sf/tibble/data frame of locations
#' @param api_key a Google developer api key for use with googleway
#' @examples # see package vignette
#' @export
directions_grabber <- function(x, api_key){
# identify unique sites
sites <- split(x, f = list(x$latitude_dd, x$longitude_dd), drop=TRUE)
sites <- lapply(sites,  '[' , 1,)
# gather results from API
test_gq <- get_google_directions(sites, api_key = SoS_gkey)
# extract an overview of the directions as well as the specifics
dir_over <- lapply(test_gq, directions_overview) |> unlist()
dir_specific <- vector(mode = 'list', length = length(test_gq))
for (i in seq(test_gq)){ # some areas google says NO! to, handle them here.
if(dir_over[i] == '0mins from  via .'){
dir_specific[i] <-" give results"
} else {
dir_specific[i] <- specificDirections(test_gq[[i]])
}
}
dir_specific <- unlist(dir_specific)
sites_out <- do.call(rbind, sites)
sites_out <- sites_out[, c('latitude_dd', 'longitude_dd')]
sites_out <- sf::st_drop_geometry(sites_out)
sites_out$Directions_BL = paste(dir_over, dir_specific)
out <- dplyr::left_join(x,
sites_out, by = c('latitude_dd', 'longitude_dd')) |>
dplyr::relocate(Directions_BL, .before = geometry)
return(out)
}
test_gq <- directions_grabber(sites, api_key = SoS_gkey)
test_gq
#' Have Google maps help you write directions to a site
#'
#' This function helps users write directions to a site which is somewhat near roads.
#' @param x an sf/tibble/data frame of locations
#' @param api_key a Google developer api key for use with googleway
#' @examples # see package vignette
#' @export
directions_grabber <- function(x, api_key){
# identify unique sites
sites <- split(x, f = list(x$latitude_dd, x$longitude_dd), drop=TRUE)
sites <- lapply(sites,  '[' , 1,)
# gather results from API
test_gq <- get_google_directions(sites, api_key = SoS_gkey)
# extract an overview of the directions as well as the specifics
dir_over <- lapply(test_gq, directions_overview) |> unlist()
dir_specific <- vector(mode = 'list', length = length(test_gq))
for (i in seq(test_gq)){ # some areas google says NO! to, handle them here.
if(dir_over[i] == '0mins from  via .'){
dir_over[i] <- 'Google will not'
dir_specific[i] <-" give results"
} else {
dir_specific[i] <- specificDirections(test_gq[[i]])
}
}
dir_specific <- unlist(dir_specific)
sites_out <- do.call(rbind, sites)
sites_out <- sites_out[, c('latitude_dd', 'longitude_dd')]
sites_out <- sf::st_drop_geometry(sites_out)
sites_out$Directions_BL = paste(dir_over, dir_specific)
out <- dplyr::left_join(x,
sites_out, by = c('latitude_dd', 'longitude_dd')) |>
dplyr::relocate(Directions_BL, .before = geometry)
return(out)
}
test_gq <- directions_grabber(sites, api_key = SoS_gkey)
test_gq
