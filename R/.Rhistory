devtools::install_github('sagesteppe/BarnebyLives', force = TRUE)
devtools::install_github(BarnebyLives)
devtools::install_github('sagesteppe:BarnebyLives')
devtools::install_github('sagesteppe/BarnebyLives')
install.packages('badger')
devtools::install_github('sagesteppe/BarnebyLives', force = TRUE)
setwd('/media/steppe/hdd/BL_sandbox/geodata_raw')
download_data(path = '/media/steppe/hdd/BL_sandbox')
library(BarnebyLives)
library(googlesheets4)
library(textclean)
# devtools::install_github('sagesteppe/BarnebyLives', force = TRUE)
library(tidyverse)
download_data(path = '/media/steppe/hdd/BL_sandbox')
download_data(path = '/media/steppe/hdd/BL_sandbox/geodata_raw')
# I am using R markdown so want to be really sure save data to the correct location
download_data(path = '/media/steppe/hdd/BL_sandbox/geodata_raw')
allotments_dl <- function(path){ # works
fp <- file.path(path, 'USFSAllotments.zip')
if(fp){
message('Product `USFSAllotments` already downloaded. Skipping.')} else{
URL <- "https://data.fs.usda.gov/geodata/edw/edw_resources/shp/S_USA.Allotment.zip"
httr::GET(URL,
httr::write_disk(fp, overwrite = TRUE))
}
fp <- file.path(path, 'BLMAllotments.zip')
if(fp){
message('Product `BLMAllotments` already downloaded. Skipping.')} else{
URL <- "https://gbp-blm-egis.hub.arcgis.com/api/download/v1/items/0882acf7eada4b3bafee4dd673fbe8a0/shapefile?layers=1"
httr::GET(URL,
httr::write_disk(path = fp, overwrite = TRUE))
}
}
#' Download the data required to establish a BL instance
#'
#' @description this function will download the data which are required to set up an instance of BarnebyLives.
#' These data must then be processed by the `data_process` function to set up the directory structures appropriately.
#' Note that the function will test if the data already exist in the location, if they do they will not be downloaded again.
#' @param path The root directory to save all the data in. Please specify a location, we suggest you make a directory for this.
#' If not specified will default to your working directory.
#' @examples \donttest{
#' # setwd('/media/steppe/hdd/BL_sandbox/geodata_raw')
#' # download_data(path = '/media/steppe/hdd/BL_sandbox')
#' }
#' @export
download_data <- function(path){
if(missing(path)){path <- '.'}
WCVP_dl(path)
counties_dl(path)
GMBA_dl(path)
allotments_dl(path)
GNIS_dl(path)
PLSS_dl(path) # a slow one !
SGMC_dl(path) # hardly ever works
}
# setwd('/media/steppe/hdd/BL_sandbox/geodata_raw')
# download_data()
WCVP_dl <- function(path){  #  WORKS
if(file.exists('WCVP.zip')){
message('Product `WCVP` already downloaded. Skipping.')} else{
URL <- 'https://sftp.kew.org/pub/data-repositories/WCVP/wcvp_dwca.zip'
httr::GET(URL,
httr::write_disk(path = file.path(path, 'WCVP.zip'), overwrite = TRUE))
}
}
counties_dl <- function(path){ # WORKS
if(file.exists('Counties.zip')){
message('Product `Counties` already downloaded. Skipping.')} else{
URL <- 'https://www2.census.gov/geo/tiger/TIGER2020/COUNTY/tl_2020_us_county.zip'
httr::GET(URL,
httr::write_disk(path = file.path(path, 'Counties.zip'), overwrite = TRUE))
}
}
GMBA_dl <- function(path){ # WORKS
if(file.exists('GMBA.zip')){
message('Product `GMBA` already downloaded. Skipping.')} else{
URL <- 'https://data.earthenv.org/mountains/standard/GMBA_Inventory_v2.0_standard_basic.zip'
httr::GET(URL,
httr::write_disk(path = file.path(path, 'GMBA.zip'), overwrite = TRUE))
}
}
PLSS_dl <- function(path){ # WORKS
fp <- file.path(path, 'PLSS.zip')
if(file.exists(fp)){
message('Product `PLSS` already downloaded. Skipping.')} else{
cap_speed <- httr::config(max_recv_speed_large = 10000)
URL <- 'https://blm-egis.maps.arcgis.com/sharing/rest/content/items/283939812bc34c11bad695a1c8152faf/data'
message("PLSS - this one will take a minute (3.6 GB)")
httr::GET(URL, httr::progress(), cap_speed,
httr::write_disk(fp))
}
}
allotments_dl <- function(path){ # works
fp <- file.path(path, 'USFSAllotments.zip')
if(fp){
message('Product `USFSAllotments` already downloaded. Skipping.')} else{
URL <- "https://data.fs.usda.gov/geodata/edw/edw_resources/shp/S_USA.Allotment.zip"
httr::GET(URL,
httr::write_disk(fp, overwrite = TRUE))
}
fp <- file.path(path, 'BLMAllotments.zip')
if(fp){
message('Product `BLMAllotments` already downloaded. Skipping.')} else{
URL <- "https://gbp-blm-egis.hub.arcgis.com/api/download/v1/items/0882acf7eada4b3bafee4dd673fbe8a0/shapefile?layers=1"
httr::GET(URL,
httr::write_disk(path = fp, overwrite = TRUE))
}
}
# I am using R markdown so want to be really sure save data to the correct location
download_data(path = '/media/steppe/hdd/BL_sandbox/geodata_raw')
GMBA_dl <- function(path){ # WORKS
fp <- file.path(path, 'GMBA.zip')
if(file.exists(fp)){
message('Product `GMBA` already downloaded. Skipping.')} else{
URL <- 'https://data.earthenv.org/mountains/standard/GMBA_Inventory_v2.0_standard_basic.zip'
httr::GET(URL, httr::write_disk(path = fp, overwrite = TRUE))
}
}
SGMC_dl <- function(path){ # WORKS
fp <- file.path(path, 'SGMC.zip')
if(file.exists(fp)){
message('Product `SGMC` already downloaded. Skipping.')} else{
URL <- 'https://www.sciencebase.gov/catalog/file/get/5888bf4fe4b05ccb964bab9d?name=USGS_SGMC_Geodatabase.zip'
message("This website is slow.\nWe recommend downloading the geodata by hand. https://mrdata.usgs.gov/geology/state/")
httr::GET(URL, httr::progress(), httr::write_disk(path = fp, overwrite = TRUE))
}
}
GNIS_dl <- function(path){ # WORKS
fp <- file.path(path, 'GNIS.zip')
if(file.exists('GNIS.zip')){
message('Product `GNIS` already downloaded. Skipping.')} else{
aws.s3::save_object(
file = fp,
object = "s3://prd-tnm/StagedProducts/GeographicNames/DomesticNames/DomesticNames_AllStates_Text.zip",
bucket = "s3://prd-tnm/",
region = "us-west-2",
show_progress = TRUE
)}
}
#' @description this function will download the data which are required to set up an instance of BarnebyLives.
#' These data must then be processed by the `data_process` function to set up the directory structures appropriately.
#' Note that the function will test if the data already exist in the location, if they do they will not be downloaded again.
#' @param path The root directory to save all the data in. Please specify a location, we suggest you make a directory for this.
#' If not specified will default to your working directory.
#' @examples \donttest{
#' # setwd('/media/steppe/hdd/BL_sandbox/geodata_raw')
#' # download_data(path = '/media/steppe/hdd/BL_sandbox')
#' }
#' @export
download_data <- function(path){
if(missing(path)){path <- '.'}
WCVP_dl(path)
counties_dl(path)
GMBA_dl(path)
allotments_dl(path)
GNIS_dl(path)
PLSS_dl(path) # a slow one !
SGMC_dl(path) # hardly ever works
}
# setwd('/media/steppe/hdd/BL_sandbox/geodata_raw')
# download_data()
WCVP_dl <- function(path){  #  WORKS
fp <- file.path(path, 'WCVP.zip')
if(file.exists(fp)){
message('Product `WCVP` already downloaded. Skipping.')} else{
URL <- 'https://sftp.kew.org/pub/data-repositories/WCVP/wcvp_dwca.zip'
httr::GET(URL, httr::write_disk(path = fp, overwrite = TRUE))
}
}
counties_dl <- function(path){ # WORKS
fp <- file.path(path, 'Counties.zip')
if(file.exists(fp)){
message('Product `Counties` already downloaded. Skipping.')} else{
URL <- 'https://www2.census.gov/geo/tiger/TIGER2020/COUNTY/tl_2020_us_county.zip'
httr::GET(URL, httr::write_disk(path = fp, overwrite = TRUE))
}
}
GMBA_dl <- function(path){ # WORKS
fp <- file.path(path, 'GMBA.zip')
if(file.exists(fp)){
message('Product `GMBA` already downloaded. Skipping.')} else{
URL <- 'https://data.earthenv.org/mountains/standard/GMBA_Inventory_v2.0_standard_basic.zip'
httr::GET(URL, httr::write_disk(path = fp, overwrite = TRUE))
}
}
PLSS_dl <- function(path){ # WORKS
fp <- file.path(path, 'PLSS.zip')
if(file.exists(fp)){
message('Product `PLSS` already downloaded. Skipping.')} else{
URL <- 'https://blm-egis.maps.arcgis.com/sharing/rest/content/items/283939812bc34c11bad695a1c8152faf/data'
message("PLSS - this one will take a minute (3.6 GB)")
httr::GET(URL, httr::progress(), httr::write_disk(fp))
}
}
allotments_dl <- function(path){ # works
fp <- file.path(path, 'USFSAllotments.zip')
if(fp){
message('Product `USFSAllotments` already downloaded. Skipping.')} else{
URL <- "https://data.fs.usda.gov/geodata/edw/edw_resources/shp/S_USA.Allotment.zip"
httr::GET(URL,
httr::write_disk(fp, overwrite = TRUE))
}
fp <- file.path(path, 'BLMAllotments.zip')
if(fp){
message('Product `BLMAllotments` already downloaded. Skipping.')} else{
URL <- "https://gbp-blm-egis.hub.arcgis.com/api/download/v1/items/0882acf7eada4b3bafee4dd673fbe8a0/shapefile?layers=1"
httr::GET(URL,
httr::write_disk(path = fp, overwrite = TRUE))
}
}
# we can grab states by using their abbreviations...
# 'https://mrdata.usgs.gov/geology/state/shp/IA.zip'
SGMC_dl <- function(path){ # WORKS
fp <- file.path(path, 'SGMC.zip')
if(file.exists(fp)){
message('Product `SGMC` already downloaded. Skipping.')} else{
URL <- 'https://www.sciencebase.gov/catalog/file/get/5888bf4fe4b05ccb964bab9d?name=USGS_SGMC_Geodatabase.zip'
message("This website is slow.\nWe recommend downloading the geodata by hand. https://mrdata.usgs.gov/geology/state/")
httr::GET(URL, httr::progress(), httr::write_disk(path = fp, overwrite = TRUE))
}
}
GNIS_dl <- function(path){ # WORKS
fp <- file.path(path, 'GNIS.zip')
if(file.exists('GNIS.zip')){
message('Product `GNIS` already downloaded. Skipping.')} else{
aws.s3::save_object(
file = fp,
object = "s3://prd-tnm/StagedProducts/GeographicNames/DomesticNames/DomesticNames_AllStates_Text.zip",
bucket = "s3://prd-tnm/",
region = "us-west-2",
show_progress = TRUE
)}
}
PAD_dl <- function(path){ # this is the wrong path
if(file.exists('PAD.zip')){
message('Product `PAD` already downloaded. Skipping.')} else{
aws.s3::save_object(
file = file.path(path, 'GNIS.zip'),
object = "s3://prd-tnm/StagedProducts/GeographicNames/DomesticNames/DomesticNames_AllStates_Text.zip",
bucket = "s3://prd-tnm/",
region = "us-west-2",
show_progress = TRUE
)}
}
#' @description this function will download the data which are required to set up an instance of BarnebyLives.
#' These data must then be processed by the `data_process` function to set up the directory structures appropriately.
#' Note that the function will test if the data already exist in the location, if they do they will not be downloaded again.
#' @param path The root directory to save all the data in. Please specify a location, we suggest you make a directory for this.
#' If not specified will default to your working directory.
#' @examples \donttest{
#' # setwd('/media/steppe/hdd/BL_sandbox/geodata_raw')
#' # download_data(path = '/media/steppe/hdd/BL_sandbox')
#' }
#' @export
download_data <- function(path){
if(missing(path)){path <- '.'}
WCVP_dl(path)
counties_dl(path)
GMBA_dl(path)
allotments_dl(path)
GNIS_dl(path)
PLSS_dl(path) # a slow one !
SGMC_dl(path) # hardly ever works
}
# I am using R markdown so want to be really sure save data to the correct location
download_data(path = '/media/steppe/hdd/BL_sandbox/geodata_raw')
allotments_dl <- function(path){ # works
fp <- file.path(path, 'USFSAllotments.zip')
if(file.exists(fp)){
message('Product `USFSAllotments` already downloaded. Skipping.')} else{
URL <- "https://data.fs.usda.gov/geodata/edw/edw_resources/shp/S_USA.Allotment.zip"
httr::GET(URL,
httr::write_disk(fp, overwrite = TRUE))
}
fp <- file.path(path, 'BLMAllotments.zip')
if(file.exists(fp)){
message('Product `BLMAllotments` already downloaded. Skipping.')} else{
URL <- "https://gbp-blm-egis.hub.arcgis.com/api/download/v1/items/0882acf7eada4b3bafee4dd673fbe8a0/shapefile?layers=1"
httr::GET(URL,
httr::write_disk(path = fp, overwrite = TRUE))
}
}
# I am using R markdown so want to be really sure save data to the correct location
download_data(path = '/media/steppe/hdd/BL_sandbox/geodata_raw')
