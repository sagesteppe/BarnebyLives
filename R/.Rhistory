ggplot2::geom_sf(data = pts, size = 0.5) +
ggplot2::theme_void()
col_no <- sf::st_drop_geometry(pts[,collection_col])
#    fname <- file.path(path_out, 'maps', paste0('map_', col_no, '.png'))
#    ggplot2::ggsave(
#      filename =  fname, plot = p, device = 'png', dpi = 300,
#      width = 1, height = 1, units = 'in', bg = 'transparent'
#    )
}
apply(pts, MARGIN = 1, FUN = core_map_maker, path_out = path_out, political = political, collection_col = collection_col)
}
path <- '/home/sagesteppe/Documents/BL_sandbox/geodata'
library(BarnebyLives)
ce <- collection_examples[ sample(1:nrow(collection_examples), size = 5), ] |>
sf::st_as_sf(coords = c('longitude_dd', 'latitude_dd'), crs = 4326)
obbie <- map_maker(ce, path_out = 'test', path = path, collection_col = 'Collection_number')
#'
#' @description use sf to create a 20th centtury style 'dot map' which features the state
#' boundary and county lines.
#'
#' @param x an sf dataframe of coordinates to make maps for, requires collection number and spatial attributes
#' @param path_out a directory to store the map images in before merging
#' @param path a path to the directory holding the BarnebyLivesGeodata
#' @param collection_col column specify the collection number or other UNIQUE id for the collection
#' @examples # see the package vignette
#' @export
map_maker <- function(x, path_out, path, collection_col){
political <- sf::st_read(file.path(path, 'political', 'political.shp'), quiet = T)
if(sf::st_crs(x) == sf::st_crs(political)) { pts <- x } else {pts <- sf::st_transform(x, sf::st_crs(political))}
dir.create(file.path(path_out, 'maps'), recursive = TRUE, showWarnings = FALSE)
# first apply fn to all data points - and group by states.
# split by states and write them out in batches.
pts$temp_state <- sf::st_drop_geometry(sf::st_intersection(pts, political))[['STUSPS']]
# maybe bind state for temp, and then apply rowwise !!!! after filtering tabular.
core_map_maker <- function(pts, path_out, political, collection_col){
focal_state <- dplyr::filter(political, STUSPS == sf::st_drop_geometry(pts$temp_state))
p <- ggplot2::ggplot() +
ggplot2::geom_sf(data = focal_state, fill = NA, color = 'grey15') +
ggplot2::geom_sf(data = pts, size = 0.5) +
ggplot2::theme_void()
#   col_no <- sf::st_drop_geometry(pts[,collection_col])
#    fname <- file.path(path_out, 'maps', paste0('map_', col_no, '.png'))
#    ggplot2::ggsave(
#      filename =  fname, plot = p, device = 'png', dpi = 300,
#      width = 1, height = 1, units = 'in', bg = 'transparent'
#    )
}
apply(pts, MARGIN = 1, FUN = core_map_maker, path_out = path_out, political = political, collection_col = collection_col)
}
path <- '/home/sagesteppe/Documents/BL_sandbox/geodata'
library(BarnebyLives)
ce <- collection_examples[ sample(1:nrow(collection_examples), size = 5), ] |>
sf::st_as_sf(coords = c('longitude_dd', 'latitude_dd'), crs = 4326)
obbie <- map_maker(ce, path_out = 'test', path = path, collection_col = 'Collection_number')
#'
#' @description use sf to create a 20th centtury style 'dot map' which features the state
#' boundary and county lines.
#'
#' @param x an sf dataframe of coordinates to make maps for, requires collection number and spatial attributes
#' @param path_out a directory to store the map images in before merging
#' @param path a path to the directory holding the BarnebyLivesGeodata
#' @param collection_col column specify the collection number or other UNIQUE id for the collection
#' @examples # see the package vignette
#' @export
map_maker <- function(x, path_out, path, collection_col){
political <- sf::st_read(file.path(path, 'political', 'political.shp'), quiet = T)
if(sf::st_crs(x) == sf::st_crs(political)) { pts <- x } else {pts <- sf::st_transform(x, sf::st_crs(political))}
dir.create(file.path(path_out, 'maps'), recursive = TRUE, showWarnings = FALSE)
# first apply fn to all data points - and group by states.
# split by states and write them out in batches.
pts$temp_state <- sf::st_drop_geometry(sf::st_intersection(pts, political))[['STUSPS']]
# maybe bind state for temp, and then apply rowwise !!!! after filtering tabular.
core_map_maker <- function(pts, path_out, political, collection_col){
focal_state <- dplyr::filter(political, STUSPS == sf::st_drop_geometry(pts$temp_state))
#    p <- ggplot2::ggplot() +
#      ggplot2::geom_sf(data = focal_state, fill = NA, color = 'grey15') +
#      ggplot2::geom_sf(data = pts, size = 0.5) +
#      ggplot2::theme_void()
#   col_no <- sf::st_drop_geometry(pts[,collection_col])
#    fname <- file.path(path_out, 'maps', paste0('map_', col_no, '.png'))
#    ggplot2::ggsave(
#      filename =  fname, plot = p, device = 'png', dpi = 300,
#      width = 1, height = 1, units = 'in', bg = 'transparent'
#    )
}
apply(pts, MARGIN = 1, FUN = core_map_maker, path_out = path_out, political = political, collection_col = collection_col)
}
path <- '/home/sagesteppe/Documents/BL_sandbox/geodata'
library(BarnebyLives)
ce <- collection_examples[ sample(1:nrow(collection_examples), size = 5), ] |>
sf::st_as_sf(coords = c('longitude_dd', 'latitude_dd'), crs = 4326)
obbie <- map_maker(ce, path_out = 'test', path = path, collection_col = 'Collection_number')
#'
#' @description use sf to create a 20th centtury style 'dot map' which features the state
#' boundary and county lines.
#'
#' @param x an sf dataframe of coordinates to make maps for, requires collection number and spatial attributes
#' @param path_out a directory to store the map images in before merging
#' @param path a path to the directory holding the BarnebyLivesGeodata
#' @param collection_col column specify the collection number or other UNIQUE id for the collection
#' @examples # see the package vignette
#' @export
map_maker <- function(x, path_out, path, collection_col){
political <- sf::st_read(file.path(path, 'political', 'political.shp'), quiet = T)
if(sf::st_crs(x) == sf::st_crs(political)) { pts <- x } else {pts <- sf::st_transform(x, sf::st_crs(political))}
dir.create(file.path(path_out, 'maps'), recursive = TRUE, showWarnings = FALSE)
# first apply fn to all data points - and group by states.
# split by states and write them out in batches.
pts$temp_state <- sf::st_drop_geometry(sf::st_intersection(pts, political))[['STUSPS']]
# maybe bind state for temp, and then apply rowwise !!!! after filtering tabular.
core_map_maker <- function(pts, path_out, political, collection_col){
focal_state <- dplyr::filter(political, STUSPS == sf::st_drop_geometry(pts$temp_state))
p <- ggplot2::ggplot() +
ggplot2::geom_sf(data = focal_state, fill = NA, color = 'grey15') #+
#      ggplot2::geom_sf(data = pts, size = 0.5) +
#      ggplot2::theme_void()
#   col_no <- sf::st_drop_geometry(pts[,collection_col])
#    fname <- file.path(path_out, 'maps', paste0('map_', col_no, '.png'))
#    ggplot2::ggsave(
#      filename =  fname, plot = p, device = 'png', dpi = 300,
#      width = 1, height = 1, units = 'in', bg = 'transparent'
#    )
}
apply(pts, MARGIN = 1, FUN = core_map_maker, path_out = path_out, political = political, collection_col = collection_col)
}
path <- '/home/sagesteppe/Documents/BL_sandbox/geodata'
library(BarnebyLives)
ce <- collection_examples[ sample(1:nrow(collection_examples), size = 5), ] |>
sf::st_as_sf(coords = c('longitude_dd', 'latitude_dd'), crs = 4326)
obbie <- map_maker(ce, path_out = 'test', path = path, collection_col = 'Collection_number')
#'
#' @description use sf to create a 20th centtury style 'dot map' which features the state
#' boundary and county lines.
#'
#' @param x an sf dataframe of coordinates to make maps for, requires collection number and spatial attributes
#' @param path_out a directory to store the map images in before merging
#' @param path a path to the directory holding the BarnebyLivesGeodata
#' @param collection_col column specify the collection number or other UNIQUE id for the collection
#' @examples # see the package vignette
#' @export
map_maker <- function(x, path_out, path, collection_col){
political <- sf::st_read(file.path(path, 'political', 'political.shp'), quiet = T)
if(sf::st_crs(x) == sf::st_crs(political)) { pts <- x } else {pts <- sf::st_transform(x, sf::st_crs(political))}
dir.create(file.path(path_out, 'maps'), recursive = TRUE, showWarnings = FALSE)
# first apply fn to all data points - and group by states.
# split by states and write them out in batches.
pts$temp_state <- sf::st_drop_geometry(sf::st_intersection(pts, political))[['STUSPS']]
# maybe bind state for temp, and then apply rowwise !!!! after filtering tabular.
core_map_maker <- function(pts, path_out, political, collection_col){
focal_state <- dplyr::filter(political, STUSPS == sf::st_drop_geometry(pts$temp_state))
p <- ggplot2::ggplot() +
ggplot2::geom_sf(data = focal_state, fill = NA, color = 'grey15') +
ggplot2::geom_sf(data = pts, size = 0.5) +
ggplot2::theme_void()
#   col_no <- sf::st_drop_geometry(pts[,collection_col])
#    fname <- file.path(path_out, 'maps', paste0('map_', col_no, '.png'))
#    ggplot2::ggsave(
#      filename =  fname, plot = p, device = 'png', dpi = 300,
#      width = 1, height = 1, units = 'in', bg = 'transparent'
#    )
}
apply(pts, MARGIN = 1, FUN = core_map_maker, path_out = path_out, political = political, collection_col = collection_col)
}
path <- '/home/sagesteppe/Documents/BL_sandbox/geodata'
library(BarnebyLives)
ce <- collection_examples[ sample(1:nrow(collection_examples), size = 5), ] |>
sf::st_as_sf(coords = c('longitude_dd', 'latitude_dd'), crs = 4326)
obbie <- map_maker(ce, path_out = 'test', path = path, collection_col = 'Collection_number')
#'
#' @description use sf to create a 20th centtury style 'dot map' which features the state
#' boundary and county lines.
#'
#' @param x an sf dataframe of coordinates to make maps for, requires collection number and spatial attributes
#' @param path_out a directory to store the map images in before merging
#' @param path a path to the directory holding the BarnebyLivesGeodata
#' @param collection_col column specify the collection number or other UNIQUE id for the collection
#' @examples # see the package vignette
#' @export
map_maker <- function(x, path_out, path, collection_col){
political <- sf::st_read(file.path(path, 'political', 'political.shp'), quiet = T)
if(sf::st_crs(x) == sf::st_crs(political)) { pts <- x } else {pts <- sf::st_transform(x, sf::st_crs(political))}
dir.create(file.path(path_out, 'maps'), recursive = TRUE, showWarnings = FALSE)
# first apply fn to all data points - and group by states.
# split by states and write them out in batches.
pts$temp_state <- sf::st_drop_geometry(sf::st_intersection(pts, political))[['STUSPS']]
# maybe bind state for temp, and then apply rowwise !!!! after filtering tabular.
core_map_maker <- function(pts, path_out, political, collection_col){
focal_state <- dplyr::filter(political, STUSPS == sf::st_drop_geometry(pts$temp_state))
p <- ggplot2::ggplot() +
ggplot2::geom_sf(data = focal_state, fill = NA, color = 'grey15') +
#    ggplot2::geom_sf(data = pts, size = 0.5) +
ggplot2::theme_void()
col_no <- sf::st_drop_geometry(pts[,collection_col])
fname <- file.path(path_out, 'maps', paste0('map_', col_no, '.png'))
ggplot2::ggsave(
filename =  fname, plot = p, device = 'png', dpi = 300,
width = 1, height = 1, units = 'in', bg = 'transparent'
)
}
apply(pts, MARGIN = 1, FUN = core_map_maker, path_out = path_out, political = political, collection_col = collection_col)
}
path <- '/home/sagesteppe/Documents/BL_sandbox/geodata'
library(BarnebyLives)
ce <- collection_examples[ sample(1:nrow(collection_examples), size = 5), ] |>
sf::st_as_sf(coords = c('longitude_dd', 'latitude_dd'), crs = 4326)
obbie <- map_maker(ce, path_out = 'test', path = path, collection_col = 'Collection_number')
#'
#' @description use sf to create a 20th centtury style 'dot map' which features the state
#' boundary and county lines.
#'
#' @param x an sf dataframe of coordinates to make maps for, requires collection number and spatial attributes
#' @param path_out a directory to store the map images in before merging
#' @param path a path to the directory holding the BarnebyLivesGeodata
#' @param collection_col column specify the collection number or other UNIQUE id for the collection
#' @examples # see the package vignette
#' @export
map_maker <- function(x, path_out, path, collection_col){
political <- sf::st_read(file.path(path, 'political', 'political.shp'), quiet = T)
if(sf::st_crs(x) == sf::st_crs(political)) { pts <- x } else {pts <- sf::st_transform(x, sf::st_crs(political))}
dir.create(file.path(path_out, 'maps'), recursive = TRUE, showWarnings = FALSE)
# first apply fn to all data points - and group by states.
# split by states and write them out in batches.
pts$temp_state <- sf::st_drop_geometry(sf::st_intersection(pts, political))[['STUSPS']]
# maybe bind state for temp, and then apply rowwise !!!! after filtering tabular.
core_map_maker <- function(pts, path_out, political, collection_col){
focal_state <- dplyr::filter(political, STUSPS == sf::st_drop_geometry(pts$temp_state))
p <- ggplot2::ggplot() +
ggplot2::geom_sf(data = focal_state, fill = NA, color = 'grey15') +
#    ggplot2::geom_sf(data = pts, size = 0.5) +
ggplot2::theme_void()
col_no <- sf::st_drop_geometry(pts)[[collection_col]]
fname <- file.path(path_out, 'maps', paste0('map_', col_no, '.png'))
ggplot2::ggsave(
filename =  fname, plot = p, device = 'png', dpi = 300,
width = 1, height = 1, units = 'in', bg = 'transparent'
)
}
apply(pts, MARGIN = 1, FUN = core_map_maker, path_out = path_out, political = political, collection_col = collection_col)
}
path <- '/home/sagesteppe/Documents/BL_sandbox/geodata'
library(BarnebyLives)
ce <- collection_examples[ sample(1:nrow(collection_examples), size = 5), ] |>
sf::st_as_sf(coords = c('longitude_dd', 'latitude_dd'), crs = 4326)
obbie <- map_maker(ce, path_out = 'test', path = path, collection_col = 'Collection_number')
#'
#' @description use sf to create a 20th centtury style 'dot map' which features the state
#' boundary and county lines.
#'
#' @param x an sf dataframe of coordinates to make maps for, requires collection number and spatial attributes
#' @param path_out a directory to store the map images in before merging
#' @param path a path to the directory holding the BarnebyLivesGeodata
#' @param collection_col column specify the collection number or other UNIQUE id for the collection
#' @examples # see the package vignette
#' @export
map_maker <- function(x, path_out, path, collection_col){
political <- sf::st_read(file.path(path, 'political', 'political.shp'), quiet = T)
if(sf::st_crs(x) == sf::st_crs(political)) { pts <- x } else {pts <- sf::st_transform(x, sf::st_crs(political))}
dir.create(file.path(path_out, 'maps'), recursive = TRUE, showWarnings = FALSE)
# first apply fn to all data points - and group by states.
# split by states and write them out in batches.
pts$temp_state <- sf::st_drop_geometry(sf::st_intersection(pts, political))[['STUSPS']]
# maybe bind state for temp, and then apply rowwise !!!! after filtering tabular.
core_map_maker <- function(pts, path_out, political, collection_col){
focal_state <- dplyr::filter(political, STUSPS == sf::st_drop_geometry(pts$temp_state))
p <- ggplot2::ggplot() +
ggplot2::geom_sf(data = focal_state, fill = NA, color = 'grey15') +
ggplot2::geom_sf(data = pts, size = 0.5) +
ggplot2::theme_void()
col_no <- sf::st_drop_geometry(pts)[[collection_col]]
fname <- file.path(path_out, 'maps', paste0('map_', col_no, '.png'))
ggplot2::ggsave(
filename =  fname, plot = p, device = 'png', dpi = 300,
width = 1, height = 1, units = 'in', bg = 'transparent'
)
}
apply(pts, MARGIN = 1, FUN = core_map_maker, path_out = path_out, political = political, collection_col = collection_col)
}
path <- '/home/sagesteppe/Documents/BL_sandbox/geodata'
library(BarnebyLives)
ce <- collection_examples[ sample(1:nrow(collection_examples), size = 5), ] |>
sf::st_as_sf(coords = c('longitude_dd', 'latitude_dd'), crs = 4326)
obbie <- map_maker(ce, path_out = 'test', path = path, collection_col = 'Collection_number')
#'
#' @description use sf to create a 20th centtury style 'dot map' which features the state
#' boundary and county lines.
#'
#' @param x an sf dataframe of coordinates to make maps for, requires collection number and spatial attributes
#' @param path_out a directory to store the map images in before merging
#' @param path a path to the directory holding the BarnebyLivesGeodata
#' @param collection_col column specify the collection number or other UNIQUE id for the collection
#' @examples # see the package vignette
#' @export
map_maker <- function(x, path_out, path, collection_col){
political <- sf::st_read(file.path(path, 'political', 'political.shp'), quiet = T)
if(sf::st_crs(x) == sf::st_crs(political)) { pts <- x } else {pts <- sf::st_transform(x, sf::st_crs(political))}
dir.create(file.path(path_out, 'maps'), recursive = TRUE, showWarnings = FALSE)
# first apply fn to all data points - and group by states.
# split by states and write them out in batches.
pts$temp_state <- sf::st_drop_geometry(sf::st_intersection(pts, political))[['STUSPS']]
# maybe bind state for temp, and then apply rowwise !!!! after filtering tabular.
core_map_maker <- function(pts, path_out, political, collection_col){
focal_state <- dplyr::filter(political, STUSPS == sf::st_drop_geometry(pts$temp_state))
p <- ggplot2::ggplot() +
ggplot2::geom_sf(data = focal_state, fill = NA, color = 'grey15') +
ggplot2::geom_sf(data = pts) +
ggplot2::theme_void()
col_no <- sf::st_drop_geometry(pts)[[collection_col]]
fname <- file.path(path_out, 'maps', paste0('map_', col_no, '.png'))
ggplot2::ggsave(
filename =  fname, plot = p, device = 'png', dpi = 300,
width = 1, height = 1, units = 'in', bg = 'transparent'
)
}
apply(pts, MARGIN = 1, FUN = core_map_maker, path_out = path_out, political = political, collection_col = collection_col)
}
path <- '/home/sagesteppe/Documents/BL_sandbox/geodata'
library(BarnebyLives)
ce <- collection_examples[ sample(1:nrow(collection_examples), size = 5), ] |>
sf::st_as_sf(coords = c('longitude_dd', 'latitude_dd'), crs = 4326)
obbie <- map_maker(ce, path_out = 'test', path = path, collection_col = 'Collection_number')
rlang::last_trace()
#'
#' @description use sf to create a 20th centtury style 'dot map' which features the state
#' boundary and county lines.
#'
#' @param x an sf dataframe of coordinates to make maps for, requires collection number and spatial attributes
#' @param path_out a directory to store the map images in before merging
#' @param path a path to the directory holding the BarnebyLivesGeodata
#' @param collection_col column specify the collection number or other UNIQUE id for the collection
#' @examples # see the package vignette
#' @export
map_maker <- function(x, path_out, path, collection_col){
political <- sf::st_read(file.path(path, 'political', 'political.shp'), quiet = T)
if(sf::st_crs(x) == sf::st_crs(political)) { pts <- x } else {pts <- sf::st_transform(x, sf::st_crs(political))}
dir.create(file.path(path_out, 'maps'), recursive = TRUE, showWarnings = FALSE)
# first apply fn to all data points - and group by states.
# split by states and write them out in batches.
pts$temp_state <- sf::st_drop_geometry(sf::st_intersection(pts, political))[['STUSPS']]
pts <- sf::st_as_sf(pts)
# maybe bind state for temp, and then apply rowwise !!!! after filtering tabular.
core_map_maker <- function(pts, path_out, political, collection_col){
focal_state <- dplyr::filter(political, STUSPS == sf::st_drop_geometry(pts$temp_state))
return(pts)
p <- ggplot2::ggplot() +
ggplot2::geom_sf(data = focal_state, fill = NA, color = 'grey15') +
ggplot2::geom_sf(data = pts) +
ggplot2::theme_void()
col_no <- sf::st_drop_geometry(pts)[[collection_col]]
fname <- file.path(path_out, 'maps', paste0('map_', col_no, '.png'))
ggplot2::ggsave(
filename =  fname, plot = p, device = 'png', dpi = 300,
width = 1, height = 1, units = 'in', bg = 'transparent'
)
}
apply(pts, MARGIN = 1, FUN = core_map_maker,
path_out = path_out, political = political, collection_col = collection_col)
}
path <- '/home/sagesteppe/Documents/BL_sandbox/geodata'
library(BarnebyLives)
ce <- collection_examples[ sample(1:nrow(collection_examples), size = 5), ] |>
sf::st_as_sf(coords = c('longitude_dd', 'latitude_dd'), crs = 4326)
obbie <- map_maker(ce, path_out = 'test', path = path, collection_col = 'Collection_number')
View(ce)
#'
#' @description use sf to create a 20th centtury style 'dot map' which features the state
#' boundary and county lines.
#'
#' @param x an sf dataframe of coordinates to make maps for, requires collection number and spatial attributes
#' @param path_out a directory to store the map images in before merging
#' @param path a path to the directory holding the BarnebyLivesGeodata
#' @param collection_col column specify the collection number or other UNIQUE id for the collection
#' @examples # see the package vignette
#' @export
map_maker <- function(x, path_out, path, collection_col){
political <- sf::st_read(file.path(path, 'political', 'political.shp'), quiet = T)
if(sf::st_crs(x) == sf::st_crs(political)) { pts <- x } else {pts <- sf::st_transform(x, sf::st_crs(political))}
dir.create(file.path(path_out, 'maps'), recursive = TRUE, showWarnings = FALSE)
# first apply fn to all data points - and group by states.
# split by states and write them out in batches.
pts$temp_state <- sf::st_drop_geometry(sf::st_intersection(pts, political))[['STUSPS']]
pts <- sf::st_as_sf(pts)
# maybe bind state for temp, and then apply rowwise !!!! after filtering tabular.
core_map_maker <- function(pts, path_out, political, collection_col){
focal_state <- dplyr::filter(political, STUSPS == sf::st_drop_geometry(pts$temp_state))
p <- ggplot2::ggplot() +
ggplot2::geom_sf(data = focal_state, fill = NA, color = 'grey15') +
ggplot2::geom_sf(data = pts) +
ggplot2::theme_void()
col_no <- sf::st_drop_geometry(pts)[[collection_col]]
fname <- file.path(path_out, 'maps', paste0('map_', col_no, '.png'))
ggplot2::ggsave(
filename =  fname, plot = p, device = 'png', dpi = 300,
width = 1, height = 1, units = 'in', bg = 'transparent'
)
}
apply(pts, MARGIN = 1, FUN = core_map_maker,
path_out = path_out, political = political, collection_col = collection_col)
}
obbie <- map_maker(ce, path_out = 'test', path = path, collection_col = 'Collection_number')
#'
#' @description use sf to create a 20th centtury style 'dot map' which features the state
#' boundary and county lines.
#'
#' @param x an sf dataframe of coordinates to make maps for, requires collection number and spatial attributes
#' @param path_out a directory to store the map images in before merging
#' @param path a path to the directory holding the BarnebyLivesGeodata
#' @param collection_col column specify the collection number or other UNIQUE id for the collection
#' @examples # see the package vignette
#' @export
map_maker <- function(x, path_out, path, collection_col){
political <- sf::st_read(file.path(path, 'political', 'political.shp'), quiet = T)
if(sf::st_crs(x) == sf::st_crs(political)) { pts <- x } else {pts <- sf::st_transform(x, sf::st_crs(political))}
dir.create(file.path(path_out, 'maps'), recursive = TRUE, showWarnings = FALSE)
# first apply fn to all data points - and group by states.
# split by states and write them out in batches.
pts$temp_state <- sf::st_drop_geometry(sf::st_intersection(pts, political))[['STUSPS']]
# maybe bind state for temp, and then apply rowwise !!!! after filtering tabular.
core_map_maker <- function(pts, path_out, political, collection_col){
pts <- sf::st_as_sf(pts)
focal_state <- dplyr::filter(political, STUSPS == sf::st_drop_geometry(pts$temp_state))
p <- ggplot2::ggplot() +
ggplot2::geom_sf(data = focal_state, fill = NA, color = 'grey15') +
ggplot2::geom_sf(data = pts) +
ggplot2::theme_void()
col_no <- sf::st_drop_geometry(pts)[[collection_col]]
fname <- file.path(path_out, 'maps', paste0('map_', col_no, '.png'))
ggplot2::ggsave(
filename =  fname, plot = p, device = 'png', dpi = 300,
width = 1, height = 1, units = 'in', bg = 'transparent'
)
}
apply(pts, MARGIN = 1, FUN = core_map_maker,
path_out = path_out, political = political, collection_col = collection_col)
}
obbie <- map_maker(ce, path_out = 'test', path = path, collection_col = 'Collection_number')
#'
#' @description use sf to create a 20th centtury style 'dot map' which features the state
#' boundary and county lines.
#'
#' @param x an sf dataframe of coordinates to make maps for, requires collection number and spatial attributes
#' @param path_out a directory to store the map images in before merging
#' @param path a path to the directory holding the BarnebyLivesGeodata
#' @param collection_col column specify the collection number or other UNIQUE id for the collection
#' @examples # see the package vignette
#' @export
map_maker <- function(x, path_out, path, collection_col){
political <- sf::st_read(file.path(path, 'political', 'political.shp'), quiet = T)
if(sf::st_crs(x) == sf::st_crs(political)) { pts <- x } else {pts <- sf::st_transform(x, sf::st_crs(political))}
dir.create(file.path(path_out, 'maps'), recursive = TRUE, showWarnings = FALSE)
# first apply fn to all data points - and group by states.
# split by states and write them out in batches.
pts$temp_state <- sf::st_drop_geometry(sf::st_intersection(pts, political))[['STUSPS']]
# maybe bind state for temp, and then apply rowwise !!!! after filtering tabular.
core_map_maker <- function(y, path_out, political, collection_col){
y <- sf::st_as_sf(y)
focal_state <- dplyr::filter(political, STUSPS == sf::st_drop_geometry(y$temp_state))
p <- ggplot2::ggplot() +
ggplot2::geom_sf(data = focal_state, fill = NA, color = 'grey15') +
ggplot2::geom_sf(data = y) +
ggplot2::theme_void()
col_no <- sf::st_drop_geometry(y)[[collection_col]]
fname <- file.path(path_out, 'maps', paste0('map_', col_no, '.png'))
ggplot2::ggsave(
filename =  fname, plot = p, device = 'png', dpi = 300,
width = 1, height = 1, units = 'in', bg = 'transparent'
)
}
apply(pts, MARGIN = 1, FUN = core_map_maker,
path_out = path_out, political = political, collection_col = collection_col)
}
obbie <- map_maker(ce, path_out = 'test', path = path, collection_col = 'Collection_number')
#'
#' @description use sf to create a 20th centtury style 'dot map' which features the state
#' boundary and county lines.
#'
#' @param x an sf dataframe of coordinates to make maps for, requires collection number and spatial attributes
#' @param path_out a directory to store the map images in before merging
#' @param path a path to the directory holding the BarnebyLivesGeodata
#' @param collection_col column specify the collection number or other UNIQUE id for the collection
#' @examples # see the package vignette
#' @export
map_maker <- function(x, path_out, path, collection_col){
political <- sf::st_read(file.path(path, 'political', 'political.shp'), quiet = T)
if(sf::st_crs(x) == sf::st_crs(political)) { pts <- x } else {pts <- sf::st_transform(x, sf::st_crs(political))}
dir.create(file.path(path_out, 'maps'), recursive = TRUE, showWarnings = FALSE)
# first apply fn to all data points - and group by states.
# split by states and write them out in batches.
pts$temp_state <- sf::st_drop_geometry(sf::st_intersection(pts, political))[['STUSPS']]
# maybe bind state for temp, and then apply rowwise !!!! after filtering tabular.
core_map_maker <- function(y, path_out, political, collection_col){
y <- sf::st_as_sf(y)
str(y)
focal_state <- dplyr::filter(political, STUSPS == sf::st_drop_geometry(y$temp_state))
p <- ggplot2::ggplot() +
ggplot2::geom_sf(data = focal_state, fill = NA, color = 'grey15') +
ggplot2::geom_sf(data = y) +
ggplot2::theme_void()
col_no <- sf::st_drop_geometry(y)[[collection_col]]
fname <- file.path(path_out, 'maps', paste0('map_', col_no, '.png'))
ggplot2::ggsave(
filename =  fname, plot = p, device = 'png', dpi = 300,
width = 1, height = 1, units = 'in', bg = 'transparent'
)
}
apply(pts, MARGIN = 1, FUN = core_map_maker,
path_out = path_out, political = political, collection_col = collection_col)
}
path <- '/home/sagesteppe/Documents/BL_sandbox/geodata'
library(BarnebyLives)
ce <- collection_examples[ sample(1:nrow(collection_examples), size = 5), ] |>
sf::st_as_sf(coords = c('longitude_dd', 'latitude_dd'), crs = 4326)
obbie <- map_maker(ce, path_out = 'test', path = path, collection_col = 'Collection_number')
