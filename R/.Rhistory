#' @param y a variable which uniquely identifies each observation
#' @param path a path to the directory holding the BarnebyLivesGeodata
#' @examples # see the package vignette
#' @export
political_grabber <- function(x, y, path){
y_quo <- rlang::enquo(y)
x <- dplyr::select(x,
-any_of(c(
'Country', 'State', 'County', 'Mang_Name',
'Unit_Nm', 'trs', 'Allotment')))
political <- sf::st_read( file.path(path, 'political/political.shp'), quiet = T)
mountains <- sf::st_read( file.path(p2geo, 'mountains/mountains.shp'), quiet = T)
valleys <- sf::st_read( file.path(p2geo, 'valleys/valleys_11-5.shp'), quiet = T) |>
sf::st_transform(., sf::st_crs(mountains))
allotment <- sf::st_read( file.path(path, 'allotments/allotments.shp'), quiet = T)
plss <- sf::st_read( file.path(path, 'plss/plss.shp'), quiet = T)
ownership <- sf::st_read( file.path(path, 'pad/pad.shp'), quiet = T)
mountains <- dplyr::bind_rows(mountains, valleys)
# write attributes to data set
x <- sf::st_join(x, political)
x <- sf::st_join(x, allotment)
x <- sf::st_join(x, ownership)
x <- sf::st_join(x, mountains)
x_plss <- sf::st_transform(x, sf::st_crs(plss))
x_plss <- sf::st_join(x_plss, plss) |>
sf::st_drop_geometry() |>
dplyr::select(any_of(c(y, 'trs')))
x_vars <- dplyr::left_join(x, x_plss, by = y) |>
dplyr::mutate(Country = 'U.S.A.') |>
dplyr::relocate(any_of(
c('Country', 'State', 'County', 'Mountains', 'Mang_Name', 'Unit_Nm', 'trs', 'Allotment')),
.before = geometry) |>
dplyr::distinct(.keep_all = T) |>
# with large enough sample size some points fall on an exact border
dplyr::group_by( .data[[y]]) |>
dplyr::slice_head(n = 1) |>
dplyr::ungroup()
x_vars <- x_vars |>
dplyr::mutate(
Gen = paste0(
Country, ', ', State, ', ', County, ' Co., ', Mountains,
', ', Mang_Name, " ", Unit_Nm, " ", trs),
Gen = stringr::str_replace_all(Gen, "NA", ""),
Gen = stringr::str_replace_all(Gen, "  ", ""),
Gen = stringr::str_replace_all(Gen, ", ,", ","),
Gen = stringr::str_trim(Gen),
Gen = stringr::str_remove(Gen, ",$"),
.before = geometry)
return(x_vars)
rm(political, allotment, plss, ownership)
}
p2geo <- '/media/steppe/hdd/Barneby_Lives-dev/geodata'
processed <- political_grabber(processed, y = 'UNIQUEID', path = p2geo)
#' gather political site information
#'
#' @description this function grabs information on the state, county, and township of collections
#' @param x an sf data frame of collection points
#' @param y a variable which uniquely identifies each observation
#' @param path a path to the directory holding the BarnebyLivesGeodata
#' @examples # see the package vignette
#' @export
political_grabber <- function(x, y, path){
y_quo <- rlang::enquo(y)
x <- dplyr::select(x,
-any_of(c(
'Country', 'State', 'County', 'Mang_Name',
'Unit_Nm', 'trs', 'Allotment')))
political <- sf::st_read( file.path(path, 'political/political.shp'), quiet = T)
mountains <- sf::st_read( file.path(p2geo, 'mountains/mountains.shp'), quiet = T)
valleys <- sf::st_read( file.path(p2geo, 'valleys/valleys_11-5.shp'), quiet = T) |>
sf::st_transform(sf::st_crs(mountains))
allotment <- sf::st_read( file.path(path, 'allotments/allotments.shp'), quiet = T)
plss <- sf::st_read( file.path(path, 'plss/plss.shp'), quiet = T)
ownership <- sf::st_read( file.path(path, 'pad/pad.shp'), quiet = T)
mountains <- dplyr::bind_rows(mountains, valleys)
# write attributes to data set
x <- sf::st_join(x, political)
x <- sf::st_join(x, allotment)
x <- sf::st_join(x, ownership)
x <- sf::st_join(x, mountains)
x_plss <- sf::st_transform(x, sf::st_crs(plss))
x_plss <- sf::st_join(x_plss, plss) |>
sf::st_drop_geometry() |>
dplyr::select(any_of(c(y, 'trs')))
x_vars <- dplyr::left_join(x, x_plss, by = y) |>
dplyr::mutate(Country = 'U.S.A.') |>
dplyr::relocate(any_of(
c('Country', 'State', 'County', 'Mountains', 'Mang_Name', 'Unit_Nm', 'trs', 'Allotment')),
.before = geometry) |>
dplyr::distinct(.keep_all = T) |>
# with large enough sample size some points fall on an exact border
dplyr::group_by( .data[[y]]) |>
dplyr::slice_head(n = 1) |>
dplyr::ungroup()
x_vars <- x_vars |>
dplyr::mutate(
Gen = paste0(
Country, ', ', State, ', ', County, ' Co., ', Mountains,
', ', Mang_Name, " ", Unit_Nm, " ", trs),
Gen = stringr::str_replace_all(Gen, "NA", ""),
Gen = stringr::str_replace_all(Gen, "  ", ""),
Gen = stringr::str_replace_all(Gen, ", ,", ","),
Gen = stringr::str_trim(Gen),
Gen = stringr::str_remove(Gen, ",$"),
.before = geometry)
return(x_vars)
rm(political, allotment, plss, ownership)
}
processed <- political_grabber(processed, y = 'UNIQUEID', path = p2geo)
sf::st_read( file.path(p2geo, 'valleys/valleys_11-5.shp'), quiet = T) |>
sf::st_transform(sf::st_crs(mountains))
v <- sf::st_read( file.path(p2geo, 'valleys/valleys_11-5.shp'), quiet = T)
View(v)
v <- sf::st_read( file.path(p2geo, 'valleys/valleys_11-5.shp'), quiet = T) %>%
select(Valley)
mountains <- sf::st_read( file.path(p2geo, 'mountains/mountains.shp'), quiet = T)
v <- sf::st_read( file.path(p2geo, 'valleys/valleys_11-5.shp'), quiet = T) %>%
st_transform(st_crs(mountains))
v <- sf::st_read( file.path(p2geo, 'valleys/valleys_11-5.shp'), quiet = T) %>%
sf::st_transform(st_crs(mountains))
v <- sf::st_read( file.path(p2geo, 'valleys/valleys_11-5.shp'), quiet = T) %>%
sf::st_transform(sf::st_crs(mountains))
mountains
mountains <- sf::st_read( file.path(p2geo, 'mountains/mountains.shp'), quiet = T) %>%
dplyr::rename(Feaure = Mountains)
v <- sf::st_read( file.path(p2geo, 'valleys/valleys_11-5.shp'), quiet = T) %>%
sf::st_transform(sf::st_crs(mountains)) %>%
dplyr::rename(Feaure = Mountains)
mountains <- sf::st_read( file.path(p2geo, 'mountains/mountains.shp'), quiet = T) %>%
dplyr::rename(Feaure = Mountains)
v <- sf::st_read( file.path(p2geo, 'valleys/valleys_11-5.shp'), quiet = T) %>%
sf::st_transform(sf::st_crs(mountains)) %>%
dplyr::rename(Feaure = Mountains)
View(v)
View(v)
v <- sf::st_read( file.path(p2geo, 'valleys/valleys_11-5.shp'), quiet = T) %>%
sf::st_transform(sf::st_crs(mountains)) %>%
dplyr::rename(Feaure = Valley)
mountains <- bind_rows(mountains, v)
p1 <- sf::st_join(processed, mountains)
View(processed)
processed <- read_sheet('1iOQBNeGqRJ3yhA-Sujas3xZ2Aw5rFkktUKv3N_e4o8M',
sheet = 'Processed') %>%
st_as_sf(coords = c(x = 'longitude_dd',  y = 'latitude_dd'))
processed <- read_sheet('1iOQBNeGqRJ3yhA-Sujas3xZ2Aw5rFkktUKv3N_e4o8M',
sheet = 'Processed') %>%
sf::st_as_sf(coords = c(x = 'longitude_dd',  y = 'latitude_dd'))
processed <- read_sheet('1iOQBNeGqRJ3yhA-Sujas3xZ2Aw5rFkktUKv3N_e4o8M',
sheet = 'Processed') %>%
sf::st_as_sf(coords = c(x = 'longitude_dd',  y = 'latitude_dd'), crs = 4326)
p1 <- sf::st_join(processed, mountains)
mountains <- bind_rows(mountains, v) %>%
st_make_valid()
mountains <- sf::st_read( file.path(p2geo, 'mountains/mountains.shp'), quiet = T) %>%
dplyr::rename(Feaure = Mountains)
v <- sf::st_read( file.path(p2geo, 'valleys/valleys_11-5.shp'), quiet = T) %>%
sf::st_transform(sf::st_crs(mountains)) %>%
dplyr::rename(Feaure = Valley)
mountains <- bind_rows(mountains, v) %>%
sf::st_make_valid()
p1 <- sf::st_join(processed, mountains)
View(p1)
select(p1, geometry)
select(p1, Collection_number, geometry)
select(p1, Collection_number, geometry) %>%
sf::st_write(., 'points2match.shp')
v <- sf::st_read( file.path(p2geo, 'valleys/valleys_11-5.shp'), quiet = T) %>%
sf::st_transform(sf::st_crs(mountains)) %>%
dplyr::rename(Feaure = Valley)
mountains <- bind_rows(mountains, v) %>%
sf::st_make_valid()
mountains <- bind_rows(mountains, v) %>%
sf::st_make_valid()
p1 <- sf::st_join(processed, mountains)
View(p1)
processed <- read_sheet('1iOQBNeGqRJ3yhA-Sujas3xZ2Aw5rFkktUKv3N_e4o8M',
sheet = 'Processed') %>%
sf::st_as_sf(coords = c(x = 'longitude_dd',  y = 'latitude_dd'), crs = 4326)
p2geo <- '/media/steppe/hdd/Barneby_Lives-dev/geodata'
mountains <- sf::st_read( file.path(p2geo, 'mountains/mountains.shp'), quiet = T) %>%
dplyr::rename(Feaure = Mountains)
v <- sf::st_read( file.path(p2geo, 'valleys/valleys_11-5.shp'), quiet = T) %>%
sf::st_transform(sf::st_crs(mountains)) %>%
dplyr::rename(Feaure = Valley)
mountains <- bind_rows(mountains, v) %>%
sf::st_make_valid()
p1 <- sf::st_join(processed, mountains)
View(p1)
mountains <- sf::st_read( file.path(p2geo, 'mountains/mountains.shp'), quiet = T) %>%
dplyr::rename(Feaure = Mountains)
v <- sf::st_read( file.path(p2geo, 'valleys/valleys_11-5.shp'), quiet = T) %>%
sf::st_transform(sf::st_crs(mountains)) %>%
dplyr::rename(Feaure = Valley)
mountains <- bind_rows(mountains, v) %>%
sf::st_make_valid()
p1 <- sf::st_join(processed, mountains)
View(p1)
processed <- read_sheet('1iOQBNeGqRJ3yhA-Sujas3xZ2Aw5rFkktUKv3N_e4o8M',
sheet = 'Processed') %>%
sf::st_as_sf(coords = c(x = 'longitude_dd',  y = 'latitude_dd'), crs = 4326)
p2geo <- '/media/steppe/hdd/Barneby_Lives-dev/geodata'
mountains <- sf::st_read( file.path(p2geo, 'mountains/mountains.shp'), quiet = T) %>%
dplyr::rename(Feaure = Mountains)
v <- sf::st_read( file.path(p2geo, 'valleys/valleys_11-5.shp'), quiet = T) %>%
sf::st_transform(sf::st_crs(mountains)) %>%
dplyr::rename(Feaure = Valley)
mountains <- bind_rows(mountains, v) %>%
sf::st_make_valid()
p1 <- sf::st_join(processed, mountains)
View(p1)
processed <- read_sheet('1iOQBNeGqRJ3yhA-Sujas3xZ2Aw5rFkktUKv3N_e4o8M',
sheet = 'Processed') %>%
sf::st_as_sf(coords = c(x = 'longitude_dd',  y = 'latitude_dd'), crs = 4326)
p2geo <- '/media/steppe/hdd/Barneby_Lives-dev/geodata'
mountains <- sf::st_read( file.path(p2geo, 'mountains/mountains.shp'), quiet = T) %>%
dplyr::rename(Feaure = Mountains)
v <- sf::st_read( file.path(p2geo, 'valleys/valleys_11-5.shp'), quiet = T) %>%
sf::st_transform(sf::st_crs(mountains)) %>%
dplyr::rename(Feaure = Valley)
mountains <- bind_rows(mountains, v) %>%
sf::st_make_valid()
p1 <- sf::st_join(processed, mountains)
View(processed)
View(p1)
processed <- read_sheet('1iOQBNeGqRJ3yhA-Sujas3xZ2Aw5rFkktUKv3N_e4o8M',
sheet = 'Processed') %>%
sf::st_as_sf(coords = c(x = 'longitude_dd',  y = 'latitude_dd'), crs = 4326)
p2geo <- '/media/steppe/hdd/Barneby_Lives-dev/geodata'
mountains <- sf::st_read( file.path(p2geo, 'mountains/mountains.shp'), quiet = T) %>%
dplyr::rename(Feaure = Mountains)
v <- sf::st_read( file.path(p2geo, 'valleys/valleys_11-5.shp'), quiet = T) %>%
sf::st_transform(sf::st_crs(mountains)) %>%
dplyr::rename(Feaure = Valley) %>%
dplyr::select(Feature)
mountains <- sf::st_read( file.path(p2geo, 'mountains/mountains.shp'), quiet = T) %>%
dplyr::rename(Feature = Mountains)
v <- sf::st_read( file.path(p2geo, 'valleys/valleys_11-5.shp'), quiet = T) %>%
sf::st_transform(sf::st_crs(mountains)) %>%
dplyr::rename(Feature = Valley) %>%
dplyr::select(Feature)
mountains <- bind_rows(mountains, v) %>%
sf::st_make_valid()
mountains <- bind_rows(mountains, v) %>%
sf::st_make_valid()
p1 <- sf::st_join(processed, mountains)
View(p1)
#' gather political site information
#'
#' @description this function grabs information on the state, county, and township of collections
#' @param x an sf data frame of collection points
#' @param y a variable which uniquely identifies each observation
#' @param path a path to the directory holding the BarnebyLivesGeodata
#' @examples # see the package vignette
#' @export
political_grabber <- function(x, y, path){
y_quo <- rlang::enquo(y)
x <- dplyr::select(x,
-any_of(c(
'Country', 'State', 'County', 'Mang_Name',
'Unit_Nm', 'trs', 'Allotment')))
political <- sf::st_read( file.path(path, 'political/political.shp'), quiet = T)
mountains <- sf::st_read( file.path(p2geo, 'mountains/mountains.shp'), quiet = T) |>
dplyr::rename(Feature = Mountains)
valleys <- sf::st_read( file.path(p2geo, 'valleys/valleys_11-5.shp'), quiet = T) |>
sf::st_transform(sf::st_crs(mountains)) |>
dplyr::rename(Feature = Valley) |>
dplyr::select(Feature)
allotment <- sf::st_read( file.path(path, 'allotments/allotments.shp'), quiet = T)
plss <- sf::st_read( file.path(path, 'plss/plss.shp'), quiet = T)
ownership <- sf::st_read( file.path(path, 'pad/pad.shp'), quiet = T)
feature <- dplyr::bind_rows(mountains, valleys)
# write attributes to data set
x <- sf::st_join(x, political)
x <- sf::st_join(x, allotment)
x <- sf::st_join(x, ownership)
x <- sf::st_join(x, feature)
x_plss <- sf::st_transform(x, sf::st_crs(plss))
x_plss <- sf::st_join(x_plss, plss) |>
sf::st_drop_geometry() |>
dplyr::select(any_of(c(y, 'trs')))
x_vars <- dplyr::left_join(x, x_plss, by = y) |>
dplyr::mutate(Country = 'U.S.A.') |>
dplyr::relocate(any_of(
c('Country', 'State', 'County', 'Feature', 'Mang_Name', 'Unit_Nm', 'trs', 'Allotment')),
.before = geometry) |>
dplyr::distinct(.keep_all = T) |>
# with large enough sample size some points fall on an exact border
dplyr::group_by( .data[[y]]) |>
dplyr::slice_head(n = 1) |>
dplyr::ungroup()
x_vars <- x_vars |>
dplyr::mutate(
Gen = paste0(
Country, ', ', State, ', ', County, ' Co., ', Feature,
', ', Mang_Name, " ", Unit_Nm, " ", trs),
Gen = stringr::str_replace_all(Gen, "NA", ""),
Gen = stringr::str_replace_all(Gen, "  ", ""),
Gen = stringr::str_replace_all(Gen, ", ,", ","),
Gen = stringr::str_trim(Gen),
Gen = stringr::str_remove(Gen, ",$"),
.before = geometry)
return(x_vars)
rm(political, allotment, plss, ownership)
}
processed <- read_sheet('1iOQBNeGqRJ3yhA-Sujas3xZ2Aw5rFkktUKv3N_e4o8M',
sheet = 'Processed') %>%
sf::st_as_sf(coords = c(x = 'longitude_dd',  y = 'latitude_dd'), crs = 4326)
p2geo <- '/media/steppe/hdd/Barneby_Lives-dev/geodata'
processed <- political_grabber(processed, y = 'UNIQUEID', path = p2geo)
rm(political, allotment, plss, ownership)
#' gather political site information
#'
#' @description this function grabs information on the state, county, and township of collections
#' @param x an sf data frame of collection points
#' @param y a variable which uniquely identifies each observation
#' @param path a path to the directory holding the BarnebyLivesGeodata
#' @examples # see the package vignette
#' @export
political_grabber <- function(x, y, path){
y_quo <- rlang::enquo(y)
x <- dplyr::select(x,
-any_of(c(
'Country', 'State', 'County', 'Mang_Name',
'Unit_Nm', 'trs', 'Allotment')))
political <- sf::st_read( file.path(path, 'political/political.shp'), quiet = T)
mountains <- sf::st_read( file.path(p2geo, 'mountains/mountains.shp'), quiet = T) |>
dplyr::rename(Feature = Mountains)
valleys <- sf::st_read( file.path(p2geo, 'valleys/valleys_11-5.shp'), quiet = T) |>
sf::st_transform(sf::st_crs(mountains)) |>
dplyr::rename(Feature = Valley) |>
dplyr::select(Feature)
allotment <- sf::st_read( file.path(path, 'allotments/allotments.shp'), quiet = T)
plss <- sf::st_read( file.path(path, 'plss/plss.shp'), quiet = T)
ownership <- sf::st_read( file.path(path, 'pad/pad.shp'), quiet = T)
feature <- dplyr::bind_rows(mountains, valleys)
# write attributes to data set
x <- sf::st_join(x, political)
x <- sf::st_join(x, allotment)
x <- sf::st_join(x, ownership)
x <- sf::st_join(x, feature)
x_plss <- sf::st_transform(x, sf::st_crs(plss))
x_plss <- sf::st_join(x_plss, plss) |>
sf::st_drop_geometry() |>
dplyr::select(any_of(c(y, 'trs')))
x_vars <- dplyr::left_join(x, x_plss, by = y) |>
dplyr::mutate(Country = 'U.S.A.') |>
dplyr::relocate(any_of(
c('Country', 'State', 'County', 'Feature', 'Mang_Name', 'Unit_Nm', 'trs', 'Allotment')),
.before = geometry) |>
dplyr::distinct(.keep_all = T) |>
# with large enough sample size some points fall on an exact border
dplyr::group_by( .data[[y]]) |>
dplyr::slice_head(n = 1) |>
dplyr::ungroup()
x_vars <- x_vars |>
dplyr::mutate(
Gen = paste0(
Country, ', ', State, ', ', County, ' Co., ', Feature,
', ', Mang_Name, " ", Unit_Nm, " ", trs),
Gen = stringr::str_replace_all(Gen, "NA", ""),
Gen = stringr::str_replace_all(Gen, "  ", ""),
Gen = stringr::str_replace_all(Gen, ", ,", ","),
Gen = stringr::str_trim(Gen),
Gen = stringr::str_remove(Gen, ",$"),
.before = geometry)
return(x_vars)
rm(political, allotment, plss, ownership)
}
processed <- political_grabber(processed, y = 'UNIQUEID', path = p2geo)
#' gather political site information
#'
#' @description this function grabs information on the state, county, and township of collections
#' @param x an sf data frame of collection points
#' @param y a variable which uniquely identifies each observation
#' @param path a path to the directory holding the BarnebyLivesGeodata
#' @examples # see the package vignette
#' @export
political_grabber <- function(x, y, path){
y_quo <- rlang::enquo(y)
x <- dplyr::select(x,
-any_of(c(
'Country', 'State', 'County', 'Mang_Name',
'Unit_Nm', 'trs', 'Allotment')))
political <- sf::st_read( file.path(path, 'political/political.shp'), quiet = T)
mountains <- sf::st_read( file.path(p2geo, 'mountains/mountains.shp'), quiet = T) |>
dplyr::rename(Feature = Mountains)
valleys <- sf::st_read( file.path(p2geo, 'valleys/valleys_11-5.shp'), quiet = T) |>
sf::st_transform(sf::st_crs(mountains)) |>
dplyr::rename(Feature = Valley) |>
dplyr::select(Feature)
allotment <- sf::st_read( file.path(path, 'allotments/allotments.shp'), quiet = T)
plss <- sf::st_read( file.path(path, 'plss/plss.shp'), quiet = T)
ownership <- sf::st_read( file.path(path, 'pad/pad.shp'), quiet = T)
feature <- dplyr::bind_rows(mountains, valleys) |>
sf::st_make_valid()
# write attributes to data set
x <- sf::st_join(x, political)
x <- sf::st_join(x, allotment)
x <- sf::st_join(x, ownership)
x <- sf::st_join(x, feature)
x_plss <- sf::st_transform(x, sf::st_crs(plss))
x_plss <- sf::st_join(x_plss, plss) |>
sf::st_drop_geometry() |>
dplyr::select(any_of(c(y, 'trs')))
x_vars <- dplyr::left_join(x, x_plss, by = y) |>
dplyr::mutate(Country = 'U.S.A.') |>
dplyr::relocate(any_of(
c('Country', 'State', 'County', 'Feature', 'Mang_Name', 'Unit_Nm', 'trs', 'Allotment')),
.before = geometry) |>
dplyr::distinct(.keep_all = T) |>
# with large enough sample size some points fall on an exact border
dplyr::group_by( .data[[y]]) |>
dplyr::slice_head(n = 1) |>
dplyr::ungroup()
x_vars <- x_vars |>
dplyr::mutate(
Gen = paste0(
Country, ', ', State, ', ', County, ' Co., ', Feature,
', ', Mang_Name, " ", Unit_Nm, " ", trs),
Gen = stringr::str_replace_all(Gen, "NA", ""),
Gen = stringr::str_replace_all(Gen, "  ", ""),
Gen = stringr::str_replace_all(Gen, ", ,", ","),
Gen = stringr::str_trim(Gen),
Gen = stringr::str_remove(Gen, ",$"),
.before = geometry)
return(x_vars)
rm(political, allotment, plss, ownership)
}
processed <- political_grabber(processed, y = 'UNIQUEID', path = p2geo)
View(processed)
processed <- select(processed, -Feature, -Mountain)
processed <- select(processed, -Feature, -Mountains)
write_sheet('1iOQBNeGqRJ3yhA-Sujas3xZ2Aw5rFkktUKv3N_e4o8M',
sheet = 'Processed', data = processed)
processed <- select(processed, -Feature, -Mountains) %>%
sf::st_drop_geometry() %>%
select(-geometry)
processed <- processed %>%
#select(processed, -Feature, -Mountains) %>%
sf::st_drop_geometry() %>%
select(-geometry)
processed <- processed %>%
#select(processed, -Feature, -Mountains) %>%
sf::st_drop_geometry()# %>%
write_sheet('1iOQBNeGqRJ3yhA-Sujas3xZ2Aw5rFkktUKv3N_e4o8M',
sheet = 'Processed', data = processed)
#' Have Google maps help you write directions to a site
#'
#' This function helps users write directions to a site which is somewhat near roads.
#' @param x an sf/tibble/data frame of locations
#' @param api_key a Google developer api key for use with googleway
#' @examples # see package vignette
#' @export
directions_grabber <- function(x, api_key){
# identify unique sites
sites <- split(x, f = list(x$latitude_dd, x$longitude_dd), drop=TRUE)
sites <- lapply(sites,  '[' , 1,)
sites_names <- do.call(rbind,  lapply(sites, '[',  'Site') )
# retrieve the site name
sitename <- paste(' Head to',
gsub('^ ', '',
gsub('^.*from', '', sites_names$Site)
)
)
# gather results from API
test_gq <- get_google_directions(sites, api_key = SoS_gkey)
# extract an overview of the directions as well as the specifics
dir_over <- lapply(test_gq, directions_overview) |> unlist()
dir_specific <- vector(mode = 'list', length = length(test_gq))
for (i in seq(test_gq)){ # some areas google says NO! to, handle them here.
if(dir_over[i] == '0mins from  via .'){
dir_over[i] <- 'Google will not'
dir_specific[i] <-"give results"
} else {
dir_specific[i] <- specificDirections(test_gq[[i]])
}
}
dir_specific <- unlist(dir_specific)
sites_out <- do.call(rbind, sites)
sites_out <- sites_out[, c('latitude_dd', 'longitude_dd')]
sites_out <- sf::st_drop_geometry(sites_out)
sites_out$Directions_BL = paste0(dir_over, ' ', dir_specific, sitename)
out <- dplyr::left_join(x,
sites_out, by = c('latitude_dd', 'longitude_dd')) |>
dplyr::relocate(Directions_BL, .before = geometry)
return(out)
}
# devtools::install_github('sagesteppe/BarnebyLives')
library(tidyverse)
library(BarnebyLives)
library(googlesheets4)
library(textclean)
googledrive::drive_auth("reedbenkendorf27@gmail.com")
# read in data from the sheet to process
data <- read_sheet('1iOQBNeGqRJ3yhA-Sujas3xZ2Aw5rFkktUKv3N_e4o8M',
sheet = 'Data Entry') %>%
mutate(UNIQUEID = paste0(Primary_Collector, Collection_number)) %>%
data.frame()
# determine whether these data have already been processed by the script, using
# a unique combination of collection name and collection code.
processed <- read_sheet('1iOQBNeGqRJ3yhA-Sujas3xZ2Aw5rFkktUKv3N_e4o8M',
sheet = 'Processed') %>%
select(Collection_number, Primary_Collector) %>%
mutate(UNIQUEID = paste0(Primary_Collector, Collection_number))
data <- filter(df, ! UNIQUEID %in% processed$UNIQUEID ) %>%
select(-UNIQUEID)
data <- dms2dd(data)
data <- autofill_checker(data)
data <- coords2sf(data)
p2geo <- '/media/steppe/hdd/Barneby_Lives-dev/geodata'
data <- political_grabber(data, y = 'UNIQUEID', path = p2geo)
devtools::install_github('sagesteppe/BarnebyLives')
