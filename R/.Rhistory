y_quo <- rlang::enquo(y)
x <- dplyr::select(x,
-any_of(c(
'Country', 'State', 'County', 'Mang_Name',
'Unit_Nm', 'trs', 'Allotment')))
political <- sf::st_read( file.path(path, 'political/political.shp'), quiet = T)
mountains <- sf::st_read( file.path(path, 'mountains/mountains.shp'), quiet = T) |>
dplyr::rename(Mountains = MapName)
allotment <- sf::st_read( file.path(path, 'allotments/allotments.shp'), quiet = T)
plss <- sf::st_read( file.path(path, 'plss/plss.shp'), quiet = T)
ownership <- sf::st_read( file.path(path, 'pad/pad.shp'), quiet = T)
# write attributes to data set
x <- sf::st_join(x, political)
x <- sf::st_join(x, allotment)
x <- sf::st_join(x, ownership)
x <- sf::st_join(x, mountains)
return(x)
x_plss <- sf::st_transform(x, sf::st_crs(plss))
x_plss <- sf::st_join(x_plss, plss) |>
sf::st_drop_geometry() |>
dplyr::select(any_of(c(y, 'trs')))
x_vars <- dplyr::left_join(x, x_plss, by = y) |>
dplyr::mutate(Country = 'U.S.A.') |>
dplyr::relocate(any_of(
c('Country', 'State', 'County', 'Mountains', 'Mang_Name', 'Unit_Nm', 'trs', 'Allotment')),
.before = geometry) |>
dplyr::distinct(.keep_all = T) |>
# with large enough sample size some points fall on an exact border
dplyr::group_by( .data[[y]]) |>
dplyr::slice_head(n = 1) |>
dplyr::ungroup()
x_vars <- x_vars |>
dplyr::mutate(
Gen = paste0(
Country, ', ', State, ', ', County, ' Co., ', Mountains,
',', Mang_Name, " ", Unit_Nm, " ", trs),
Gen = stringr::str_replace_all(Gen, "NA", ""),
Gen = stringr::str_replace_all(Gen, "  ", ""),
Gen = stringr::str_replace_all(Gen, ",,", ""),
Gen = stringr::str_trim(Gen),
Gen = stringr::str_remove(Gen, ",$"),
.before = geometry)
return(x_vars)
rm(political, allotment, plss, ownership)
}
mountains <- sf::st_read( file.path(p2geo, 'mountains/mountains.shp'), quiet = T) |>
dplyr::rename(Mountains = MapName)
View(mountains)
#' gather political site information
#'
#' @description this function grabs information on the state, county, and township of collections
#' @param x an sf data frame of collection points
#' @param y a variable which uniquely identifies each observation
#' @param path a path to the directory holding the BarnebyLivesGeodata
#' @examples # see the package vignette
#' @export
political_grabber <- function(x, y, path){
y_quo <- rlang::enquo(y)
x <- dplyr::select(x,
-any_of(c(
'Country', 'State', 'County', 'Mang_Name',
'Unit_Nm', 'trs', 'Allotment')))
political <- sf::st_read( file.path(path, 'political/political.shp'), quiet = T)
mountains <- sf::st_read( file.path(path, 'mountains/mountains.shp'), quiet = T) |>
dplyr::rename(Mountains = MapName)
allotment <- sf::st_read( file.path(path, 'allotments/allotments.shp'), quiet = T)
plss <- sf::st_read( file.path(path, 'plss/plss.shp'), quiet = T)
ownership <- sf::st_read( file.path(path, 'pad/pad.shp'), quiet = T)
# write attributes to data set
x <- sf::st_join(x, political)
x <- sf::st_join(x, allotment)
x <- sf::st_join(x, ownership)
x <- sf::st_join(x, mountains)
return(x)
x_plss <- sf::st_transform(x, sf::st_crs(plss))
x_plss <- sf::st_join(x_plss, plss) |>
sf::st_drop_geometry() |>
dplyr::select(any_of(c(y, 'trs')))
x_vars <- dplyr::left_join(x, x_plss, by = y) |>
dplyr::mutate(Country = 'U.S.A.') |>
dplyr::relocate(any_of(
c('Country', 'State', 'County', 'Mountains', 'Mang_Name', 'Unit_Nm', 'trs', 'Allotment')),
.before = geometry) |>
dplyr::distinct(.keep_all = T) |>
# with large enough sample size some points fall on an exact border
dplyr::group_by( .data[[y]]) |>
dplyr::slice_head(n = 1) |>
dplyr::ungroup()
x_vars <- x_vars |>
dplyr::mutate(
Gen = paste0(
Country, ', ', State, ', ', County, ' Co., ', Mountains,
',', Mang_Name, " ", Unit_Nm, " ", trs),
Gen = stringr::str_replace_all(Gen, "NA", ""),
Gen = stringr::str_replace_all(Gen, "  ", ""),
Gen = stringr::str_replace_all(Gen, ",,", ""),
Gen = stringr::str_trim(Gen),
Gen = stringr::str_remove(Gen, ",$"),
.before = geometry)
return(x_vars)
rm(political, allotment, plss, ownership)
}
time_political_grabber <- system.time({ # grab political information for collection
data1 <- political_grabber(data, y = 'Collection_number', path = p2geo)
})
View(data1)
#' gather political site information
#'
#' @description this function grabs information on the state, county, and township of collections
#' @param x an sf data frame of collection points
#' @param y a variable which uniquely identifies each observation
#' @param path a path to the directory holding the BarnebyLivesGeodata
#' @examples # see the package vignette
#' @export
political_grabber <- function(x, y, path){
y_quo <- rlang::enquo(y)
x <- dplyr::select(x,
-any_of(c(
'Country', 'State', 'County', 'Mang_Name',
'Unit_Nm', 'trs', 'Allotment')))
political <- sf::st_read( file.path(path, 'political/political.shp'), quiet = T)
mountains <- sf::st_read( file.path(path, 'mountains/mountains.shp'), quiet = T) |>
dplyr::rename(Mountains = MapName)
allotment <- sf::st_read( file.path(path, 'allotments/allotments.shp'), quiet = T)
plss <- sf::st_read( file.path(path, 'plss/plss.shp'), quiet = T)
ownership <- sf::st_read( file.path(path, 'pad/pad.shp'), quiet = T)
# write attributes to data set
x <- sf::st_join(x, political)
x <- sf::st_join(x, allotment)
x <- sf::st_join(x, ownership)
x <- sf::st_join(x, mountains)
x_plss <- sf::st_transform(x, sf::st_crs(plss))
x_plss <- sf::st_join(x_plss, plss) |>
sf::st_drop_geometry() |>
dplyr::select(any_of(c(y, 'trs')))
x_vars <- dplyr::left_join(x, x_plss, by = y) |>
dplyr::mutate(Country = 'U.S.A.') |>
dplyr::relocate(any_of(
c('Country', 'State', 'County', 'Mountains', 'Mang_Name', 'Unit_Nm', 'trs', 'Allotment')),
.before = geometry) |>
dplyr::distinct(.keep_all = T) |>
# with large enough sample size some points fall on an exact border
dplyr::group_by( .data[[y]]) |>
dplyr::slice_head(n = 1) |>
dplyr::ungroup()
x_vars <- x_vars |>
dplyr::mutate(
Gen = paste0(
Country, ', ', State, ', ', County, ' Co., ', Mountains,
',', Mang_Name, " ", Unit_Nm, " ", trs),
Gen = stringr::str_replace_all(Gen, "NA", ""),
Gen = stringr::str_replace_all(Gen, "  ", ""),
Gen = stringr::str_replace_all(Gen, ",,", ""),
Gen = stringr::str_trim(Gen),
Gen = stringr::str_remove(Gen, ",$"),
.before = geometry)
return(x_vars)
rm(political, allotment, plss, ownership)
}
time_political_grabber <- system.time({ # grab political information for collection
data1 <- political_grabber(data, y = 'Collection_number', path = p2geo)
})
#' gather political site information
#'
#' @description this function grabs information on the state, county, and township of collections
#' @param x an sf data frame of collection points
#' @param y a variable which uniquely identifies each observation
#' @param path a path to the directory holding the BarnebyLivesGeodata
#' @examples # see the package vignette
#' @export
political_grabber <- function(x, y, path){
y_quo <- rlang::enquo(y)
x <- dplyr::select(x,
-any_of(c(
'Country', 'State', 'County', 'Mang_Name',
'Unit_Nm', 'trs', 'Allotment')))
political <- sf::st_read( file.path(path, 'political/political.shp'), quiet = T)
mountains <- sf::st_read( file.path(path, 'mountains/mountains.shp'), quiet = T) |>
dplyr::rename(Mountains = MapName)
allotment <- sf::st_read( file.path(path, 'allotments/allotments.shp'), quiet = T)
plss <- sf::st_read( file.path(path, 'plss/plss.shp'), quiet = T)
ownership <- sf::st_read( file.path(path, 'pad/pad.shp'), quiet = T)
# write attributes to data set
x <- sf::st_join(x, political)
x <- sf::st_join(x, allotment)
x <- sf::st_join(x, ownership)
x <- sf::st_join(x, mountains)
x_plss <- sf::st_transform(x, sf::st_crs(plss))
x_plss <- sf::st_join(x_plss, plss) |>
sf::st_drop_geometry() |>
dplyr::select(any_of(c(y, 'trs')))
x_vars <- dplyr::left_join(x, x_plss, by = y) |>
dplyr::mutate(Country = 'U.S.A.') |>
dplyr::relocate(any_of(
c('Country', 'State', 'County', 'Mountains', 'Mang_Name', 'Unit_Nm', 'trs', 'Allotment')),
.before = geometry) |>
dplyr::distinct(.keep_all = T) |>
# with large enough sample size some points fall on an exact border
dplyr::group_by( .data[[y]]) |>
dplyr::slice_head(n = 1) |>
dplyr::ungroup()
x_vars <- x_vars |>
dplyr::mutate(
Gen = paste0(
Country, ', ', State, ', ', County, ' Co., ', Mountains,
', ', Mang_Name, " ", Unit_Nm, " ", trs),
Gen = stringr::str_replace_all(Gen, "NA", ""),
Gen = stringr::str_replace_all(Gen, "  ", ""),
Gen = stringr::str_replace_all(Gen, ", ,", ","),
Gen = stringr::str_trim(Gen),
Gen = stringr::str_remove(Gen, ",$"),
.before = geometry)
return(x_vars)
rm(political, allotment, plss, ownership)
}
time_physical_grabber <- system.time({ # grab sites physical information
data <- physical_grabber(data, path = p2geo)
})
#' gather political site information
#'
#' @description this function grabs information on the state, county, and township of collections
#' @param x an sf data frame of collection points
#' @param y a variable which uniquely identifies each observation
#' @param path a path to the directory holding the BarnebyLivesGeodata
#' @examples # see the package vignette
#' @export
political_grabber <- function(x, y, path){
y_quo <- rlang::enquo(y)
x <- dplyr::select(x,
-any_of(c(
'Country', 'State', 'County', 'Mang_Name',
'Unit_Nm', 'trs', 'Allotment')))
political <- sf::st_read( file.path(path, 'political/political.shp'), quiet = T)
mountains <- sf::st_read( file.path(path, 'mountains/mountains.shp'), quiet = T) |>
dplyr::rename(Mountains = MapName)
allotment <- sf::st_read( file.path(path, 'allotments/allotments.shp'), quiet = T)
plss <- sf::st_read( file.path(path, 'plss/plss.shp'), quiet = T)
ownership <- sf::st_read( file.path(path, 'pad/pad.shp'), quiet = T)
# write attributes to data set
x <- sf::st_join(x, political)
x <- sf::st_join(x, allotment)
x <- sf::st_join(x, ownership)
x <- sf::st_join(x, mountains)
x_plss <- sf::st_transform(x, sf::st_crs(plss))
x_plss <- sf::st_join(x_plss, plss) |>
sf::st_drop_geometry() |>
dplyr::select(any_of(c(y, 'trs')))
x_vars <- dplyr::left_join(x, x_plss, by = y) |>
dplyr::mutate(Country = 'U.S.A.') |>
dplyr::relocate(any_of(
c('Country', 'State', 'County', 'Mountains', 'Mang_Name', 'Unit_Nm', 'trs', 'Allotment')),
.before = geometry) |>
dplyr::distinct(.keep_all = T) |>
# with large enough sample size some points fall on an exact border
dplyr::group_by( .data[[y]]) |>
dplyr::slice_head(n = 1) |>
dplyr::ungroup()
x_vars <- x_vars |>
dplyr::mutate(
Gen = paste0(
Country, ', ', State, ', ', County, ' Co., ', Mountains,
', ', Mang_Name, " ", Unit_Nm, " ", trs),
Gen = stringr::str_replace_all(Gen, "NA", ""),
Gen = stringr::str_replace_all(Gen, "  ", ""),
Gen = stringr::str_replace_all(Gen, ", ,", ","),
Gen = stringr::str_trim(Gen),
Gen = stringr::str_remove(Gen, ",$"),
.before = geometry)
return(x_vars)
rm(political, allotment, plss, ownership)
}
time_political_grabber <- system.time({ # grab political information for collection
data1 <- political_grabber(data, y = 'Collection_number', path = p2geo)
})
#' gather political site information
#'
#' @description this function grabs information on the state, county, and township of collections
#' @param x an sf data frame of collection points
#' @param y a variable which uniquely identifies each observation
#' @param path a path to the directory holding the BarnebyLivesGeodata
#' @examples # see the package vignette
#' @export
political_grabber <- function(x, y, path){
y_quo <- rlang::enquo(y)
x <- dplyr::select(x,
-any_of(c(
'Country', 'State', 'County', 'Mang_Name',
'Unit_Nm', 'trs', 'Allotment')))
political <- sf::st_read( file.path(path, 'political/political.shp'), quiet = T)
mountains <- sf::st_read( file.path(path, 'mountains/mountains.shp'), quiet = T) |>
dplyr::rename(Mountains = MapName) |>
dplyr::mutate(Mountains = str_remove(Mountains, '[(nn)]'))
allotment <- sf::st_read( file.path(path, 'allotments/allotments.shp'), quiet = T)
plss <- sf::st_read( file.path(path, 'plss/plss.shp'), quiet = T)
ownership <- sf::st_read( file.path(path, 'pad/pad.shp'), quiet = T)
# write attributes to data set
x <- sf::st_join(x, political)
x <- sf::st_join(x, allotment)
x <- sf::st_join(x, ownership)
x <- sf::st_join(x, mountains)
x_plss <- sf::st_transform(x, sf::st_crs(plss))
x_plss <- sf::st_join(x_plss, plss) |>
sf::st_drop_geometry() |>
dplyr::select(any_of(c(y, 'trs')))
x_vars <- dplyr::left_join(x, x_plss, by = y) |>
dplyr::mutate(Country = 'U.S.A.') |>
dplyr::relocate(any_of(
c('Country', 'State', 'County', 'Mountains', 'Mang_Name', 'Unit_Nm', 'trs', 'Allotment')),
.before = geometry) |>
dplyr::distinct(.keep_all = T) |>
# with large enough sample size some points fall on an exact border
dplyr::group_by( .data[[y]]) |>
dplyr::slice_head(n = 1) |>
dplyr::ungroup()
x_vars <- x_vars |>
dplyr::mutate(
Gen = paste0(
Country, ', ', State, ', ', County, ' Co., ', Mountains,
', ', Mang_Name, " ", Unit_Nm, " ", trs),
Gen = stringr::str_replace_all(Gen, "NA", ""),
Gen = stringr::str_replace_all(Gen, "  ", ""),
Gen = stringr::str_replace_all(Gen, ", ,", ","),
Gen = stringr::str_trim(Gen),
Gen = stringr::str_remove(Gen, ",$"),
.before = geometry)
return(x_vars)
rm(political, allotment, plss, ownership)
}
time_political_grabber <- system.time({ # grab political information for collection
data1 <- political_grabber(data, y = 'Collection_number', path = p2geo)
})
mountains <- sf::st_read( file.path(path, 'mountains/mountains.shp'), quiet = T) |>
dplyr::rename(Mountains = MapName) |>
dplyr::mutate(Mountains = str_remove(Mountains, '[(nn)]'))
p2geo <- '/media/steppe/hdd/Barneby_Lives-dev/geodata'
mountains <- sf::st_read( file.path(p2geo, 'mountains/mountains.shp'), quiet = T) |>
dplyr::rename(Mountains = MapName) |>
dplyr::mutate(Mountains = str_remove(Mountains, '[(nn)]'))
View(mountains)
mountains <- sf::st_read( file.path(p2geo, 'mountains/mountains.shp'), quiet = T) |>
dplyr::rename(Mountains = MapName) |>
dplyr::mutate(Mountains = str_remove(Mountains, '//(nn//)'))
View(mountains)
mountains <- sf::st_read( file.path(p2geo, 'mountains/mountains.shp'), quiet = T) |>
dplyr::rename(Mountains = MapName) |>
dplyr::mutate(Mountains = str_remove(Mountains, '[(]nn[])]'))
#' gather political site information
#'
#' @description this function grabs information on the state, county, and township of collections
#' @param x an sf data frame of collection points
#' @param y a variable which uniquely identifies each observation
#' @param path a path to the directory holding the BarnebyLivesGeodata
#' @examples # see the package vignette
#' @export
political_grabber <- function(x, y, path){
y_quo <- rlang::enquo(y)
x <- dplyr::select(x,
-any_of(c(
'Country', 'State', 'County', 'Mang_Name',
'Unit_Nm', 'trs', 'Allotment')))
political <- sf::st_read( file.path(path, 'political/political.shp'), quiet = T)
mountains <- sf::st_read( file.path(p2geo, 'mountains/mountains.shp'), quiet = T) |>
dplyr::rename(Mountains = MapName) |>
dplyr::mutate(Mountains = stringr::str_remove(Mountains, '[(]nn[])]'))
allotment <- sf::st_read( file.path(path, 'allotments/allotments.shp'), quiet = T)
plss <- sf::st_read( file.path(path, 'plss/plss.shp'), quiet = T)
ownership <- sf::st_read( file.path(path, 'pad/pad.shp'), quiet = T)
# write attributes to data set
x <- sf::st_join(x, political)
x <- sf::st_join(x, allotment)
x <- sf::st_join(x, ownership)
x <- sf::st_join(x, mountains)
x_plss <- sf::st_transform(x, sf::st_crs(plss))
x_plss <- sf::st_join(x_plss, plss) |>
sf::st_drop_geometry() |>
dplyr::select(any_of(c(y, 'trs')))
x_vars <- dplyr::left_join(x, x_plss, by = y) |>
dplyr::mutate(Country = 'U.S.A.') |>
dplyr::relocate(any_of(
c('Country', 'State', 'County', 'Mountains', 'Mang_Name', 'Unit_Nm', 'trs', 'Allotment')),
.before = geometry) |>
dplyr::distinct(.keep_all = T) |>
# with large enough sample size some points fall on an exact border
dplyr::group_by( .data[[y]]) |>
dplyr::slice_head(n = 1) |>
dplyr::ungroup()
x_vars <- x_vars |>
dplyr::mutate(
Gen = paste0(
Country, ', ', State, ', ', County, ' Co., ', Mountains,
', ', Mang_Name, " ", Unit_Nm, " ", trs),
Gen = stringr::str_replace_all(Gen, "NA", ""),
Gen = stringr::str_replace_all(Gen, "  ", ""),
Gen = stringr::str_replace_all(Gen, ", ,", ","),
Gen = stringr::str_trim(Gen),
Gen = stringr::str_remove(Gen, ",$"),
.before = geometry)
return(x_vars)
rm(political, allotment, plss, ownership)
}
time_political_grabber <- system.time({ # grab political information for collection
data1 <- political_grabber(data, y = 'Collection_number', path = p2geo)
})
View(data1)
mtns <- st_read('../geodata_raw/globalMountains/GMBA_Inventory_v2.0_standard_basic.shp',
quiet = T) %>%
st_make_valid() %>%
select(MapName) %>%
st_crop(., st_union(tile_cells))|>
dplyr::rename(Mountains = MapName) |>
dplyr::mutate(Mountains = stringr::str_remove(Mountains, '[(]nn[])]'))
library(BarnebyLives)
library(tidyverse)
library(WorldFlora)
library(sf)
mtns <- st_read('../geodata_raw/globalMountains/GMBA_Inventory_v2.0_standard_basic.shp',
quiet = T) %>%
st_make_valid() %>%
select(MapName) %>%
st_crop(., st_union(tile_cells))|>
dplyr::rename(Mountains = MapName) |>
dplyr::mutate(Mountains = stringr::str_remove(Mountains, '[(]nn[])]'))
mtns <- st_read('../../geodata_raw/globalMountains/GMBA_Inventory_v2.0_standard_basic.shp',
quiet = T) %>%
st_make_valid() %>%
select(MapName) %>%
st_crop(., st_union(tile_cells))|>
dplyr::rename(Mountains = MapName) |>
dplyr::mutate(Mountains = stringr::str_remove(Mountains, '[(]nn[])]'))
mtns <- st_read('../../Barneby_Lives-dev/geodata_raw/globalMountains/GMBA_Inventory_v2.0_standard_basic.shp',
quiet = T) %>%
st_make_valid() %>%
select(MapName) %>%
st_crop(., st_union(tile_cells))|>
dplyr::rename(Mountains = MapName) |>
dplyr::mutate(Mountains = stringr::str_remove(Mountains, '[(]nn[])]'))
tile_cells <- st_make_grid(
bound,
what = "polygons", square = T, flat_topped = F, crs = 4326,
n = c(
abs(round( (bb_vals[2] - bb_vals[1]) / 5, 0)), # rows
abs(round( (bb_vals[3] - bb_vals[4]) / 5, 0))) #cols
) %>%
st_as_sf() %>%
rename(geometry = x) %>%
mutate(x = st_coordinates(st_centroid(.))[,1],
y = st_coordinates(st_centroid(.))[,2],
.before = geometry,
across(c('x', 'y'), \(x) round(x, 1)),
cellname = paste0('n', abs(y), 'w', abs(x))
)
bound <- data.frame(
y = c(30, 30, 50, 50, 30),
x = c(-85, -125, -125, -85, -85)
) %>%
st_as_sf(coords = c('x', 'y'), crs = 4326) %>%
st_bbox() %>%
st_as_sfc()
bb_vals <- c(-125, -85, 30, 50)
w_illi <- ext(bb_vals)
library(sf)
library(terra)
bound <- data.frame(
y = c(30, 30, 50, 50, 30),
x = c(-85, -125, -125, -85, -85)
) %>%
st_as_sf(coords = c('x', 'y'), crs = 4326) %>%
st_bbox() %>%
st_as_sfc()
bb_vals <- c(-125, -85, 30, 50)
w_illi <- ext(bb_vals)
tile_cells <- st_make_grid(
bound,
what = "polygons", square = T, flat_topped = F, crs = 4326,
n = c(
abs(round( (bb_vals[2] - bb_vals[1]) / 5, 0)), # rows
abs(round( (bb_vals[3] - bb_vals[4]) / 5, 0))) #cols
) %>%
st_as_sf() %>%
rename(geometry = x) %>%
mutate(x = st_coordinates(st_centroid(.))[,1],
y = st_coordinates(st_centroid(.))[,2],
.before = geometry,
across(c('x', 'y'), \(x) round(x, 1)),
cellname = paste0('n', abs(y), 'w', abs(x))
)
tile_cellsV <- vect(tile_cells)
mtns <- st_read('../../Barneby_Lives-dev/geodata_raw/globalMountains/GMBA_Inventory_v2.0_standard_basic.shp',
quiet = T) %>%
st_make_valid() %>%
select(MapName) %>%
st_crop(., st_union(tile_cells))|>
dplyr::rename(Mountains = MapName) |>
dplyr::mutate(Mountains = stringr::str_remove(Mountains, '[(]nn[])]'))
st_write(mtns, dsn = file.path('../geodata/mountains', 'mountains.shp'), quiet = T)
st_write(mtns, dsn = file.path('../../Barneby_Lives-dev/geodata/mountains', 'mountains.shp'), quiet = T)
st_write(mtns, dsn = file.path('../../Barneby_Lives-dev/geodata/mountains', 'mountains.shp'), quiet = T)
padus <- st_read(dsn = '../geodata_raw/PADUS3/PAD_US3_0.gdb',
layer = 'PADUS3_0Fee') %>%
filter(State_Nm %in% states) %>%
select(Mang_Name, Unit_Nm) %>%
st_cast('MULTIPOLYGON')
padus <- st_read(dsn = '../Barneby_Lives-dev/geodata_raw/PADUS3/PAD_US3_0.gdb',
layer = 'PADUS3_0Fee') %>%
filter(State_Nm %in% states) %>%
select(Mang_Name, Unit_Nm) %>%
st_cast('MULTIPOLYGON')
padus <- st_read(dsn = '../../Barneby_Lives-dev/geodata_raw/PADUS3/PAD_US3_0.gdb',
layer = 'PADUS3_0Fee') %>%
filter(State_Nm %in% states) %>%
select(Mang_Name, Unit_Nm) %>%
st_cast('MULTIPOLYGON')
