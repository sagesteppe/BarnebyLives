library(tidyverse)
library(BarnebyLives)
library(googlesheets4)
googledrive::drive_auth("reedbenkendorf27@gmail.com")
# read in data from the sheet to process
input <- read_sheet('1iOQBNeGqRJ3yhA-Sujas3xZ2Aw5rFkktUKv3N_e4o8M',
sheet = 'Data Entry - Examples') %>%
mutate(UNIQUEID = paste0(Primary_Collector, Collection_number))
googledrive::drive_auth("reedbenkendorf27@gmail.com")
# read in data from the sheet to process
input <- read_sheet('1iOQBNeGqRJ3yhA-Sujas3xZ2Aw5rFkktUKv3N_e4o8M',
sheet = 'Data Entry - Examples') %>%
mutate(UNIQUEID = paste0(Primary_Collector, Collection_number))
gsub('[\]$', '', test)
gsub('\\\$', '', test)
gsub('\\/$', '', test)
gsub('\\/$', '', 'bong\')
quit()
_
)
)))
gsub('\\\$', '', 'bong\')
library(googlesheets4)
googledrive::drive_auth("reedbenkendorf27@gmail.com")
# read in data from the sheet to process
input <- read_sheet('1iOQBNeGqRJ3yhA-Sujas3xZ2Aw5rFkktUKv3N_e4o8M',
sheet = 'Data Entry - Examples') %>%
mutate(UNIQUEID = paste0(Primary_Collector, Collection_number))
acdc_bag <- c('A.C.DeCandolle', 'A.C.Decandolle.', 'A.Decandolle')
acdc_bag <- c('A.DeCandolle', 'A.C.DeCandolle',  'A.C.D.DeCandolle', 'A.C.DeCandolle.')
apdc_bag <- c('A.DeCandolle', 'A.P.DeCandolle',  'A.P.Y.DeCandolle', 'A.P.DeCandolle.')
apdc_bag <- c('A.DeCandolle', 'A.P.DeCandolle',  'A.P.Y.DeCandolle', 'A.P.DeCandolle.')
sub("\\.\\d+m$", "", apdc_bag)
sub("\\.\\d+m$", " ", apdc_bag)
sub("\\.", " ", apdc_bag)
sub("\\.([^\\.]*)$", " ", apdc_bag)
sub("\\.[^\\.]*$", " ", apdc_bag)
sub("\\.[^\\.]*$", " ", apdc_bag)
sub("\\.", " ", apdc_bag)
sub('\\.[^.]*$', apdc_bag)
sub('\\.[^.]*$', "", apdc_bag)
sub('\\.[^.]*$', " ", apdc_bag)
sub('\\.[^.]', " ", apdc_bag)
sub('\\.[^.]', ". ", apdc_bag)
sub('\\.[^.]*$', ". ", apdc_bag)
sub('\\.[^.]', ". ", apdc_bag)
sub('[^.]', ". ", apdc_bag)
sub('[^.$]', ". ", apdc_bag)
sub('[^.$]', " ", apdc_bag)
sub('[^.$]', "", apdc_bag)
sub('[^.$]', "Z", apdc_bag)
sub( '\\.([^.$]*)$', 'Z', apdc_bag)
sub( '\\.([^.$]*)$', 'Z\\1', apdc_bag)
sub( '\\.([^.$]*)$', ' \\1', apdc_bag)
sub( '\\. ([^.$]*) $', ' \\1', apdc_bag)
sub( '\\.([^.$]*)$', ' \\1', apdc_bag)
sub( '\\.([^.$]*)', ' \\1', apdc_bag)
sub( '\\.([^.$]*)$', ' \\1', apdc_bag)
sub( '\\.[A-z]([^.$]*)$', ' \\1', apdc_bag)
'\\.[A-z]'
sub('\\.[A-z]', '', apdc_bag)
sub('\\.[A-z]', ' ', apdc_bag)
sub('\\.[A-z]([^.]*)$', ' ', apdc_bag)
sub('\\.[A-z]([^.]*)$', '\\1', apdc_bag)
sub('\\.[A-z]([^.]*)$', 'Z\\1', apdc_bag)
sub('\\.[A-z]([^.]*)$', ' \\1', apdc_bag)
sub("a(?!(.|\n)*a)", "", apdc_bag, perl = TRUE)
sub("\\.(?!(.|\n)*\\.)", "", apdc_bag, perl = TRUE)
sub("\\.(?!(.|\n)*\\.)", " ", apdc_bag, perl = TRUE)
trail <- gsub('//.', '', apdc_bag)
trail
trail <- gsub('//.$', '', apdc_bag)
trail
('//.$', '', apdc_bag)
sub('//.$', '', apdc_bag)
sub('//.$', '', apdc_bag)
gsub('//.$', '', apdc_bag)
grep('//.$', '', apdc_bag)
grepl('//.$', '', apdc_bag)
grep('//.$', '', apdc_bag)
grep('\\.$', '', apdc_bag)
grep('\\.$', apdc_bag)
sub('\\.$', '', apdc_bag) # remove the trailin periods
sub('\\.$', '', apdc_bag)
sub('\\.', '', apdc_bag)
sub('\\.', ' ', apdc_bag)
sub('\\.[^.]*$', ' ', apdc_bag)
sub('\\.[^.]*$', '\\1', apdc_bag)
sub('\\.[^.]*$', '1\\', apdc_bag)
sub('\\.[^.]*$', '1\\ ', apdc_bag)
sub('\\.[^.]*$', ' ', apdc_bag)
company = sub("\\.[^.]*$", "", apdc_bag),
sub("\\.[^.]*$", "", apdc_bag),
sub("\\.[^.]*$", "", apdc_bag)
num = sub("\\.*, ", "", apdc_bag))
sub("\\.*, ", "", apdc_bag))
sub("\\.*, ", "", apdc_bag)
sub("\\.[^.]*$", "", apdc_bag)
sub("\\.*. ", "", apdc_bag)
\\.(?!.*\\.)
sub('\\.(?!.*\\.)', "", apdc_bag)
sub('\\.(?!.*\\.)', "", apdc_bag, perl = T)
sub('\\.(?!.*\\.)', " ", apdc_bag, perl = T)
apdc_bag_NTRAIL <- sub('\\.$', '', apdc_bag) # remove the trailing periods
sub('\\.(?!.*\\.)', " ", apdc_bag_NTRAIL, perl = T)
sub('\\.(?!.*\\.)', ". ", apdc_bag_NTRAIL, perl = T) # identify the last period in the name, and add a space after it
grep('\\.$', apdc_bag) # identify which abbreviations have a trailing period
SUB('\\.$', apdc_bag) # identify which abbreviations have a trailing period
sub('\\.$', apdc_bag) # identify which abbreviations have a trailing period
sub('\\.$', '', apdc_bag) # identify which abbreviations have a trailing period
grepl('\\.$', '', apdc_bag) # identify which abbreviations have a trailing period
grep('\\.$', '', apdc_bag) # identify which abbreviations have a trailing period
grep('\\.$', apdc_bag) # identify which abbreviations have a trailing period
which(grep('\\.$', apdc_bag))
if(grep('\\.$', apdc_bag) == T){'bong'}
if(grep('\\.$', apdc_bag) == T){Y = 'bong'}
if(grep('\\.$', apdc_bag) == T){Y = 'bong'}
if(grep('\\.$', apdc_bag) == T){Y = 'bong'} else {y = ''}
if(grep('\\.$', apdc_bag) == T){Y = 'bong'} else {Y = ''}
apdc_bag <- c('A.DeCandolle', 'A.P.DeCandolle',  'A.P.Y.DeCandolle', 'A.P.DeCandolle.')
apdc_bag_NTRAIL <- sub('\\.$', '', apdc_bag) # remove the trailing periods
sub('\\.(?!.*\\.)', ". ", apdc_bag_NTRAIL, perl = T) # identify the last period in the name, and add a space after it
trailed <- vector(mode = 'character', length = length(apdc_bag))
if(grep('\\.$', apdc_bag) == T){trailed[grep('\\.$', apdc_bag)] = 'BONG'}
if(grep('\\.$', apdc_bag) == T){trailed[grep('\\.$', apdc_bag)] = 'BONG'}
if(grep('\\.$', apdc_bag) == T){trailed = 'BONG'}
(grep('\\.$', apdc_bag)
grep('\\.$', apdc_bag)
grep('\\.$', apdc_bag) # identify which abbreviations have a trailing period
trailed[4] <- 'bong'
apdc_bag <- c('A.DeCandolle', 'A.P.DeCandolle',  'A.P.Y.DeCandolle', 'A.P.DeCandolle.')
trailed <- vector(mode = 'character', length = length(apdc_bag))
trailed[grep('\\.$', apdc_bag)] <- '.'
apdc_bag <- c('A.DeCandolle', 'A.P.DeCandolle',
'A.P.Y.DeCandolle', 'A.P.DeCandolle.', 'C.Linne.')
trailed <- vector(mode = 'character', length = length(apdc_bag))
trailed[grep('\\.$', apdc_bag)] <- '.'
apdc_bag <- c('A.DeCandolle', 'A.P.DeCandolle',
'A.P.Y.DeCandolle', 'A.P.DeCandolle.')
trailed <- vector(mode = 'character', length = length(apdc_bag))
trailed[grep('\\.$', apdc_bag)] <- '.'
apdc_bag_NTRAIL <- sub('\\.$', '', apdc_bag) # remove the trailing periods
sub('\\.(?!.*\\.)', ". ",
apdc_bag_NTRAIL, perl = T) # identify the last period in the name, and add a space after it
apdc_bag_NTRAIL <- sub('\\.(?!.*\\.)', ". ",
apdc_bag_NTRAIL, perl = T) # identify the last period in the name, and add a space after it
c(apdc_bag_NTRAIL, trailed)
paste(apdc_bag_NTRAIL, trailed)
paste0(apdc_bag_NTRAIL, trailed)
words <- c('(Pursh) J.M. Coult. & Rose')
str_split(words, pattern = '\\( \\)  & ')
str_split(words, pattern = '\\( | \\) | & ')
words <- c('(Pursh) J.M. Coult. & Rose')
str_split(words, pattern = '\\( | \\) | & ')
str_split(words, pattern = '\\) | & ')
stringr::str_split(words, pattern = '\\) | & ')
pieces <- stringr::str_split(words, pattern = '\\) | & ')
sub('\\(', "", pieces)
pieces <- stringr::str_split(words, pattern = '\\) | & ')
sub('\\(', "", pieces)
View(pieces)
pieces
unlist(pieces)
sub('\\(', "", unlist(pieces))
pieces <- sub('\\(', "", unlist(pieces))
grep('J.M. Coult.', pieces, fixed = T)
# if the piece cannot be found in the lookout table flag it
grep('J.M. Coult', pieces, fixed = T)
# if the piece cannot be found in the lookout table flag it
grep('J.M. Coult', pieces)
# if the piece cannot be found in the lookout table flag it
which(string == c("J.M. Coult.", "J.M. Coult"))
# if the piece cannot be found in the lookout table flag it
which(pieces == c("J.M. Coult.", "J.M. Coult"))
paste0(pieces, 'b')
paste0(pieces, '\b')
paste0("^", pieces, "$")
# if the piece cannot be found in the lookout table flag it
which(pieces == c("J.M. Coult.", "J.M. Coult"))
# if the piece cannot be found in the lookout table flag it
grep("J.M. Coult.", pieces)
# if the piece cannot be found in the lookout table flag it
grep("J.M. Coult", pieces)
pieces <- paste0("^", pieces, "$")
# if the piece cannot be found in the lookout table flag it
grep("J.M. Coult", pieces)
# if the piece cannot be found in the lookout table flag it
grep("J.M. Coult.", pieces)
# if the piece cannot be found in the lookout table flag it
grep("J.M. Coult", pieces)
# if the piece cannot be found in the lookout table flag it
grep("^J.M. Coult.$", pieces)
words <- c('(Pursh) J.M. Coult. & Rose')
pieces <- stringr::str_split(words, pattern = '\\) | & ')
pieces <- sub('\\(', "", unlist(pieces))
# if the piece cannot be found in the lookout table flag it
grep("^J.M. Coult.$", pieces)
words <- c('(Pursh) J.M. Coult & Rose')
pieces <- stringr::str_split(words, pattern = '\\) | & ')
pieces <- sub('\\(', "", unlist(pieces))
# if the piece cannot be found in the lookout table flag it
grep("^J.M. Coult.$", pieces)
words <- c('(Pursh) J.M. Coult. & Rose')
pieces <- stringr::str_split(words, pattern = '\\) | & ')
pieces <- sub('\\(', "", unlist(pieces))
# to each author abbreviation ensure to match from start ('^') to end ($) of string.
grep("^J.M. Coult.$", pieces)
# to each author abbreviation ensure to match from start ('^') to end ($) of string.
grep("^J.M. Coult.$", pieces)
if(grep("^J.M. Coult.$", pieces)) {pieces} else {'Not Found'}
if(grep("^J.M. Coult$", pieces)) {pieces} else {'Not Found'}
if(grep("^J.M. Coult.$", pieces)) {pieces} else {'Not Found'}
if(grep("^J.M. Coult.$", pieces)) {pieces} else {'Not Found'}
grep("^J.M. Coult.$", pieces)
grep("^J.M. Coult$", pieces)
if(grep("^J.M. Coult$", pieces) == length(0))
if(grep("^J.M. Coult.$", pieces) == length(0))
if(grep("^J.M. Coult.$", pieces) == length(0)) {'bong'}
if(grep("^J.M. Coult.$", pieces) == length(0)) {'bong'} else {'crack'}
if(grep("^J.M. Coult$", pieces) == length(0)) {'bong'} else {'crack'}
if(length( grep("^J.M. Coult.$", pieces)) > 1 ) {'bong'} else {'crack'
if(length( grep("^J.M. Coult.$", pieces)) > 1 ) {'bong'} else {'crack'}
if(length( grep("^J.M. Coult.$", pieces)) > 1 ) {'bong'} else {'crack'}
# to each author abbreviation ensure to match from start ('^') to end ($) of string.
grep("^J.M. Coult.$", pieces)
if(length( grep("^J.M. Coult.$", pieces)) > 1 ) {'bong'} else {'crack'}
if(length( grep("^J.M. Coult.$", pieces)) > 1 ) {'bong'} else {'crack'}
if(length( grep("^J.M. Coult$", pieces)) > 1 ) {'bong'} else {'crack'}
grep("^J.M. Coult$", pieces)
# to each author abbreviation ensure to match from start ('^') to end ($) of string.
isLogical ( grep("^J.M. Coult.$", pieces) )
# to each author abbreviation ensure to match from start ('^') to end ($) of string.
isTRUE ( grep("^J.M. Coult.$", pieces) )
# to each author abbreviation ensure to match from start ('^') to end ($) of string.
isTRUE ( grep("^J.M. Coult$", pieces) )
# to each author abbreviation ensure to match from start ('^') to end ($) of string.
is.logical ( grep("^J.M. Coult$", pieces) )
# to each author abbreviation ensure to match from start ('^') to end ($) of string.
is.logical ( grep("^J.M. Coult.$", pieces) )
# to each author abbreviation ensure to match from start ('^') to end ($) of string.
is.null ( grep("^J.M. Coult.$", pieces) )
# to each author abbreviation ensure to match from start ('^') to end ($) of string.
is.null ( grep("^J.M. Coult$", pieces) )
grep("^J.M. Coult$", pieces)
# to each author abbreviation ensure to match from start ('^') to end ($) of string.
length ( grep("^J.M. Coult$", pieces) )
# to each author abbreviation ensure to match from start ('^') to end ($) of string.
length ( grep("^J.M. Coult.$", pieces) )
# to each author abbreviation ensure to match from start ('^') to end ($) of string.
length ( grep("^J.M. Coult.$", pieces) ) == 0
# to each author abbreviation ensure to match from start ('^') to end ($) of string.
length ( grep("^J.M. Coult$", pieces) ) == 0
if(length ( grep("^J.M. Coult$", pieces) ) == 0) {'Error'} else {'crack'}
if(length ( grep("^J.M. Coult$", pieces) ) == 0) {'piece not found'} else {'crack'}
{'piece not found'} else {'crack'}
{'piece not found'} else {'crack'}
if(length ( grep("^J.M. Coult$", pieces) ) == 0)  {'piece not found'} else {'crack'}
length ( grep("^J.M. Coult$", pieces) ) == 0
grep("^J.M. Coult$", pieces) ) == 0
grep("^J.M. Coult$", pieces) )
# to each author abbreviation ensure to match from start ('^') to end ($) of string.
length ( grep("^J.M. Coult$", pieces) ) == 0
# to each author abbreviation ensure to match from start ('^') to end ($) of string.
length ( which(grep("^J.M. Coult$", pieces)) ) == 0
which(grep("^J.M. Coult$", pieces))
