#' @param Binomial Character. a column containing the name of the collection, without authorship.
#' Defaults to 'Full_name'.
#' @param col Character. the column with the species to be checked
#' @examples
#' out <- associate_dropper(collection_examples, col = 'Associates') |>
#'  dplyr::select(Full_name, Associates)
#' @export
associate_dropper <- function(x, Binomial, col){
if(missing(Binomial)){Binomial <- 'Full_name' ;
message(crayon::yellow('Argument to `Binomial` not supplied, defaulting to `Full_name`'))}
remove <- function(x, Binomial, col){
x[col] <- gsub(x[Binomial], "", x[col])
x[col] <- trimws(gsub("\\s+", " ", x[col]))
x[col] <- gsub(",$", "", x[col])
x[col] <- gsub("^, ", "", x[col])
x[col] <- gsub(", ,", ",", x[col])
x[col] <- gsub(",([A-Za-z])", ", \\1", x[col])
}
res <- apply(X = x, FUN = remove, MARGIN = 1, Binomial, col)
x[,col] <- res
}
ce <- data.frame(
Full_name = c('Microseris gracilis', 'Alyssum desertorum', 'Ceratocephala testiculata'),
Associates = rep('Microseris gracilis, Lupinus lepidus, Alyssum desertorum, Ceratocephala testiculata', times = 3)
)
ob <- associate_dropper(ce, col = 'Associates')
#'
#' @description Removes the collected species from the list of associated species
#' @param x data frame containing collection info
#' @param Binomial Character. a column containing the name of the collection, without authorship.
#' Defaults to 'Full_name'.
#' @param col Character. the column with the species to be checked
#' @examples
#' out <- associate_dropper(collection_examples, col = 'Associates') |>
#'  dplyr::select(Full_name, Associates)
#' @export
associate_dropper <- function(x, Binomial, col){
if(missing(Binomial)){Binomial <- 'Full_name' ;
message(crayon::yellow('Argument to `Binomial` not supplied, defaulting to `Full_name`'))}
remove <- function(x, Binomial, col){
x[col] <- gsub(x[Binomial], "", x[col])
x[col] <- trimws(gsub("\\s+", " ", x[col]))
x[col] <- gsub(",$", "", x[col])
x[col] <- gsub("^, ", "", x[col])
x[col] <- gsub(", ,", ",", x[col])
x[col] <- gsub(",([A-Za-z])", ", \\1", x[col])
}
res <- apply(X = x, FUN = remove, MARGIN = 1, Binomial, col)
x[,col]
}
ce <- data.frame(
Full_name = c('Microseris gracilis', 'Alyssum desertorum', 'Ceratocephala testiculata'),
Associates = rep('Microseris gracilis, Lupinus lepidus, Alyssum desertorum, Ceratocephala testiculata', times = 3)
)
ob <- associate_dropper(ce, col = 'Associates')
ob
#'
#' @description Removes the collected species from the list of associated species
#' @param x data frame containing collection info
#' @param Binomial Character. a column containing the name of the collection, without authorship.
#' Defaults to 'Full_name'.
#' @param col Character. the column with the species to be checked
#' @examples
#' out <- associate_dropper(collection_examples, col = 'Associates') |>
#'  dplyr::select(Full_name, Associates)
#' @export
associate_dropper <- function(x, Binomial, col){
if(missing(Binomial)){Binomial <- 'Full_name' ;
message(crayon::yellow('Argument to `Binomial` not supplied, defaulting to `Full_name`'))}
remove <- function(x, Binomial, col){
x[col] <- gsub(x[Binomial], "", x[col])
x[col] <- trimws(gsub("\\s+", " ", x[col]))
x[col] <- gsub(",$", "", x[col])
x[col] <- gsub("^, ", "", x[col])
x[col] <- gsub(", ,", ",", x[col])
x[col] <- gsub(",([A-Za-z])", ", \\1", x[col])
}
res <- apply(X = x, FUN = remove, MARGIN = 1, Binomial, col)
x[,col] <- res
}
ce <- data.frame(
Full_name = c('Microseris gracilis', 'Alyssum desertorum', 'Ceratocephala testiculata'),
Associates = rep('Microseris gracilis, Lupinus lepidus, Alyssum desertorum, Ceratocephala testiculata', times = 3)
)
ob <- associate_dropper(ce, col = 'Associates')
col = 'Associates'
x[,vol]
x[,col]
ce[,col]
#'
#' @description Removes the collected species from the list of associated species
#' @param x data frame containing collection info
#' @param Binomial Character. a column containing the name of the collection, without authorship.
#' Defaults to 'Full_name'.
#' @param col Character. the column with the species to be checked
#' @examples
#' out <- associate_dropper(collection_examples, col = 'Associates') |>
#'  dplyr::select(Full_name, Associates)
#' @export
associate_dropper <- function(x, Binomial, col){
if(missing(Binomial)){Binomial <- 'Full_name' ;
message(crayon::yellow('Argument to `Binomial` not supplied, defaulting to `Full_name`'))}
remove <- function(x, Binomial, col){
x[col] <- gsub(x[Binomial], "", x[col])
x[col] <- trimws(gsub("\\s+", " ", x[col]))
x[col] <- gsub(",$", "", x[col])
x[col] <- gsub("^, ", "", x[col])
x[col] <- gsub(", ,", ",", x[col])
x[col] <- gsub(",([A-Za-z])", ", \\1", x[col])
}
res <- apply(X = x, FUN = remove, MARGIN = 1, Binomial, col)
x[,col] <- res
x
}
ce <- data.frame(
Full_name = c('Microseris gracilis', 'Alyssum desertorum', 'Ceratocephala testiculata'),
Associates = rep('Microseris gracilis, Lupinus lepidus, Alyssum desertorum, Ceratocephala testiculata', times = 3)
)
ob <- associate_dropper(ce, col = 'Associates')
View(ob)
associate_dropper(ce, col = 'Associates')
#' ce <- data.frame(
#' Full_name = c(
#'   'Microseris gracilis', 'Alyssum desertorum', 'Ceratocephala testiculata'),
#' Associates = rep(
#'    'Microseris gracilis, Lupinus lepidus, Alyssum desertorum, Ceratocephala testiculata',
#'  times = 3)
#' )
#'
#' associate_dropper(ce, col = 'Associates')
#' @export
associate_dropper <- function(x, Binomial, col){
if(missing(Binomial)){Binomial <- 'Full_name' ;
message(crayon::yellow('Argument to `Binomial` not supplied, defaulting to `Full_name`'))}
remove <- function(x, Binomial, col){
x[col] <- gsub(x[Binomial], "", x[col])
x[col] <- trimws(gsub("\\s+", " ", x[col]))
x[col] <- gsub(",$", "", x[col])
x[col] <- gsub("^, ", "", x[col])
x[col] <- gsub(", ,", ",", x[col])
x[col] <- gsub(",([A-Za-z])", ", \\1", x[col])
}
res <- apply(X = x, FUN = remove, MARGIN = 1, Binomial, col)
x[,col] <- res
x
}
ce <- data.frame(
Full_name = c(
'Microseris gracilis', 'Alyssum desertorum', 'Ceratocephala testiculata'),
Associates = rep(
'Microseris gracilis, Lupinus lepidus, Alyssum desertorum, Ceratocephala testiculata',
times = 3)
)
associate_dropper(ce, col = 'Associates')
#' museum compliant text format
#'
#' @param x a data frame with dates
#' @examples first50dates <- paste0(sample(3:9, size = 50, replace = TRUE), '-',
#'    sample(1:29, size = 50, replace = TRUE), '-',
#'    rep(2023, times = 50 ))
#' head(first50dates)
#' first50dates <- date2text(first50dates)
#' head(first50dates)
#' @export
date2text <- function(x) {
x1 <- lubridate::mdy(x)
text <- paste0(lubridate::day(x1), # just grab day of month here
' ',
lubridate::month(x1, abbr = T, label = T), # grab the abbreviation for the month here
', ',
lubridate::year(x1)) # grab the year here
}
first50dates <- paste0(sample(3:9, size = 50, replace = TRUE), '-',
#'    sample(1:29, size = 50, replace = TRUE), '-',
#'    rep(2023, times = 50 ))
#' head(first50dates)
#' first50dates <- date2text(first50dates)
#' head(first50dates)
first50dates <- paste0(sample(3:9, size = 50, replace = TRUE), '-',
sample(1:29, size = 50, replace = TRUE), '-',
rep(2023, times = 50 ))
head(first50dates)
first50dates <- paste0(sample(3:9, size = 50, replace = TRUE), '-',
sample(1:29, size = 50, replace = TRUE), '-',
rep(2023, times = 50 )
)
head(first50dates)
first50dates <- date2text(first50dates)
head(first50dates)
first50dates <- paste0(sample(3:9, size = 10, replace = TRUE), '-',
sample(1:29, size = 10, replace = TRUE), '-',
rep(2023, times = 10)
)
head(first50dates)
first50dates <- date2text(first50dates)
head(first50dates)
first50dates <- paste0(sample(3:9, size = 10, replace = TRUE), '-',
sample(1:29, size = 10, replace = TRUE), '-',
rep(2023, times = 10)
)
head(first50dates)
first50dates <- date2text(first50dates)
head(first50dates)
#' @param x a data frame with dates
#' @examples
#' first50dates <- paste0(sample(3:9, size = 10, replace = TRUE), '-',
#'    sample(1:29, size = 10, replace = TRUE), '-',
#'    rep(2023, times = 10)
#'  )
#' head(first50dates)
#' first50dates <- date2text(first50dates)
#' head(first50dates)
#' @export
date2text <- function(x) {
x1 <- lubridate::mdy(x)
text <- paste0(lubridate::day(x1), # just grab day of month here
' ',
lubridate::month(x1, abbr = T, label = T), # grab the abbreviation for the month here
', ',
lubridate::year(x1)) # grab the year here
}
first50dates <- paste0(sample(3:9, size = 10, replace = TRUE), '-',
sample(1:29, size = 10, replace = TRUE), '-',
rep(2023, times = 10)
)
head(first50dates)
first50dates <- date2text(first50dates)
head(first50dates)
first50dates <- data.frame(
collection_date = paste0(
sample(3:9, size = 50, replace = TRUE), '-',
sample(1:29, size = 50, replace  = TRUE), '-',
rep(2023, times = 50 )))
dates <- date_parser(first50dates, coll_date = 'collection_date')
head(dates)
first50dates <- data.frame(
collection_date = paste0(
sample(3:9, size = 10, replace = TRUE), '-',
sample(1:29, size = 10, replace  = TRUE), '-',
rep(2023, times = 10 )))
dates <- date_parser(first50dates, coll_date = 'collection_date')
head(dates)
#' @returns original data frame plus: x_dmy, x_day, x_month, x_year, x_text, det_date_text, columns for both parameters which are supplied as inputs
#' @examples
#' first50dates <- data.frame(
#'    collection_date = paste0(
#'    sample(3:9, size = 10, replace = TRUE), '-',
#'    sample(1:29, size = 10, replace  = TRUE), '-',
#'    rep(2023, times = 10 )))
#' dates <- date_parser(first50dates, coll_date = 'collection_date')
#' head(dates)
#' @export
date_parser <- function(x, coll_date, det_date){
coll_date_q <- rlang::enquo(coll_date)
det_date_q <- rlang::enquo(det_date)
names_v <- c('_ymd', '_day', '_mo',  '_yr', '_text')
if(missing(det_date)){
column_names <- c(coll_date, paste0(coll_date, names_v))
} else {
column_names <- c(coll_date,
paste0(coll_date, names_v),
det_date,
paste0(det_date, names_v))
}
x_dmy <- x |>
dplyr::mutate(across(.cols = c(!!coll_date_q, !!det_date_q), lubridate::mdy, .names = "{.col}_ymd")) |>
dplyr::mutate(
across(ends_with('_ymd'), ~ lubridate::month(.), .names = "{.col}_mo"),
across(ends_with('_ymd'), ~ lubridate::day(.), .names = "{.col}_day"),
across(ends_with('_ymd'), ~ lubridate::year(.), .names = "{.col}_yr")
) |>
dplyr::mutate(across(.cols = c(!!coll_date_q, !!det_date_q), date2text, .names = '{.col}_text'))
if(any(grep('sf', class(x_dmy)))){
x_dmy_geo <- x_dmy |>
dplyr::select(geometry)
x_dmy_no_geo <- x_dmy |>
sf::st_drop_geometry(x_dmy) |>
dplyr::rename_with(~stringr::str_remove(., '_ymd'), matches('_ymd_.*$')) |>
dplyr::relocate(any_of(column_names), .before = last_col())
x_dmy <- bind_cols(x_dmy_no_geo, x_dmy_geo) |>
sf::st_as_sf(crs = sf::st_crs(x_dmy_geo))
} else {
x_dmy <- x_dmy |>
dplyr::rename_with(~stringr::str_remove(., '_ymd'), matches('_ymd_.*$')) |>
dplyr::relocate(any_of(column_names), .before = last_col())
}
return(x_dmy)
}
#' Have Google maps help you write directions to a site
#'
#' This function helps users write directions to a site which is somewhat near roads.
#' @param x an sf/tibble/data frame of locations
#' @param api_key a Google developer api key for use with googleway
#' @examples # see package vignette
#' @export
directions_grabber <- function(x, api_key){
# identify unique sites
sites <- split(x, f = list(x$latitude_dd, x$longitude_dd), drop=TRUE)
sites <- lapply(sites,  '[' , 1,)
sites_names <- do.call(rbind,  lapply(sites, '[',  'Site') )
# retrieve the site name
sitename <- paste(' Head to',
gsub('^ ', '',
gsub('^.*from', '', sites_names$Site)
)
)
# gather results from API
test_gq <- get_google_directions(sites, api_key = SoS_gkey)
# extract an overview of the directions as well as the specifics
dir_over <- lapply(test_gq, directions_overview) |> unlist()
dir_specific <- vector(mode = 'list', length = length(test_gq))
for (i in seq(test_gq)){ # some areas google says NO! to, handle them here.
if(dir_over[i] == '0mins from  via .'){
dir_over[i] <- 'Google will not'
dir_specific[i] <-"give results"
} else {
dir_specific[i] <- specificDirections(test_gq[[i]])
}
}
dir_specific <- unlist(dir_specific)
sites_out <- do.call(rbind, sites)
sites_out <- sites_out[, c('latitude_dd', 'longitude_dd')]
sites_out <- sf::st_drop_geometry(sites_out)
sites_out$Directions_BL = paste0(dir_over, ' ', dir_specific, sitename)
out <- dplyr::left_join(x,
sites_out, by = c('latitude_dd', 'longitude_dd')) |>
dplyr::relocate(Directions_BL, .before = geometry)
}
#' return a quick route summary from googleway::google_directions
#'
#' This function creates a quick abstract of a google maps route, which contains the travel time, starting location and the route overview. This function operates entirely within 'directions_grabber'.
#' @param x results from a googleway::google_directions API query
#' @examples # see 'directions_grabber'
#' @keywords internal
#' @export
directions_overview <- function(x){
# google maps name for starting location
from <- gsub("(.*)[0-9]{5}.*", "\\1", x[["routes"]][["legs"]][[1]][["start_address"]])
from <- paste('from', gsub(' $|,', '', from))
# main route overview,
summary <- x[["routes"]][["summary"]]
# expected drive time
time <- sum ( x[["routes"]][["legs"]][[1]][["steps"]][[1]][["duration"]][["value"]] ) / 60
time <- ceiling( sum( time, (time * 0.05)) / 10 ) * 10 # pad in some extra time 5%
hour <- floor(time/60)
minutes <- time %% 60
if(hour > 0 & minutes != 0){ # an hour or many and change
overview <- paste0(hour, '.', (10 * round( (minutes / 60), 1)),
' hrs ', from, ' via ', summary, '.')
} else if (hour == 1 & minutes == 0){ # one hour flat
overview <- paste0(hour, ' hr ', from, ' via ', summary, '.')
} else if (hour >= 1 & minutes == 0){  # multiple hours flat
overview <- paste0(hour, ' hrs ', from, ' via ', summary, '.')
} else { # less than one hour.
overview <- paste0(minutes, 'mins ', from, ' via ', summary, '.')
}
overview <- gsub('USA ', "", overview)
return(overview)
}
#' @returns dataframe(/tibble) with coordinates unambiguously labeled as being in both degress, minutes, seconds (_dms) and decimal degrees (_dd).
#' @examples
#'  coords <- data.frame(
#'   longitude_dd = runif(15, min = -120, max = -100),
#'   latitude_dd = runif(15, min = 35, max = 48)
#' )
#' coords_formatted <- dms2dd( coords )
#' head(coords_formatted)
#' colnames(coords_formatted)
#' @export
dms2dd <- function(x, lat, long, dms){
# identify columns if they were not supplied
if(missing(lat)){
lat = colnames(x)[grep('lat', colnames(x), ignore.case = T)] }
if(missing(long)){
long = colnames(x)[grep('long', colnames(x), ignore.case = T)] }
# remove any N | E | S | W, or for that matter other alphabetical characters
x[,long] <- gsub('[[:alpha:]]|\\s', "", x[,long])
x[,lat] <- gsub('[[:alpha:]]|\\s', "", x[,lat])
# we will need to perform this operation across every single row,
# because some people will put dms and dd in the same column...
x_spl <- split(x, f = 1:nrow(x))
dmsbyrow <- function(x, long, lat){
# test for DMS format if not supplied
suppressWarnings(
dms <- is.na( as.numeric(x[,long]) == as.numeric(parzer::parse_lon(x[,long])) ))
# convert dms to dd, or rename input columns to dd#
if(dms == T){
x$latitude_dd = parzer::parse_lat(x[,lat])
x$longitude_dd = parzer::parse_lon(x[,long])
x <- x[, -which(names(x) %in% c(lat, long))]
} else{
colnames(x)[which(names(x) == lat)] <- 'latitude_dd'
colnames(x)[which(names(x) == long)] <- 'longitude_dd'
}
return(x)
}
x <- lapply(x_spl, dmsbyrow, long = long, lat = lat) |>
data.table::rbindlist(use.names = TRUE)
x$latitude_dd <- as.numeric(x$latitude_dd, options(digits = 9))
x$longitude_dd <- as.numeric(x$longitude_dd, options(digits = 9))
# ensure the DD signs are appropriate for domain
x$latitude_dd <- round(abs(x$latitude_dd), 5)
x$longitude_dd <- round(abs(x$longitude_dd) * -1, 5)
# now overwrite the original DMS values in our exact format
x$latitude_dms = paste0(
'N ', format_degree(parzer::pz_degree(x$latitude_dd)),
round(parzer::pz_minute(x$latitude_dd), 2),
"'", round(parzer::pz_second(x$latitude_dd), 0)
)
x$longitude_dms = paste0(
'W ', format_degree(parzer::pz_degree(x$longitude_dd)),
round(parzer::pz_minute(x$longitude_dd), 2),
"'", round(parzer::pz_second(x$longitude_dd), 0)
)
x$longitude_dms <- gsub('-', "", x$longitude_dms)
return(x)
}
coords <- data.frame(
longitude_dd = runif(15, min = -120, max = -100),
latitude_dd = runif(15, min = 35, max = 48)
)
coords_formatted <- dms2dd( coords )
head(coords_formatted)
colnames(coords_formatted)
names <- data.frame(
Collection_number = 1:3,
Family = c('Asteracea', 'Flabaceae', 'Onnagraceae')
)
spelling <- family_spell_check(names, path = '../taxonomic_data')
names <- data.frame(
Collection_number = 1:3,
Family = c('Asteracea', 'Flabaceae', 'Onnagraceae')
)
dat4import |>
dplyr::mutate(
Label_Footer = 'Collected under the auspices of the Bureau of Land Management',
Coordinate_Uncertainty_In_Meters = 5,
Coordinate_Source = 'iPad')
dat4import <- format_database_import(collection_examples, format = 'JEPS')
#' dat4import <- format_database_import(collection_examples, format = 'JEPS')
#'
#' # we also know a bit about our material and can populate it here by hand #
#' dat4import |>
#'   dplyr::mutate(
#'    Label_Footer = 'Collected under the auspices of the Bureau of Land Management',
#'    Coordinate_Uncertainty_In_Meters = 5,
#'     Coordinate_Source = 'iPad')
#'
#' @export
format_database_import <- function(x, format){
dbt <- database_templates[database_templates$Database == format,]
col2select <- dbt$BarnebyLives[!is.na(dbt$BarnebyLives)]
names4cols <- dbt$OutputField[!is.na(dbt$BarnebyLives)]
# create any necessary columns by engineering the input data.
if(any(col2select=='Vegetation_Associates')){
x <- tidyr::unite(x, col = Vegetation_Associates,
Vegetation, Associates, na.rm=TRUE, sep = ", ")}
if(any(col2select=='Coordinate_Uncertainty')){
x <- dplyr::mutate(x, Coordinate_Uncertainty = 'Not Recorded')}
if(any(col2select=='Elevation_Units')){
x <- dplyr::mutate(x, Elevation_Units = 'm')}
if(any(col2select=='Date_digital_vd')){
x <- dplyr::mutate(x, Date_digital_vd = Date_digital)}
if(any(col2select=='elevation_m_cp')){
x <- dplyr::mutate(x, elevation_m_cp = elevation_m)}
# select the relevant columns & rename them
x_sub <- dplyr::select(x, dplyr::all_of(col2select)) |>
purrr::set_names(names4cols)
# pad output data with empty columns
empty_cols <- dbt$OutputField[is.na(dbt$BarnebyLives)]
empty_cols <- setNames(
data.frame(
matrix(nrow = nrow(x), ncol = length(empty_cols))),
empty_cols)
out <- dplyr::bind_cols(x_sub, empty_cols) |>
dplyr::select(dplyr::all_of(dbt$OutputField))
return(out)
}
dat4import |>
dplyr::mutate(
Label_Footer = 'Collected under the auspices of the Bureau of Land Management',
Coordinate_Uncertainty_In_Meters = 5,
Coordinate_Source = 'iPad')
format_degree <- function(x, symbol="\u00B0"){
paste0(x, symbol) # @ dirk
}
#' write out spatial data for collections to Google Earth or QGIS
#'
#' This function will write out a simple labeled vector data (ala a 'shapefile') containing just collection number.
#' More data (e.g. species) can be written out using sf::st_write directly. See ?sf those details.
#' The function defaults to writing Google Earth KML files because these can be viewed online without having to to have a local install of the program.
#' @param x a data frame(/sf/tibble) which has at least undergone the 'dms2dd' and 'coords2sf' functions from BarnebyLives.
#' @param path a location to save the data to. If not supplied defaults to the current working directory.
#' @param filename name of file. if not supplied defaults to appending todays date to 'Collections'
#' @param filetype a file format to save the data to. This is a wrapper for sf::st_write and will support all drivers used there. If not supplied defaults to kml for use with Google Earth.
geodata_writer <- function(x, path, filename, filetype){
if(missing(filetype)){filetype <- 'kml'}
if(missing(filename)){filename <- paste0('HerbariumCollections-', Sys.Date())}
if(missing(path)){fname <- paste0(filename, filetype)} else {
fname <- file.path(path, paste0(filename, '.', filetype))
}
ifelse(!dir.exists(file.path(path)), dir.create(file.path(path)), FALSE)
x <- x |>
dplyr::mutate(
Collector_n_Number = paste(gsub("(*UCP)[^;-](?<!\\b\\p{L})", "", Primary_Collector, perl=TRUE),
Collection_number),
UNIQUEID = paste0(Primary_Collector, Collection_number)) |>
dplyr::select(NAME = Collector_n_Number, Description = UNIQUEID) |>
sf::st_write(dsn = fname, driver = filetype,
delete_dsn = TRUE, quiet = T, append = F)
message(crayon::green('Spatial collection data written to: ', fname))
}
