POW_Infrarank = c('var.', 'var.', NA),
POW_Infraspecies =  c('pilosa', 'americana', NA),
POW_Authority =  c('(S. Watson) Rydb.', '(J. Forbes) Rehder', 'A. Gray')
)
powNAce(df)
#' df <- data.frame(
#'  POW_Genus = c('Castilleja', 'Linnaea', 'Dimeresia'),
#'  POW_Epithet = c('pilosa', 'borealis', 'howellii'),
#'  POW_Infrarank = c('var.', 'var.', NA),
#'  POW_Infraspecies =  c('pilosa', 'americana', NA),
#'  POW_Authority =  c('(S. Watson) Rydb.', '(J. Forbes) Rehder', 'A. Gray')
#' )
#' powNAce(df)
#' @export
#'
powNAce <- function(x){
# four conditions are compared to determine which taxonomic level the authority
# applies to
#   infra_base <- function(x){
#    x$POW_Infraspecies_authority <- NA
#    x$POW_Binomial_authority <- NA
#    if(is.na(x$POW_Infrarank)){
#      x$POW_Binomial_authority = x$POW_Authority
#    } else if ( x$POW_Infraspecies == x$POW_Epithet){
#      x$POW_Binomial_authority = x$POW_Authority} else {
#        x$POW_Infraspecies_authority = x$POW_Authority
#      }
#    return(x)
#  }
# we need NA's to be explicitly treated
#   compareNA <- function(v1, v2){
#    same <- (v1 == v2)  |  (is.na(v1) & is.na(v2))
#    same[is.na(same)] <- FALSE
#    return(same)
#   } # @ BEN STACK O 16822426
#   mycs <- c('Genus', 'POW_Genus', 'Epithet', 'POW_Epithet', 'Binomial_Authority',
#             'POW_Binomial_authority', 'Infrarank', 'POW_Infrarank',
#             'Infraspecies', 'POW_Infraspecies', 'POW_Family')
# identify whether the author is for the species or infra species
#   rownames(x) <- 1:nrow(x)
#   splits <- split(x, f = rownames(x))
#   x <- lapply(X = splits, FUN = infra_base)
#   x <- do.call(rbind, x)
#   x[compareNA(x$POW_Name_authority, x$Name_authority ), 'POW_Name_authority'] <- NA
#   x[compareNA(x$POW_Full_name, x$Full_name ), 'POW_Full_name'] <- NA
#   x[compareNA(x$POW_Genus, x$Genus ), 'POW_Genus'] <- NA
#   x[compareNA(x$POW_Epithet, x$Epithet ), 'POW_Epithet'] <- NA
#   x[compareNA(x$POW_Infrarank, x$Infrarank ), 'POW_Infrarank'] <- NA
#   x[compareNA(x$POW_Infraspecies, x$Infraspecies ), 'POW_Infraspecies'] <- NA
#   x[compareNA(x$POW_Family, x$Family ), 'POW_Family'] <- NA
#   x[compareNA(x$POW_Binomial_authority, x$Binomial_authority ), 'POW_Binomial_authority'] <- NA
#   x[compareNA(x$POW_Infraspecies_authority, x$Infraspecies_authority ), 'POW_Infraspecies_authority'] <- NA
#   pos <- which( colnames(x) == 'POW_Epithet' ) - 1
#   x <- dplyr::relocate(x, any_of(mycs),
#                   .after = pos ) |>
#     dplyr::select(-any_of(c('POW_Name_authority', 'POW_Full_name', 'POW_Authority')))
#  return(x)
}
#' df <- data.frame(
#'  POW_Genus = c('Castilleja', 'Linnaea', 'Dimeresia'),
#'  POW_Epithet = c('pilosa', 'borealis', 'howellii'),
#'  POW_Infrarank = c('var.', 'var.', NA),
#'  POW_Infraspecies =  c('pilosa', 'americana', NA),
#'  POW_Authority =  c('(S. Watson) Rydb.', '(J. Forbes) Rehder', 'A. Gray')
#' )
#' powNAce(df)
#' @export
#'
powNAce <- function(x){
# four conditions are compared to determine which taxonomic level the authority
# applies to
#   infra_base <- function(x){
#    x$POW_Infraspecies_authority <- NA
#    x$POW_Binomial_authority <- NA
#    if(is.na(x$POW_Infrarank)){
#      x$POW_Binomial_authority = x$POW_Authority
#    } else if ( x$POW_Infraspecies == x$POW_Epithet){
#      x$POW_Binomial_authority = x$POW_Authority} else {
#        x$POW_Infraspecies_authority = x$POW_Authority
#      }
#    return(x)
#  }
# we need NA's to be explicitly treated
#   compareNA <- function(v1, v2){
#    same <- (v1 == v2)  |  (is.na(v1) & is.na(v2))
#    same[is.na(same)] <- FALSE
#    return(same)
#   } # @ BEN STACK O 16822426
#   mycs <- c('Genus', 'POW_Genus', 'Epithet', 'POW_Epithet', 'Binomial_Authority',
#             'POW_Binomial_authority', 'Infrarank', 'POW_Infrarank',
#             'Infraspecies', 'POW_Infraspecies', 'POW_Family')
# identify whether the author is for the species or infra species
rownames(x) <- 1:nrow(x)
splits <- split(x, f = rownames(x))
x <- lapply(X = splits, FUN = infra_base)
x <- do.call(rbind, x)
#   x[compareNA(x$POW_Name_authority, x$Name_authority ), 'POW_Name_authority'] <- NA
#   x[compareNA(x$POW_Full_name, x$Full_name ), 'POW_Full_name'] <- NA
#   x[compareNA(x$POW_Genus, x$Genus ), 'POW_Genus'] <- NA
#   x[compareNA(x$POW_Epithet, x$Epithet ), 'POW_Epithet'] <- NA
#   x[compareNA(x$POW_Infrarank, x$Infrarank ), 'POW_Infrarank'] <- NA
#   x[compareNA(x$POW_Infraspecies, x$Infraspecies ), 'POW_Infraspecies'] <- NA
#   x[compareNA(x$POW_Family, x$Family ), 'POW_Family'] <- NA
#   x[compareNA(x$POW_Binomial_authority, x$Binomial_authority ), 'POW_Binomial_authority'] <- NA
#   x[compareNA(x$POW_Infraspecies_authority, x$Infraspecies_authority ), 'POW_Infraspecies_authority'] <- NA
#   pos <- which( colnames(x) == 'POW_Epithet' ) - 1
#   x <- dplyr::relocate(x, any_of(mycs),
#                   .after = pos ) |>
#     dplyr::select(-any_of(c('POW_Name_authority', 'POW_Full_name', 'POW_Authority')))
#  return(x)
}
#' df <- data.frame(
#'  POW_Genus = c('Castilleja', 'Linnaea', 'Dimeresia'),
#'  POW_Epithet = c('pilosa', 'borealis', 'howellii'),
#'  POW_Infrarank = c('var.', 'var.', NA),
#'  POW_Infraspecies =  c('pilosa', 'americana', NA),
#'  POW_Authority =  c('(S. Watson) Rydb.', '(J. Forbes) Rehder', 'A. Gray')
#' )
#' powNAce(df)
#' @export
#'
powNAce <- function(x){
# four conditions are compared to determine which taxonomic level the authority
# applies to
#   infra_base <- function(x){
#    x$POW_Infraspecies_authority <- NA
#    x$POW_Binomial_authority <- NA
#    if(is.na(x$POW_Infrarank)){
#      x$POW_Binomial_authority = x$POW_Authority
#    } else if ( x$POW_Infraspecies == x$POW_Epithet){
#      x$POW_Binomial_authority = x$POW_Authority} else {
#        x$POW_Infraspecies_authority = x$POW_Authority
#      }
#    return(x)
#  }
# we need NA's to be explicitly treated
#   compareNA <- function(v1, v2){
#    same <- (v1 == v2)  |  (is.na(v1) & is.na(v2))
#    same[is.na(same)] <- FALSE
#    return(same)
#   } # @ BEN STACK O 16822426
#   mycs <- c('Genus', 'POW_Genus', 'Epithet', 'POW_Epithet', 'Binomial_Authority',
#             'POW_Binomial_authority', 'Infrarank', 'POW_Infrarank',
#             'Infraspecies', 'POW_Infraspecies', 'POW_Family')
# identify whether the author is for the species or infra species
rownames(x) <- 1:nrow(x)
splits <- split(x, f = rownames(x))
x <- lapply(X = splits, FUN = infra_base)
x <- do.call(rbind, x)
#   x[compareNA(x$POW_Name_authority, x$Name_authority ), 'POW_Name_authority'] <- NA
#   x[compareNA(x$POW_Full_name, x$Full_name ), 'POW_Full_name'] <- NA
#   x[compareNA(x$POW_Genus, x$Genus ), 'POW_Genus'] <- NA
#   x[compareNA(x$POW_Epithet, x$Epithet ), 'POW_Epithet'] <- NA
#   x[compareNA(x$POW_Infrarank, x$Infrarank ), 'POW_Infrarank'] <- NA
#   x[compareNA(x$POW_Infraspecies, x$Infraspecies ), 'POW_Infraspecies'] <- NA
#   x[compareNA(x$POW_Family, x$Family ), 'POW_Family'] <- NA
#   x[compareNA(x$POW_Binomial_authority, x$Binomial_authority ), 'POW_Binomial_authority'] <- NA
#   x[compareNA(x$POW_Infraspecies_authority, x$Infraspecies_authority ), 'POW_Infraspecies_authority'] <- NA
#   pos <- which( colnames(x) == 'POW_Epithet' ) - 1
#   x <- dplyr::relocate(x, any_of(mycs),
#                   .after = pos ) |>
#     dplyr::select(-any_of(c('POW_Name_authority', 'POW_Full_name', 'POW_Authority')))
#  return(x)
}
#' df <- data.frame(
#'  POW_Genus = c('Castilleja', 'Linnaea', 'Dimeresia'),
#'  POW_Epithet = c('pilosa', 'borealis', 'howellii'),
#'  POW_Infrarank = c('var.', 'var.', NA),
#'  POW_Infraspecies =  c('pilosa', 'americana', NA),
#'  POW_Authority =  c('(S. Watson) Rydb.', '(J. Forbes) Rehder', 'A. Gray')
#' )
#' powNAce(df)
#' @export
#'
powNAce <- function(x){
# four conditions are compared to determine which taxonomic level the authority
# applies to
#   infra_base <- function(x){
#    x$POW_Infraspecies_authority <- NA
#    x$POW_Binomial_authority <- NA
#    if(is.na(x$POW_Infrarank)){
#      x$POW_Binomial_authority = x$POW_Authority
#    } else if ( x$POW_Infraspecies == x$POW_Epithet){
#      x$POW_Binomial_authority = x$POW_Authority} else {
#        x$POW_Infraspecies_authority = x$POW_Authority
#      }
#    return(x)
#  }
# we need NA's to be explicitly treated
#   compareNA <- function(v1, v2){
#    same <- (v1 == v2)  |  (is.na(v1) & is.na(v2))
#    same[is.na(same)] <- FALSE
#    return(same)
#   } # @ BEN STACK O 16822426
mycs <- c('Genus', 'POW_Genus', 'Epithet', 'POW_Epithet', 'Binomial_Authority',
'POW_Binomial_authority', 'Infrarank', 'POW_Infrarank',
'Infraspecies', 'POW_Infraspecies', 'POW_Family')
# identify whether the author is for the species or infra species
rownames(x) <- 1:nrow(x)
splits <- split(x, f = rownames(x))
x <- lapply(X = splits, FUN = infra_base)
x <- do.call(rbind, x)
#   x[compareNA(x$POW_Name_authority, x$Name_authority ), 'POW_Name_authority'] <- NA
#   x[compareNA(x$POW_Full_name, x$Full_name ), 'POW_Full_name'] <- NA
#   x[compareNA(x$POW_Genus, x$Genus ), 'POW_Genus'] <- NA
#   x[compareNA(x$POW_Epithet, x$Epithet ), 'POW_Epithet'] <- NA
#   x[compareNA(x$POW_Infrarank, x$Infrarank ), 'POW_Infrarank'] <- NA
#   x[compareNA(x$POW_Infraspecies, x$Infraspecies ), 'POW_Infraspecies'] <- NA
#   x[compareNA(x$POW_Family, x$Family ), 'POW_Family'] <- NA
#   x[compareNA(x$POW_Binomial_authority, x$Binomial_authority ), 'POW_Binomial_authority'] <- NA
#   x[compareNA(x$POW_Infraspecies_authority, x$Infraspecies_authority ), 'POW_Infraspecies_authority'] <- NA
#   pos <- which( colnames(x) == 'POW_Epithet' ) - 1
#   x <- dplyr::relocate(x, any_of(mycs),
#                   .after = pos ) |>
#     dplyr::select(-any_of(c('POW_Name_authority', 'POW_Full_name', 'POW_Authority')))
#  return(x)
}
#' df <- data.frame(
#'  POW_Genus = c('Castilleja', 'Linnaea', 'Dimeresia'),
#'  POW_Epithet = c('pilosa', 'borealis', 'howellii'),
#'  POW_Infrarank = c('var.', 'var.', NA),
#'  POW_Infraspecies =  c('pilosa', 'americana', NA),
#'  POW_Authority =  c('(S. Watson) Rydb.', '(J. Forbes) Rehder', 'A. Gray')
#' )
#' powNAce(df)
#' @export
#'
powNAce <- function(x){
# four conditions are compared to determine which taxonomic level the authority
# applies to
#   infra_base <- function(x){
#    x$POW_Infraspecies_authority <- NA
#    x$POW_Binomial_authority <- NA
#    if(is.na(x$POW_Infrarank)){
#      x$POW_Binomial_authority = x$POW_Authority
#    } else if ( x$POW_Infraspecies == x$POW_Epithet){
#      x$POW_Binomial_authority = x$POW_Authority} else {
#        x$POW_Infraspecies_authority = x$POW_Authority
#      }
#    return(x)
#  }
# we need NA's to be explicitly treated
compareNA <- function(v1, v2){
same <- (v1 == v2)  |  (is.na(v1) & is.na(v2))
same[is.na(same)] <- FALSE
return(same)
} # @ BEN STACK O 16822426
mycs <- c('Genus', 'POW_Genus', 'Epithet', 'POW_Epithet', 'Binomial_Authority',
'POW_Binomial_authority', 'Infrarank', 'POW_Infrarank',
'Infraspecies', 'POW_Infraspecies', 'POW_Family')
# identify whether the author is for the species or infra species
rownames(x) <- 1:nrow(x)
splits <- split(x, f = rownames(x))
x <- lapply(X = splits, FUN = infra_base)
x <- do.call(rbind, x)
#   x[compareNA(x$POW_Name_authority, x$Name_authority ), 'POW_Name_authority'] <- NA
#   x[compareNA(x$POW_Full_name, x$Full_name ), 'POW_Full_name'] <- NA
#   x[compareNA(x$POW_Genus, x$Genus ), 'POW_Genus'] <- NA
#   x[compareNA(x$POW_Epithet, x$Epithet ), 'POW_Epithet'] <- NA
#   x[compareNA(x$POW_Infrarank, x$Infrarank ), 'POW_Infrarank'] <- NA
#   x[compareNA(x$POW_Infraspecies, x$Infraspecies ), 'POW_Infraspecies'] <- NA
#   x[compareNA(x$POW_Family, x$Family ), 'POW_Family'] <- NA
#   x[compareNA(x$POW_Binomial_authority, x$Binomial_authority ), 'POW_Binomial_authority'] <- NA
#   x[compareNA(x$POW_Infraspecies_authority, x$Infraspecies_authority ), 'POW_Infraspecies_authority'] <- NA
#   pos <- which( colnames(x) == 'POW_Epithet' ) - 1
#   x <- dplyr::relocate(x, any_of(mycs),
#                   .after = pos ) |>
#     dplyr::select(-any_of(c('POW_Name_authority', 'POW_Full_name', 'POW_Authority')))
#  return(x)
}
#' df <- data.frame(
#'  POW_Genus = c('Castilleja', 'Linnaea', 'Dimeresia'),
#'  POW_Epithet = c('pilosa', 'borealis', 'howellii'),
#'  POW_Infrarank = c('var.', 'var.', NA),
#'  POW_Infraspecies =  c('pilosa', 'americana', NA),
#'  POW_Authority =  c('(S. Watson) Rydb.', '(J. Forbes) Rehder', 'A. Gray')
#' )
#' powNAce(df)
#' @export
#'
powNAce <- function(x){
# four conditions are compared to determine which taxonomic level the authority
# applies to
infra_base <- function(x){
x$POW_Infraspecies_authority <- NA
x$POW_Binomial_authority <- NA
if(is.na(x$POW_Infrarank)){
x$POW_Binomial_authority = x$POW_Authority
} else if ( x$POW_Infraspecies == x$POW_Epithet){
x$POW_Binomial_authority = x$POW_Authority} else {
x$POW_Infraspecies_authority = x$POW_Authority
}
return(x)
}
# we need NA's to be explicitly treated
compareNA <- function(v1, v2){
same <- (v1 == v2)  |  (is.na(v1) & is.na(v2))
same[is.na(same)] <- FALSE
return(same)
} # @ BEN STACK O 16822426
mycs <- c('Genus', 'POW_Genus', 'Epithet', 'POW_Epithet', 'Binomial_Authority',
'POW_Binomial_authority', 'Infrarank', 'POW_Infrarank',
'Infraspecies', 'POW_Infraspecies', 'POW_Family')
# identify whether the author is for the species or infra species
rownames(x) <- 1:nrow(x)
splits <- split(x, f = rownames(x))
x <- lapply(X = splits, FUN = infra_base)
x <- do.call(rbind, x)
#   x[compareNA(x$POW_Name_authority, x$Name_authority ), 'POW_Name_authority'] <- NA
#   x[compareNA(x$POW_Full_name, x$Full_name ), 'POW_Full_name'] <- NA
#   x[compareNA(x$POW_Genus, x$Genus ), 'POW_Genus'] <- NA
#   x[compareNA(x$POW_Epithet, x$Epithet ), 'POW_Epithet'] <- NA
#   x[compareNA(x$POW_Infrarank, x$Infrarank ), 'POW_Infrarank'] <- NA
#   x[compareNA(x$POW_Infraspecies, x$Infraspecies ), 'POW_Infraspecies'] <- NA
#   x[compareNA(x$POW_Family, x$Family ), 'POW_Family'] <- NA
#   x[compareNA(x$POW_Binomial_authority, x$Binomial_authority ), 'POW_Binomial_authority'] <- NA
#   x[compareNA(x$POW_Infraspecies_authority, x$Infraspecies_authority ), 'POW_Infraspecies_authority'] <- NA
#   pos <- which( colnames(x) == 'POW_Epithet' ) - 1
#   x <- dplyr::relocate(x, any_of(mycs),
#                   .after = pos ) |>
#     dplyr::select(-any_of(c('POW_Name_authority', 'POW_Full_name', 'POW_Authority')))
#  return(x)
}
#' df <- data.frame(
#'  POW_Genus = c('Castilleja', 'Linnaea', 'Dimeresia'),
#'  POW_Epithet = c('pilosa', 'borealis', 'howellii'),
#'  POW_Infrarank = c('var.', 'var.', NA),
#'  POW_Infraspecies =  c('pilosa', 'americana', NA),
#'  POW_Authority =  c('(S. Watson) Rydb.', '(J. Forbes) Rehder', 'A. Gray')
#' )
#' powNAce(df)
#' @export
#'
powNAce <- function(x){
# four conditions are compared to determine which taxonomic level the authority
# applies to
infra_base <- function(x){
x$POW_Infraspecies_authority <- NA
x$POW_Binomial_authority <- NA
if(is.na(x$POW_Infrarank)){
x$POW_Binomial_authority = x$POW_Authority
} else if ( x$POW_Infraspecies == x$POW_Epithet){
x$POW_Binomial_authority = x$POW_Authority} else {
x$POW_Infraspecies_authority = x$POW_Authority
}
return(x)
}
# we need NA's to be explicitly treated
compareNA <- function(v1, v2){
same <- (v1 == v2)  |  (is.na(v1) & is.na(v2))
same[is.na(same)] <- FALSE
return(same)
} # @ BEN STACK O 16822426
mycs <- c('Genus', 'POW_Genus', 'Epithet', 'POW_Epithet', 'Binomial_Authority',
'POW_Binomial_authority', 'Infrarank', 'POW_Infrarank',
'Infraspecies', 'POW_Infraspecies', 'POW_Family')
# identify whether the author is for the species or infra species
rownames(x) <- 1:nrow(x)
splits <- split(x, f = rownames(x))
x <- lapply(X = splits, FUN = infra_base)
x <- do.call(rbind, x)
x[compareNA(x$POW_Name_authority, x$Name_authority ), 'POW_Name_authority'] <- NA
x[compareNA(x$POW_Full_name, x$Full_name ), 'POW_Full_name'] <- NA
x[compareNA(x$POW_Genus, x$Genus ), 'POW_Genus'] <- NA
x[compareNA(x$POW_Epithet, x$Epithet ), 'POW_Epithet'] <- NA
x[compareNA(x$POW_Infrarank, x$Infrarank ), 'POW_Infrarank'] <- NA
x[compareNA(x$POW_Infraspecies, x$Infraspecies ), 'POW_Infraspecies'] <- NA
x[compareNA(x$POW_Family, x$Family ), 'POW_Family'] <- NA
x[compareNA(x$POW_Binomial_authority, x$Binomial_authority ), 'POW_Binomial_authority'] <- NA
x[compareNA(x$POW_Infraspecies_authority, x$Infraspecies_authority ), 'POW_Infraspecies_authority'] <- NA
pos <- which( colnames(x) == 'POW_Epithet' ) - 1
x <- dplyr::relocate(x, any_of(mycs),
.after = pos ) |>
dplyr::select(-any_of(c('POW_Name_authority', 'POW_Full_name', 'POW_Authority')))
return(x)
}
df <- data.frame(
POW_Genus = c('Castilleja', 'Linnaea', 'Dimeresia'),
POW_Epithet = c('pilosa', 'borealis', 'howellii'),
POW_Infrarank = c('var.', 'var.', NA),
POW_Infraspecies =  c('pilosa', 'americana', NA),
POW_Authority =  c('(S. Watson) Rydb.', '(J. Forbes) Rehder', 'A. Gray')
)
powNAce(df)
libPaths(BarnebyLives)
libPaths('BarnebyLives')
.libPaths('BarnebyLives')
.libPaths()
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(dpi = 300)
knitr::opts_chunk$set(message = FALSE)
knitr::opts_chunk$set(warning = FALSE)
#' write values and collapse NAs
#'
#' This function will determine whether to print or hide a variable onto labels
#' @param x the input character of length 1
#' @param y italicize or not? Boolean
writer <- function(x, y){
if(missing(y)){y = TRUE}
if (is.na(x)){""} else if(y = FALSE){x} else (paste0('*', x, '*'))
#' write values and collapse NAs
#'
#' This function will determine whether to print or hide a variable onto labels
#' @param x the input character of length 1
#' @param y italicize or not? Boolean
writer <- function(x, y){
if(missing(y)){y <- TRUE}
if (is.na(x)){""} else if(y <- FALSE){x} else (paste0('*', x, '*'))
}
personalized_info <- read.csv("meeting_times.csv", stringsAsFactors = FALSE)
data <- collection_examples[50,]
data <- collection_examples[50,]
library(BarnebyLives)
collection_examples
collection_examples
#'
#' This function uses the BarnebyLives custom template to write labels ala
#' a mail merge. Each label will be written as a separate file with the dimensions
#' of 4x4 inches.
#' @param x a path to a csv of labels which have been cleaned with BL, and which the analyst
#' has evaluated for conflicts.
#' @param outdir an output directory to hold the files.
#' @example
#' label_writer(collection_examples, BL_label_example)
#' @export
label_writer <- function(x, outdir) {
if(missing(outdir)){outdir <- file.path(getwd(), 'Labels') }
if (!dir.exists(outdir)){ dir.create(outdir) }
label_info <- read.csv(file = x) |>
dplyr::mutate(UNIQUEID = paste0(Primary_Collector, Collection_number))
for (i in 1:nrow(label_info)){
rmarkdown::render(
input = "skeleton.Rmd",
output_format = "pdf_document",
output_file = paste0(label_info[i, 'UNIQUEID'], ".pdf"),
output_dir = outdir)
}
}
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(dpi = 300)
knitr::opts_chunk$set(message = FALSE)
knitr::opts_chunk$set(warning = FALSE)
data <- read.csv("shipping_examples.csv", stringsAsFactors = FALSE)
#'
#' This function uses the BarnebyLives custom template to write labels ala
#' a mail merge. Each label will be written as a separate file with the dimensions
#' of 4x4 inches.
#' @param x a path to a csv of labels which have been cleaned with BL, and which the analyst
#' has evaluated for conflicts.
#' @param outdir an output directory to hold the files.
#' @example
#' label_writer(collection_examples, BL_label_example)
#' @export
label_writer <- function(x, outdir) {
if(missing(outdir)){outdir <- file.path(getwd(), 'Labels') }
if (!dir.exists(outdir)){ dir.create(outdir) }
label_info <- read.csv(x) |>
dplyr::mutate(UNIQUEID = paste0(Primary_Collector, Collection_number))
for (i in 1:nrow(label_info)){
rmarkdown::render(
input = "skeleton.Rmd",
output_format = "pdf_document",
output_file = paste0(label_info[i, 'UNIQUEID'], ".pdf"),
output_dir = outdir)
}
}
label_info <- read.csv("shipping_examples.csv", stringsAsFactors = FALSE)
data <- label_info[i,]
data <- label_info[2,]
\fontsize{14pt}{14pt}
data <- label_info[1,]
#'
#' This function uses the BarnebyLives custom template to write labels ala
#' a mail merge. Each label will be written as a separate file with the dimensions
#' of 4x4 inches.
#' @param x a path to a csv of labels which have been cleaned with BL, and which the analyst
#' has evaluated for conflicts.
#' @param outdir an output directory to hold the files.
#' @example
#' label_writer(collection_examples, BL_label_example)
#' @export
label_writer <- function(x, outdir) {
if(missing(outdir)){outdir <- file.path(getwd(), 'Labels') }
if (!dir.exists(outdir)){ dir.create(outdir) }
label_info <- read.csv(x) |>
dplyr::mutate(UNIQUEID = paste0(Primary_Collector, Collection_number))
for (i in 1:nrow(label_info)){
rmarkdown::render(
input = "skeleton.Rmd",
output_format = "pdf_document",
output_file = paste0(label_info[i, 'UNIQUEID'], ".pdf"),
output_dir = outdir)
}
}
?na.if
??na.if
#' do or don't write determination information
#'
#' This functions determines whether to write information on whom determined the specimen
#' when, and via which texts. It used as a final step when formatting labels.
#' @param x
#' @examples
#' phacelia <- collection_examples[31,]
#' writer_fide(phacelia)
#' @export
writer_fide <- function(x){
x$Fide[x$Fide==""] <- NA
if (is.na(x$Fide)){""} else {
paste0('Fide: *',
sub(' Flora ', ' Fl. ', x$Fide),
'*, by: ', x$Determined_by, ' on ', x$Determined_date)}
}
